/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SVGRender, SVGRenderInterface } from "../SVGRender";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_alias",
        type: "string",
      },
    ],
    name: "generate",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6103d38061007e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063231c1d4314610051578063715018a6146100895780638da5cb5b14610093578063f2fde38b146100ae575b600080fd5b61007361005f36600461025d565b505060408051602081019091526000815290565b6040516100809190610318565b60405180910390f35b6100916100c1565b005b6000546040516001600160a01b039091168152602001610080565b6100916100bc36600461036d565b61012c565b6000546001600160a01b031633146101205760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61012a60006101f7565b565b6000546001600160a01b031633146101865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610117565b6001600160a01b0381166101eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610117565b6101f4816101f7565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561027057600080fd5b82359150602083013567ffffffffffffffff8082111561028f57600080fd5b818501915085601f8301126102a357600080fd5b8135818111156102b5576102b5610247565b604051601f8201601f19908116603f011681019083821181831017156102dd576102dd610247565b816040528281528860208487010111156102f657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b600060208083528351808285015260005b8181101561034557858101830151858201604001528201610329565b81811115610357576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561037f57600080fd5b81356001600160a01b038116811461039657600080fd5b939250505056fea2646970667358221220580abe4d545a979ab4668fa944f97e3929aea942f1db4a98b392387d0cfcf09e64736f6c634300080f0033";

type SVGRenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SVGRenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SVGRender__factory extends ContractFactory {
  constructor(...args: SVGRenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SVGRender";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SVGRender> {
    return super.deploy(overrides || {}) as Promise<SVGRender>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SVGRender {
    return super.attach(address) as SVGRender;
  }
  connect(signer: Signer): SVGRender__factory {
    return super.connect(signer) as SVGRender__factory;
  }
  static readonly contractName: "SVGRender";
  public readonly contractName: "SVGRender";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SVGRenderInterface {
    return new utils.Interface(_abi) as SVGRenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SVGRender {
    return new Contract(address, _abi, signerOrProvider) as SVGRender;
  }
}
