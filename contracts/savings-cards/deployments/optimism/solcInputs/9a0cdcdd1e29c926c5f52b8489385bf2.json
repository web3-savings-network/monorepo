{
  "language": "Solidity",
  "sources": {
    "contracts/Delegatable/CaveatEnforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./TypesAndDecoders.sol\";\n\nabstract contract CaveatEnforcer {\n    function enforceCaveat(\n        bytes calldata terms,\n        Transaction calldata tx,\n        bytes32 delegationHash\n    ) public virtual returns (bool);\n}\n"
    },
    "contracts/Delegatable/TypesAndDecoders.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\nimport \"./libraries/ECRecovery.sol\";\n\n// BEGIN EIP712 AUTOGENERATED SETUP\nstruct EIP712Domain {\n    string name;\n    string version;\n    uint256 chainId;\n    address verifyingContract;\n}\n\nbytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\n    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n);\n\nstruct Invocation {\n    Transaction transaction;\n    SignedDelegation[] authority;\n}\n\nbytes32 constant INVOCATION_TYPEHASH = keccak256(\n    \"Invocation(Transaction transaction,SignedDelegation[] authority)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct Invocations {\n    Invocation[] batch;\n    ReplayProtection replayProtection;\n}\n\nbytes32 constant INVOCATIONS_TYPEHASH = keccak256(\n    \"Invocations(Invocation[] batch,ReplayProtection replayProtection)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct SignedInvocation {\n    Invocations invocations;\n    bytes signature;\n}\n\nbytes32 constant SIGNEDINVOCATION_TYPEHASH = keccak256(\n    \"SignedInvocation(Invocations invocations,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)Invocation(Transaction transaction,SignedDelegation[] authority)Invocations(Invocation[] batch,ReplayProtection replayProtection)ReplayProtection(uint nonce,uint queue)SignedDelegation(Delegation delegation,bytes signature)Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct Transaction {\n    address to;\n    uint256 gasLimit;\n    bytes data;\n}\n\nbytes32 constant TRANSACTION_TYPEHASH = keccak256(\n    \"Transaction(address to,uint256 gasLimit,bytes data)\"\n);\n\nstruct ReplayProtection {\n    uint256 nonce;\n    uint256 queue;\n}\n\nbytes32 constant REPLAYPROTECTION_TYPEHASH = keccak256(\n    \"ReplayProtection(uint nonce,uint queue)\"\n);\n\nstruct Delegation {\n    address delegate;\n    bytes32 authority;\n    Caveat[] caveats;\n}\n\nbytes32 constant DELEGATION_TYPEHASH = keccak256(\n    \"Delegation(address delegate,bytes32 authority,Caveat[] caveats)Caveat(address enforcer,bytes terms)\"\n);\n\nstruct Caveat {\n    address enforcer;\n    bytes terms;\n}\n\nbytes32 constant CAVEAT_TYPEHASH = keccak256(\n    \"Caveat(address enforcer,bytes terms)\"\n);\n\nstruct SignedDelegation {\n    Delegation delegation;\n    bytes signature;\n}\n\nbytes32 constant SIGNEDDELEGATION_TYPEHASH = keccak256(\n    \"SignedDelegation(Delegation delegation,bytes signature)Caveat(address enforcer,bytes terms)Delegation(address delegate,bytes32 authority,Caveat[] caveats)\"\n);\n\n// END EIP712 AUTOGENERATED SETUP\n\ncontract EIP712Decoder is ECRecovery {\n    // BEGIN EIP712 AUTOGENERATED BODY. See scripts/typesToCode.js\n\n    // function GET_EIP712DOMAIN_PACKETHASH(EIP712Domain memory _input)\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     bytes memory encoded = abi.encode(\n    //         EIP712DOMAIN_TYPEHASH,\n    //         _input.name,\n    //         _input.version,\n    //         _input.chainId,\n    //         _input.verifyingContract\n    //     );\n\n    //     return keccak256(encoded);\n    // }\n\n    function GET_INVOCATION_PACKETHASH(Invocation memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            INVOCATION_TYPEHASH,\n            GET_TRANSACTION_PACKETHASH(_input.transaction),\n            GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(_input.authority)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_SIGNEDDELEGATION_ARRAY_PACKETHASH(\n        SignedDelegation[] memory _input\n    ) public pure returns (bytes32) {\n        bytes memory encoded;\n        for (uint256 i = 0; i < _input.length; i++) {\n            encoded = bytes.concat(\n                encoded,\n                GET_SIGNEDDELEGATION_PACKETHASH(_input[i])\n            );\n        }\n\n        bytes32 hash = keccak256(encoded);\n        return hash;\n    }\n\n    function GET_INVOCATIONS_PACKETHASH(Invocations memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            INVOCATIONS_TYPEHASH,\n            GET_INVOCATION_ARRAY_PACKETHASH(_input.batch),\n            GET_REPLAYPROTECTION_PACKETHASH(_input.replayProtection)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_INVOCATION_ARRAY_PACKETHASH(Invocation[] memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded;\n        for (uint256 i = 0; i < _input.length; i++) {\n            encoded = bytes.concat(\n                encoded,\n                GET_INVOCATION_PACKETHASH(_input[i])\n            );\n        }\n\n        bytes32 hash = keccak256(encoded);\n        return hash;\n    }\n\n    // function GET_SIGNEDINVOCATION_PACKETHASH(SignedInvocation memory _input)\n    //     public\n    //     pure\n    //     returns (bytes32)\n    // {\n    //     bytes memory encoded = abi.encode(\n    //         SIGNEDINVOCATION_TYPEHASH,\n    //         GET_INVOCATIONS_PACKETHASH(_input.invocations),\n    //         keccak256(_input.signature)\n    //     );\n\n    //     return keccak256(encoded);\n    // }\n\n    function GET_TRANSACTION_PACKETHASH(Transaction memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            TRANSACTION_TYPEHASH,\n            _input.to,\n            _input.gasLimit,\n            keccak256(_input.data)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_REPLAYPROTECTION_PACKETHASH(ReplayProtection memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            REPLAYPROTECTION_TYPEHASH,\n            _input.nonce,\n            _input.queue\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_DELEGATION_PACKETHASH(Delegation memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            DELEGATION_TYPEHASH,\n            _input.delegate,\n            _input.authority,\n            GET_CAVEAT_ARRAY_PACKETHASH(_input.caveats)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_CAVEAT_ARRAY_PACKETHASH(Caveat[] memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded;\n        for (uint256 i = 0; i < _input.length; i++) {\n            encoded = bytes.concat(encoded, GET_CAVEAT_PACKETHASH(_input[i]));\n        }\n\n        bytes32 hash = keccak256(encoded);\n        return hash;\n    }\n\n    function GET_CAVEAT_PACKETHASH(Caveat memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            CAVEAT_TYPEHASH,\n            _input.enforcer,\n            keccak256(_input.terms)\n        );\n\n        return keccak256(encoded);\n    }\n\n    function GET_SIGNEDDELEGATION_PACKETHASH(SignedDelegation memory _input)\n        public\n        pure\n        returns (bytes32)\n    {\n        bytes memory encoded = abi.encode(\n            SIGNEDDELEGATION_TYPEHASH,\n            GET_DELEGATION_PACKETHASH(_input.delegation),\n            keccak256(_input.signature)\n        );\n\n        return keccak256(encoded);\n    }\n}\n"
    },
    "contracts/Delegatable/libraries/ECRecovery.sol": {
      "content": "pragma solidity 0.8.15;\n\n// SPDX-License-Identifier: MIT\n\ncontract ECRecovery {\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory sig)\n        internal\n        pure\n        returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        //Check the signature length\n        if (sig.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n}\n"
    },
    "contracts/Delegatable/enforcers/TimestampEnforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../CaveatEnforcer.sol\";\nimport {BytesLib} from \"../libraries/BytesLib.sol\";\n\ncontract TimestampEnforcer is CaveatEnforcer {\n    /**\n     * @notice Allows the delegator to specify the latest timestamp the delegation will be valid.\n     * @param terms - The latest timestamp this delegation is valid.\n     * @param transaction - The transaction the delegate might try to perform.\n     * @param delegationHash - The hash of the delegation being operated on.\n     **/\n    function enforceCaveat(\n        bytes calldata terms,\n        Transaction calldata transaction,\n        bytes32 delegationHash\n    ) public override returns (bool) {\n        uint128 logicOperator = BytesLib.toUint128(terms, 0);\n        uint128 blockExpiration = BytesLib.toUint128(terms, 16);\n        if (logicOperator == 0) {\n            if (blockExpiration < block.timestamp) {\n                return true;\n            } else {\n                revert(\"TimestampEnforcer:expired-delegation\");\n            }\n        } else {\n            if (blockExpiration > block.timestamp) {\n                return true;\n            } else {\n                revert(\"TimestampEnforcer:early-delegation\");\n            }\n        }\n    }\n}\n"
    },
    "contracts/Delegatable/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\n        internal\n    {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(\n                    add(tempBytes, lengthmod),\n                    mul(0x20, iszero(lengthmod))\n                )\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(\n                        add(\n                            add(_bytes, lengthmod),\n                            mul(0x20, iszero(lengthmod))\n                        ),\n                        _start\n                    )\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (address)\n    {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(\n                mload(add(add(_bytes, 0x20), _start)),\n                0x1000000000000000000000000\n            )\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint8)\n    {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint16)\n    {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint32)\n    {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint64)\n    {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint96)\n    {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint128)\n    {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (bytes32)\n    {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\n        internal\n        pure\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "contracts/Delegatable/enforcers/LimitedCallsEnforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { BytesLib } from \"../libraries/BytesLib.sol\";\nimport \"../CaveatEnforcer.sol\";\n\ncontract LimitedCallsEnforcer is CaveatEnforcer {\n  mapping(address => mapping(bytes32 => uint256)) callCounts;\n\n  /**\n   * @notice Allows the delegator to specify a maximum number of times the recipient may perform transactions on their behalf.\n   * @param terms - The maximum number of times the delegate may perform transactions on their behalf.\n   * @param delegationHash - The hash of the delegation being operated on.\n   */\n  function enforceCaveat(\n    bytes calldata terms,\n    Transaction calldata,\n    bytes32 delegationHash\n  ) public override returns (bool) {\n    uint256 limit = BytesLib.toUint256(terms, 0);\n    uint256 callCount = callCounts[msg.sender][delegationHash];\n    require(callCount < limit, \"LimitedCallsEnforcer:limit-exceeded\");\n    callCounts[msg.sender][delegationHash]++;\n    return true;\n  }\n}\n"
    },
    "contracts/Delegatable/enforcers/ERC20AllowanceEnforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../CaveatEnforcer.sol\";\nimport {BytesLib} from \"../libraries/BytesLib.sol\";\n\ncontract ERC20AllowanceEnforcer is CaveatEnforcer {\n    mapping(address => mapping(bytes32 => uint256)) spentMap;\n\n    /**\n     * @notice Allows the delegator to specify a maximum sum of the contract token to transfer on their behalf.\n     * @param terms - The numeric maximum allowance that the recipient may transfer on the signer's behalf.\n     * @param transaction - The transaction the delegate might try to perform.\n     * @param delegationHash - The hash of the delegation being operated on.\n     */\n    function enforceCaveat(\n        bytes calldata terms,\n        Transaction calldata transaction,\n        bytes32 delegationHash\n    ) public override returns (bool) {\n        bytes4 targetSig = bytes4(transaction.data[0:4]);\n        bytes4 allowedSig = bytes4(0xa9059cbb);\n        require(\n            targetSig == allowedSig,\n            \"ERC20AllowanceEnforcer:invalid-method\"\n        );\n        uint256 limit = BytesLib.toUint256(terms, 0);\n        uint256 sending = BytesLib.toUint256(transaction.data, 36);\n        spentMap[msg.sender][delegationHash] += sending;\n        uint256 spent = spentMap[msg.sender][delegationHash];\n        require(spent <= limit, \"ERC20AllowanceEnforcer:allowance-exceeded\");\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Web3CardStorage.sol": {
      "content": "pragma solidity 0.8.15;\n\nimport \"hardhat/console.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { ERC20TWAB } from \"./ERC20TWAB.sol\";\nimport { ERC721Storage } from \"@erc721k/core-sol/contracts/ERC721Storage.sol\";\nimport { IERC721 } from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title Web3CardStorage\n * @author Kames Geraghty\n */\ncontract Web3CardStorage is ERC721Storage {\n  address public erc20TWABInstance;\n  address public erc721KInstance;\n  mapping(uint256 => string) private _name;\n  mapping(uint256 => string) private _emojiMap;\n\n  constructor(\n    address _svgRender_,\n    address _traitsFetch_,\n    ContractURI memory _contractURI_\n  ) ERC721Storage(_svgRender_, _traitsFetch_, _contractURI_) {}\n\n  /* ===================================================================================== */\n  /* Override Functions                                                                    */\n  /* ===================================================================================== */\n  function _parseName(uint256 _tokenId) internal view override returns (string memory) {\n    return string.concat(\"Example #\", Strings.toString(_tokenId));\n  }\n\n  function _parseDescription(uint256 _tokenId) internal view override returns (string memory) {\n    return string.concat(\"Member #\", Strings.toString(_tokenId), \" of Example.\");\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function getData(uint256 _tokenId) internal view returns (string memory) {\n    return _name[_tokenId];\n  }\n\n  function getImageBytes(uint256 tokenId) external view returns (bytes memory imageData) {\n    address account = IERC721(erc721KInstance).ownerOf(tokenId);\n    return _generateBytesData(tokenId, account);\n  }\n\n  function getTraitsBytes(uint256 tokenId) external view returns (bytes memory traitsData) {\n    address account = IERC721(erc721KInstance).ownerOf(tokenId);\n    return _generateBytesData(tokenId, account);\n  }\n\n  function getPreview(uint256 tokenId, address account)\n    external\n    view\n    returns (bytes memory imageData)\n  {\n    return _generateBytesData(tokenId, account);\n  }\n\n  function setEmoji(uint256 tokenId, string memory emoji) external {\n    require(_msgSender() == IERC721(erc721KInstance).ownerOf(tokenId), \"Web3CardStorage:not-owner\");\n    _emojiMap[tokenId] = emoji;\n  }\n\n  function setERC20TWABInstance(address _erc20TWABInstance) external onlyOwner {\n    erc20TWABInstance = _erc20TWABInstance;\n  }\n\n  function setERC721KInstance(address _erc721KInstance) external onlyOwner {\n    erc721KInstance = _erc721KInstance;\n  }\n\n  function _generateBytesData(uint256 _tokenId, address account)\n    internal\n    view\n    returns (bytes memory bytesData)\n  {\n    uint256 balance = 1e6;\n    uint256 avgBalance2Weeks;\n    uint256 avgBalance8Weeks;\n    uint256 avgBalance26Weeks;\n    string memory emojiFetch = _emojiMap[_tokenId];\n    if (bytes(emojiFetch).length == 0) {\n      emojiFetch = unicode\"💳\";\n    }\n    if (erc20TWABInstance != address(0)) {\n      balance = ERC20TWAB(erc20TWABInstance).balanceOf(account);\n      balance = 10e6;\n      // Average Balances\n      uint64 start2Weeks = uint64(block.timestamp - 2 weeks);\n      uint64 start8Weeks = uint64(block.timestamp - 8 weeks);\n      uint64 start26Weeks = uint64(block.timestamp - 26 weeks);\n      uint64 end = uint64(block.timestamp);\n      uint256 avgBalance2Weeks = ERC20TWAB(erc20TWABInstance).getAverageBalanceBetween(\n        account,\n        start2Weeks,\n        end\n      );\n      uint256 avgBalance8Weeks = ERC20TWAB(erc20TWABInstance).getAverageBalanceBetween(\n        account,\n        start8Weeks,\n        end\n      );\n      uint256 avgBalance26Weeks = ERC20TWAB(erc20TWABInstance).getAverageBalanceBetween(\n        account,\n        start26Weeks,\n        end\n      );\n    }\n    bytesData = bytes(\n      abi.encode(\n        account,\n        balance,\n        avgBalance2Weeks,\n        avgBalance8Weeks,\n        avgBalance26Weeks,\n        emojiFetch\n      )\n    );\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _getAverageBalance(\n    address _account,\n    uint64 _start,\n    uint64 _end\n  ) internal view returns (uint256) {\n    // return 0;\n    return ERC20TWAB(erc20TWABInstance).getAverageBalanceBetween(_account, _start, _end);\n  }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/ERC20TWAB.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { ObservationLib } from \"./twab/ObservationLib.sol\";\nimport { TwabLib } from \"./twab/TwabLib.sol\";\nimport { ExtendedSafeCastLib } from \"./twab/ExtendedSafeCastLib.sol\";\n\n/**\n * @title ERC20TWAB\n * @author Kames Geraghty\n * @notice ERC20TWAB is a Web3 of Trust experiment: implementing time-weighted average balances.\n           Credit: PoolTogether Inc (Brendan Asselstine)\n */\ncontract ERC20TWAB is ERC20Permit {\n  using SafeERC20 for IERC20;\n  using ExtendedSafeCastLib for uint256;\n\n  uint256 private distribution = 10000e18;\n\n  bytes32 private immutable _DELEGATE_TYPEHASH =\n    keccak256(\"Delegate(address user,address delegate,uint256 nonce,uint256 deadline)\");\n\n  /// @notice Record of token holders TWABs for each account.\n  mapping(address => TwabLib.Account) internal userTwabs;\n\n  /// @notice Record of tickets total supply and ring buff parameters used for observation.\n  TwabLib.Account internal totalSupplyTwab;\n\n  /// @notice Mapping of delegates.  Each address can delegate their ticket power to another.\n  mapping(address => address) internal delegates;\n\n  /**\n   * @notice Emitted when TWAB balance has been delegated to another user.\n   * @param delegator Address of the delegator.\n   * @param delegate Address of the delegate.\n   */\n  event Delegated(address indexed delegator, address indexed delegate);\n\n  /**\n   * @notice Emitted when a new TWAB has been recorded.\n   * @param delegate The recipient of the ticket power (may be the same as the user).\n   * @param newTwab Updated TWAB of a ticket holder after a successful TWAB recording.\n   */\n  event NewUserTwab(address indexed delegate, ObservationLib.Observation newTwab);\n\n  /**\n   * @notice Emitted when a new total supply TWAB has been recorded.\n   * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a successful total supply TWAB recording.\n   */\n  event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\n\n  constructor(string memory name, string memory symbol)\n    ERC20Permit(\"ERC20TWAB\")\n    ERC20(name, symbol)\n  {}\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function getAccountDetails(address _user) external view returns (TwabLib.AccountDetails memory) {\n    return userTwabs[_user].details;\n  }\n\n  function getTwab(address _user, uint16 _index)\n    external\n    view\n    returns (ObservationLib.Observation memory)\n  {\n    return userTwabs[_user].twabs[_index];\n  }\n\n  function getBalanceAt(address _user, uint64 _target) external view returns (uint256) {\n    TwabLib.Account storage account = userTwabs[_user];\n\n    return\n      TwabLib.getBalanceAt(\n        account.twabs,\n        account.details,\n        uint32(_target),\n        uint32(block.timestamp)\n      );\n  }\n\n  function getAverageBalancesBetween(\n    address _user,\n    uint64[] calldata _startTimes,\n    uint64[] calldata _endTimes\n  ) external view returns (uint256[] memory) {\n    return _getAverageBalancesBetween(userTwabs[_user], _startTimes, _endTimes);\n  }\n\n  function getAverageTotalSuppliesBetween(\n    uint64[] calldata _startTimes,\n    uint64[] calldata _endTimes\n  ) external view returns (uint256[] memory) {\n    return _getAverageBalancesBetween(totalSupplyTwab, _startTimes, _endTimes);\n  }\n\n  function getAverageBalanceBetween(\n    address _user,\n    uint64 _startTime,\n    uint64 _endTime\n  ) external view returns (uint256) {\n    TwabLib.Account storage account = userTwabs[_user];\n\n    return\n      TwabLib.getAverageBalanceBetween(\n        account.twabs,\n        account.details,\n        uint32(_startTime),\n        uint32(_endTime),\n        uint32(block.timestamp)\n      );\n  }\n\n  function getBalancesAt(address _user, uint64[] calldata _targets)\n    external\n    view\n    returns (uint256[] memory)\n  {\n    uint256 length = _targets.length;\n    uint256[] memory _balances = new uint256[](length);\n\n    TwabLib.Account storage twabContext = userTwabs[_user];\n    TwabLib.AccountDetails memory details = twabContext.details;\n\n    for (uint256 i = 0; i < length; i++) {\n      _balances[i] = TwabLib.getBalanceAt(\n        twabContext.twabs,\n        details,\n        uint32(_targets[i]),\n        uint32(block.timestamp)\n      );\n    }\n\n    return _balances;\n  }\n\n  function getTotalSupplyAt(uint64 _target) external view returns (uint256) {\n    return\n      TwabLib.getBalanceAt(\n        totalSupplyTwab.twabs,\n        totalSupplyTwab.details,\n        uint32(_target),\n        uint32(block.timestamp)\n      );\n  }\n\n  function getTotalSuppliesAt(uint64[] calldata _targets) external view returns (uint256[] memory) {\n    uint256 length = _targets.length;\n    uint256[] memory totalSupplies = new uint256[](length);\n\n    TwabLib.AccountDetails memory details = totalSupplyTwab.details;\n\n    for (uint256 i = 0; i < length; i++) {\n      totalSupplies[i] = TwabLib.getBalanceAt(\n        totalSupplyTwab.twabs,\n        details,\n        uint32(_targets[i]),\n        uint32(block.timestamp)\n      );\n    }\n\n    return totalSupplies;\n  }\n\n  function delegateOf(address _user) external view returns (address) {\n    return delegates[_user];\n  }\n\n  function delegateWithSignature(\n    address _user,\n    address _newDelegate,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external virtual {\n    require(block.timestamp <= _deadline, \"Ticket/delegate-expired-deadline\");\n\n    bytes32 structHash = keccak256(\n      abi.encode(_DELEGATE_TYPEHASH, _user, _newDelegate, _useNonce(_user), _deadline)\n    );\n\n    bytes32 hash = _hashTypedDataV4(structHash);\n\n    address signer = ECDSA.recover(hash, _v, _r, _s);\n    require(signer == _user, \"Ticket/delegate-invalid-signature\");\n\n    _delegate(_user, _newDelegate);\n  }\n\n  function delegate(address _to) external virtual {\n    _delegate(msg.sender, _to);\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /// @notice Delegates a users chance to another\n  /// @param _user The user whose balance should be delegated\n  /// @param _to The delegate\n  function _delegate(address _user, address _to) internal {\n    uint256 balance = balanceOf(_user);\n    address currentDelegate = delegates[_user];\n\n    if (currentDelegate == _to) {\n      return;\n    }\n\n    delegates[_user] = _to;\n\n    _transferTwab(currentDelegate, _to, balance);\n\n    emit Delegated(_user, _to);\n  }\n\n  /**\n   * @notice Retrieves the average balances held by a user for a given time frame.\n   * @param _account The user whose balance is checked.\n   * @param _startTimes The start time of the time frame.\n   * @param _endTimes The end time of the time frame.\n   * @return The average balance that the user held during the time frame.\n   */\n  function _getAverageBalancesBetween(\n    TwabLib.Account storage _account,\n    uint64[] calldata _startTimes,\n    uint64[] calldata _endTimes\n  ) internal view returns (uint256[] memory) {\n    uint256 startTimesLength = _startTimes.length;\n    require(startTimesLength == _endTimes.length, \"Ticket/start-end-times-length-match\");\n\n    TwabLib.AccountDetails memory accountDetails = _account.details;\n\n    uint256[] memory averageBalances = new uint256[](startTimesLength);\n    uint32 currentTimestamp = uint32(block.timestamp);\n\n    for (uint256 i = 0; i < startTimesLength; i++) {\n      averageBalances[i] = TwabLib.getAverageBalanceBetween(\n        _account.twabs,\n        accountDetails,\n        uint32(_startTimes[i]),\n        uint32(_endTimes[i]),\n        currentTimestamp\n      );\n    }\n\n    return averageBalances;\n  }\n\n  /// @notice Transfers the given TWAB balance from one user to another\n  /// @param _from The user to transfer the balance from.  May be zero in the event of a mint.\n  /// @param _to The user to transfer the balance to.  May be zero in the event of a burn.\n  /// @param _amount The balance that is being transferred.\n  function _transferTwab(\n    address _from,\n    address _to,\n    uint256 _amount\n  ) internal {\n    // If we are transferring tokens from a delegated account to an undelegated account\n    if (_from != address(0)) {\n      _decreaseUserTwab(_from, _amount);\n\n      if (_to == address(0)) {\n        _decreaseTotalSupplyTwab(_amount);\n      }\n    }\n\n    // If we are transferring tokens from an undelegated account to a delegated account\n    if (_to != address(0)) {\n      _increaseUserTwab(_to, _amount);\n\n      if (_from == address(0)) {\n        _increaseTotalSupplyTwab(_amount);\n      }\n    }\n  }\n\n  /**\n   * @notice Increase `_to` TWAB balance.\n   * @param _to Address of the delegate.\n   * @param _amount Amount of tokens to be added to `_to` TWAB balance.\n   */\n  function _increaseUserTwab(address _to, uint256 _amount) internal {\n    if (_amount == 0) {\n      return;\n    }\n\n    TwabLib.Account storage _account = userTwabs[_to];\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    ) = TwabLib.increaseBalance(_account, _amount.toUint208(), uint32(block.timestamp));\n\n    _account.details = accountDetails;\n\n    if (isNew) {\n      emit NewUserTwab(_to, twab);\n    }\n  }\n\n  /**\n   * @notice Decrease `_to` TWAB balance.\n   * @param _to Address of the delegate.\n   * @param _amount Amount of tokens to be added to `_to` TWAB balance.\n   */\n  function _decreaseUserTwab(address _to, uint256 _amount) internal {\n    if (_amount == 0) {\n      return;\n    }\n\n    TwabLib.Account storage _account = userTwabs[_to];\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    ) = TwabLib.decreaseBalance(\n        _account,\n        _amount.toUint208(),\n        \"Ticket/twab-burn-lt-balance\",\n        uint32(block.timestamp)\n      );\n\n    _account.details = accountDetails;\n\n    if (isNew) {\n      emit NewUserTwab(_to, twab);\n    }\n  }\n\n  /// @notice Decreases the total supply twab.  Should be called anytime a balance moves from delegated to undelegated\n  /// @param _amount The amount to decrease the total by\n  function _decreaseTotalSupplyTwab(uint256 _amount) internal {\n    if (_amount == 0) {\n      return;\n    }\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory tsTwab,\n      bool tsIsNew\n    ) = TwabLib.decreaseBalance(\n        totalSupplyTwab,\n        _amount.toUint208(),\n        \"Ticket/burn-amount-exceeds-total-supply-twab\",\n        uint32(block.timestamp)\n      );\n\n    totalSupplyTwab.details = accountDetails;\n\n    if (tsIsNew) {\n      emit NewTotalSupplyTwab(tsTwab);\n    }\n  }\n\n  /// @notice Increases the total supply twab.  Should be called anytime a balance moves from undelegated to delegated\n  /// @param _amount The amount to increase the total by\n  function _increaseTotalSupplyTwab(uint256 _amount) internal {\n    if (_amount == 0) {\n      return;\n    }\n\n    (\n      TwabLib.AccountDetails memory accountDetails,\n      ObservationLib.Observation memory _totalSupply,\n      bool tsIsNew\n    ) = TwabLib.increaseBalance(totalSupplyTwab, _amount.toUint208(), uint32(block.timestamp));\n\n    totalSupplyTwab.details = accountDetails;\n\n    if (tsIsNew) {\n      emit NewTotalSupplyTwab(_totalSupply);\n    }\n  }\n\n  // @inheritdoc ERC20\n  function _beforeTokenTransfer(\n    address _from,\n    address _to,\n    uint256 _amount\n  ) internal override {\n    if (_from == _to) {\n      return;\n    }\n\n    address _fromDelegate;\n    if (_from != address(0)) {\n      _fromDelegate = delegates[_from];\n    }\n\n    address _toDelegate;\n    if (_to != address(0)) {\n      _toDelegate = delegates[_to];\n    }\n\n    _transferTwab(_fromDelegate, _toDelegate, _amount);\n  }\n}\n"
    },
    "@erc721k/core-sol/contracts/ERC721Storage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IERC721KImage } from \"./interfaces/IERC721KImage.sol\";\nimport { IERC721KTraits } from \"./interfaces/IERC721KTraits.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @title ERC721Storage\n * @author Kames Geraghty\n */\nabstract contract ERC721Storage is Ownable {\n  address internal _svgRender;\n  address internal _traitsFetch;\n  ContractURI internal _contractURI;\n\n  struct ContractURI {\n    string name;\n    string description;\n    string image;\n    string externalLink;\n    string sellerFeeBasisPoints;\n    string feeRecipient;\n  }\n\n  event SvgRenderUpdated(address svgRender);\n\n  event TraitsFetchUpdated(address traitsFetch);\n\n  event ContractURIUpdated(ContractURI contractURI);\n\n  constructor(\n    address _svgRender_,\n    address _traitsFetch_,\n    ContractURI memory _contractURI_\n  ) {\n    _svgRender = _svgRender_;\n    _traitsFetch = _traitsFetch_;\n    _contractURI = _contractURI_;\n  }\n\n  /* ===================================================================================== */\n  /* Virtual Functions                                                                     */\n  /* ===================================================================================== */\n\n  function _parseName(uint256 _tokenId) internal view virtual returns (string memory);\n\n  function _parseDescription(uint256 _tokenId) internal view virtual returns (string memory);\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n  function getSvgRender() external view returns (address) {\n    return _svgRender;\n  }\n\n  function getTraitsFetch() external view returns (address) {\n    return _traitsFetch;\n  }\n\n  function getContractDescription() external view returns (ContractURI memory) {\n    return _contractURI;\n  }\n\n  function render(bytes memory input) external view returns (string memory) {\n    return IERC721KImage(_svgRender).render(input);\n  }\n\n  function constructTokenURI(\n    uint256 tokenId,\n    bytes memory input0,\n    bytes memory input1\n  ) external view virtual returns (string memory uri) {\n    string memory image_ = IERC721KImage(_svgRender).render(input0);\n    string memory traits_ = IERC721KTraits(_traitsFetch).fetch(input1);\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                _parseName(tokenId),\n                '\",',\n                '\"description\":',\n                '\"',\n                _parseDescription(tokenId),\n                '\",',\n                '\"image\":',\n                '\"',\n                image_,\n                '\",',\n                '\"attributes\": [',\n                traits_,\n                \"]\",\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function constructContractURI() external view virtual returns (string memory uri) {\n    return\n      string(\n        abi.encodePacked(\n          \"data:application/json;base64,\",\n          Base64.encode(\n            bytes(\n              string.concat(\n                '{\"name\":',\n                '\"',\n                _contractURI.name,\n                '\",',\n                '\"description\":',\n                '\"',\n                _contractURI.description,\n                '\",',\n                '\"image\":',\n                '\"',\n                _contractURI.image,\n                '\",',\n                '\"externalLink\":',\n                '\"',\n                _contractURI.externalLink,\n                '\",',\n                '\"sellerFeeBasisPoints\":',\n                '\"',\n                _contractURI.sellerFeeBasisPoints,\n                '\",',\n                '\"feeRecipient\":',\n                '\"',\n                _contractURI.feeRecipient,\n                '\"',\n                \"}\"\n              )\n            )\n          )\n        )\n      );\n  }\n\n  function setSvgRender(address svgRender) external onlyOwner {\n    _svgRender = svgRender;\n    emit SvgRenderUpdated(svgRender);\n  }\n\n  function setTraitsFetch(address traitsFetch) external onlyOwner {\n    _traitsFetch = traitsFetch;\n    emit TraitsFetchUpdated(traitsFetch);\n  }\n\n  function setContractURI(ContractURI memory contractURI) external onlyOwner {\n    _contractURI = contractURI;\n    emit ContractURIUpdated(contractURI);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/twab/ObservationLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"./OverflowSafeComparatorLib.sol\";\nimport \"./RingBufferLib.sol\";\n\n/**\n * @title Observation Library\n * @notice This library allows one to store an array of timestamped values and efficiently binary search them.\n * @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\n * @author PoolTogether Inc.\n */\nlibrary ObservationLib {\n  using OverflowSafeComparatorLib for uint32;\n  using SafeCast for uint256;\n\n  /// @notice The maximum number of observations\n  uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n  /**\n   * @notice Observation, which includes an amount and timestamp.\n   * @param amount `amount` at `timestamp`.\n   * @param timestamp Recorded `timestamp`.\n   */\n  struct Observation {\n    uint224 amount;\n    uint32 timestamp;\n  }\n\n  /**\n   * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\n   * The result may be the same Observation, or adjacent Observations.\n   * @dev The answer must be contained in the array used when the target is located within the stored Observation.\n   * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\n   * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\n   *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\n   * @param _observations List of Observations to search through.\n   * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\n   * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\n   * @param _target Timestamp at which we are searching the Observation.\n   * @param _cardinality Cardinality of the circular buffer we are searching through.\n   * @param _time Timestamp at which we perform the binary search.\n   * @return beforeOrAt Observation recorded before, or at, the target.\n   * @return atOrAfter Observation recorded at, or after, the target.\n   */\n  function binarySearch(\n    Observation[MAX_CARDINALITY] storage _observations,\n    uint24 _newestObservationIndex,\n    uint24 _oldestObservationIndex,\n    uint32 _target,\n    uint24 _cardinality,\n    uint32 _time\n  ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n    uint256 leftSide = _oldestObservationIndex;\n    uint256 rightSide = _newestObservationIndex < leftSide\n      ? leftSide + _cardinality - 1\n      : _newestObservationIndex;\n    uint256 currentIndex;\n\n    while (true) {\n      // We start our search in the middle of the `leftSide` and `rightSide`.\n      // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\n      currentIndex = (leftSide + rightSide) / 2;\n\n      beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\n      uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\n\n      // We've landed on an uninitialized timestamp, keep searching higher (more recently).\n      if (beforeOrAtTimestamp == 0) {\n        leftSide = currentIndex + 1;\n        continue;\n      }\n\n      atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\n\n      bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\n\n      // Check if we've found the corresponding Observation.\n      if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\n        break;\n      }\n\n      // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\n      if (!targetAtOrAfter) {\n        rightSide = currentIndex - 1;\n      } else {\n        // Otherwise, we keep searching higher. To the left of the current index.\n        leftSide = currentIndex + 1;\n      }\n    }\n  }\n}\n"
    },
    "contracts/twab/TwabLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nimport \"./ExtendedSafeCastLib.sol\";\nimport \"./OverflowSafeComparatorLib.sol\";\nimport \"./RingBufferLib.sol\";\nimport \"./ObservationLib.sol\";\n\n/**\n  * @title  PoolTogether V4 TwabLib (Library)\n  * @author PoolTogether Inc Team\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\n            Each user is mapped to an Account struct containing the TWAB history (ring buffer) and\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes of 1block/15sec)\n            guarantees minimum 7.4 years of search history.\n */\nlibrary TwabLib {\n  using OverflowSafeComparatorLib for uint32;\n  using ExtendedSafeCastLib for uint256;\n\n  /**\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\n                As users transfer/mint/burn tickets new Observation checkpoints are\n                recorded. The current max cardinality guarantees a seven year minimum,\n                of accurate historical lookups with current estimates of 1 new block\n                every 15 seconds - assuming each block contains a transfer to trigger an\n                observation write to storage.e\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\n                the max cardinality variable. Preventing \"corrupted\" ring buffer lookup\n                pointers and new observation checkpoints.\n\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\n                If 14 = block time in seconds\n                (2**24) * 14 = 234881024 seconds of history\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\n    */\n  uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\n\n  /** @notice Struct ring buffer parameters for single user Account\n      * @param balance       Current balance for an Account\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\n      * @param cardinality   Current total \"initialized\" ring buffer checkpoints for single user AccountDetails.\n                             Used to set initial boundary conditions for an efficient binary search.\n    */\n  struct AccountDetails {\n    uint208 balance;\n    uint24 nextTwabIndex;\n    uint24 cardinality;\n  }\n\n  /// @notice Combines account details with their twab history\n  /// @param details The account details\n  /// @param twabs The history of twabs for this account\n  struct Account {\n    AccountDetails details;\n    ObservationLib.Observation[MAX_CARDINALITY] twabs;\n  }\n\n  /// @notice Increases an account's balance and records a new twab.\n  /// @param _account The account whose balance will be increased\n  /// @param _amount The amount to increase the balance by\n  /// @param _currentTime The current time\n  /// @return accountDetails The new AccountDetails\n  /// @return twab The user's latest TWAB\n  /// @return isNew Whether the TWAB is new\n  function increaseBalance(\n    Account storage _account,\n    uint208 _amount,\n    uint32 _currentTime\n  )\n    internal\n    returns (\n      AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    )\n  {\n    AccountDetails memory _accountDetails = _account.details;\n    (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\n    accountDetails.balance = _accountDetails.balance + _amount;\n  }\n\n  /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\n   * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\n   * @param _account        Account whose balance will be decreased\n   * @param _amount         Amount to decrease the balance by\n   * @param _revertMessage  Revert message for insufficient balance\n   * @return accountDetails Updated Account.details struct\n   * @return twab           TWAB observation (with decreasing average)\n   * @return isNew          Whether TWAB is new or calling twice in the same block\n   */\n  function decreaseBalance(\n    Account storage _account,\n    uint208 _amount,\n    string memory _revertMessage,\n    uint32 _currentTime\n  )\n    internal\n    returns (\n      AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    )\n  {\n    AccountDetails memory _accountDetails = _account.details;\n\n    require(_accountDetails.balance >= _amount, _revertMessage);\n\n    (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\n    unchecked {\n      accountDetails.balance -= _amount;\n    }\n  }\n\n  /** @notice Calculates the average balance held by a user for a given time frame.\n      * @dev    Finds the average balance between start and end timestamp epochs.\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails User AccountDetails struct loaded in memory\n      * @param _startTime      Start of timestamp range as an epoch\n      * @param _endTime        End of timestamp range as an epoch\n      * @param _currentTime    Block.timestamp\n      * @return Average balance of user held between epoch timestamps start and end\n    */\n  function getAverageBalanceBetween(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _startTime,\n    uint32 _endTime,\n    uint32 _currentTime\n  ) internal view returns (uint256) {\n    uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\n\n    return _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\n  }\n\n  /// @notice Retrieves the oldest TWAB\n  /// @param _twabs The storage array of twabs\n  /// @param _accountDetails The TWAB account details\n  /// @return index The index of the oldest TWAB in the twabs array\n  /// @return twab The oldest TWAB\n  function oldestTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails\n  ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\n    index = _accountDetails.nextTwabIndex;\n    twab = _twabs[index];\n\n    // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\n    if (twab.timestamp == 0) {\n      index = 0;\n      twab = _twabs[0];\n    }\n  }\n\n  /// @notice Retrieves the newest TWAB\n  /// @param _twabs The storage array of twabs\n  /// @param _accountDetails The TWAB account details\n  /// @return index The index of the newest TWAB in the twabs array\n  /// @return twab The newest TWAB\n  function newestTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails\n  ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\n    index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\n    twab = _twabs[index];\n  }\n\n  /// @notice Retrieves amount at `_targetTime` timestamp\n  /// @param _twabs List of TWABs to search through.\n  /// @param _accountDetails Accounts details\n  /// @param _targetTime Timestamp at which the reserved TWAB should be for.\n  /// @return uint256 TWAB amount at `_targetTime`.\n  function getBalanceAt(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _targetTime,\n    uint32 _currentTime\n  ) internal view returns (uint256) {\n    uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\n    return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\n  }\n\n  /// @notice Calculates the average balance held by a user for a given time frame.\n  /// @param _startTime The start time of the time frame.\n  /// @param _endTime The end time of the time frame.\n  /// @return The average balance that the user held during the time frame.\n  function _getAverageBalanceBetween(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _startTime,\n    uint32 _endTime,\n    uint32 _currentTime\n  ) private view returns (uint256) {\n    (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(\n      _twabs,\n      _accountDetails\n    );\n\n    (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(\n      _twabs,\n      _accountDetails\n    );\n\n    ObservationLib.Observation memory startTwab = _calculateTwab(\n      _twabs,\n      _accountDetails,\n      newTwab,\n      oldTwab,\n      newestTwabIndex,\n      oldestTwabIndex,\n      _startTime,\n      _currentTime\n    );\n\n    ObservationLib.Observation memory endTwab = _calculateTwab(\n      _twabs,\n      _accountDetails,\n      newTwab,\n      oldTwab,\n      newestTwabIndex,\n      oldestTwabIndex,\n      _endTime,\n      _currentTime\n    );\n\n    // Difference in amount / time\n    return\n      (endTwab.amount - startTwab.amount) /\n      OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\n  }\n\n  /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\n                between the Observations closes to the supplied targetTime.\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails User AccountDetails struct loaded in memory\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\n      * @param _currentTime    Block.timestamp\n      * @return uint256 Time-weighted average amount between two closest observations.\n    */\n  function _getBalanceAt(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _targetTime,\n    uint32 _currentTime\n  ) private view returns (uint256) {\n    uint24 newestTwabIndex;\n    ObservationLib.Observation memory afterOrAt;\n    ObservationLib.Observation memory beforeOrAt;\n    (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\n\n    // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\n    if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\n      return _accountDetails.balance;\n    }\n\n    uint24 oldestTwabIndex;\n    // Now, set before to the oldest TWAB\n    (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\n\n    // If `_targetTime` is chronologically before the oldest TWAB, we can early return\n    if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\n      return 0;\n    }\n\n    // Otherwise, we perform the `binarySearch`\n    (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\n      _twabs,\n      newestTwabIndex,\n      oldestTwabIndex,\n      _targetTime,\n      _accountDetails.cardinality,\n      _currentTime\n    );\n\n    // Sum the difference in amounts and divide by the difference in timestamps.\n    // The time-weighted average balance uses time measured between two epoch timestamps as\n    // a constaint on the measurement when calculating the time weighted average balance.\n    return\n      (afterOrAt.amount - beforeOrAt.amount) /\n      OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\n  }\n\n  /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\n                The balance is linearly interpolated: amount differences / timestamp differences\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\n                IF a search is before or after the range we \"extrapolate\" a Observation from the expected state.\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\n      * @param _accountDetails  User AccountDetails struct loaded in memory\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\n      * @param _time            Block.timestamp\n      * @return accountDetails Updated Account.details struct\n    */\n  function _calculateTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    ObservationLib.Observation memory _newestTwab,\n    ObservationLib.Observation memory _oldestTwab,\n    uint24 _newestTwabIndex,\n    uint24 _oldestTwabIndex,\n    uint32 _targetTimestamp,\n    uint32 _time\n  ) private view returns (ObservationLib.Observation memory) {\n    // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\n    if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\n      return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\n    }\n\n    if (_newestTwab.timestamp == _targetTimestamp) {\n      return _newestTwab;\n    }\n\n    if (_oldestTwab.timestamp == _targetTimestamp) {\n      return _oldestTwab;\n    }\n\n    // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\n    if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\n      return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\n    }\n\n    // Otherwise, both timestamps must be surrounded by twabs.\n    (\n      ObservationLib.Observation memory beforeOrAtStart,\n      ObservationLib.Observation memory afterOrAtStart\n    ) = ObservationLib.binarySearch(\n        _twabs,\n        _newestTwabIndex,\n        _oldestTwabIndex,\n        _targetTimestamp,\n        _accountDetails.cardinality,\n        _time\n      );\n\n    uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\n      OverflowSafeComparatorLib.checkedSub(\n        afterOrAtStart.timestamp,\n        beforeOrAtStart.timestamp,\n        _time\n      );\n\n    return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\n  }\n\n  /**\n   * @notice Calculates the next TWAB using the newestTwab and updated balance.\n   * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\n   * @param _currentTwab    Newest Observation in the Account.twabs list\n   * @param _currentBalance User balance at time of most recent (newest) checkpoint write\n   * @param _time           Current block.timestamp\n   * @return TWAB Observation\n   */\n  function _computeNextTwab(\n    ObservationLib.Observation memory _currentTwab,\n    uint224 _currentBalance,\n    uint32 _time\n  ) private pure returns (ObservationLib.Observation memory) {\n    // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\n    return\n      ObservationLib.Observation({\n        amount: _currentTwab.amount +\n          _currentBalance *\n          (_time.checkedSub(_currentTwab.timestamp, _time)),\n        timestamp: _time\n      });\n  }\n\n  /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\n  /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\n  /// @param _twabs The twabs array to insert into\n  /// @param _accountDetails The current account details\n  /// @param _currentTime The current time\n  /// @return accountDetails The new account details\n  /// @return twab The newest twab (may or may not be brand-new)\n  /// @return isNew Whether the newest twab was created by this call\n  function _nextTwab(\n    ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\n    AccountDetails memory _accountDetails,\n    uint32 _currentTime\n  )\n    private\n    returns (\n      AccountDetails memory accountDetails,\n      ObservationLib.Observation memory twab,\n      bool isNew\n    )\n  {\n    (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\n\n    // if we're in the same block, return\n    if (_newestTwab.timestamp == _currentTime) {\n      return (_accountDetails, _newestTwab, false);\n    }\n\n    ObservationLib.Observation memory newTwab = _computeNextTwab(\n      _newestTwab,\n      _accountDetails.balance,\n      _currentTime\n    );\n\n    _twabs[_accountDetails.nextTwabIndex] = newTwab;\n\n    AccountDetails memory nextAccountDetails = push(_accountDetails);\n\n    return (nextAccountDetails, newTwab, true);\n  }\n\n  /// @notice \"Pushes\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\n  /// @param _accountDetails The account details from which to pull the cardinality and next index\n  /// @return The new AccountDetails\n  function push(AccountDetails memory _accountDetails)\n    internal\n    pure\n    returns (AccountDetails memory)\n  {\n    _accountDetails.nextTwabIndex = uint24(\n      RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY)\n    );\n\n    // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\n    // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\n    // exceeds the max cardinality, new observations would be incorrectly set or the\n    // observation would be out of \"bounds\" of the ring buffer. Once reached the\n    // AccountDetails.cardinality will continue to be equal to max cardinality.\n    if (_accountDetails.cardinality < MAX_CARDINALITY) {\n      _accountDetails.cardinality += 1;\n    }\n\n    return _accountDetails;\n  }\n}\n"
    },
    "contracts/twab/ExtendedSafeCastLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary ExtendedSafeCastLib {\n  /**\n   * @dev Returns the downcasted uint104 from uint256, reverting on\n   * overflow (when the input is greater than largest uint104).\n   *\n   * Counterpart to Solidity's `uint104` operator.\n   *\n   * Requirements:\n   *\n   * - input must fit into 104 bits\n   */\n  function toUint104(uint256 _value) internal pure returns (uint104) {\n    require(_value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n    return uint104(_value);\n  }\n\n  /**\n   * @dev Returns the downcasted uint208 from uint256, reverting on\n   * overflow (when the input is greater than largest uint208).\n   *\n   * Counterpart to Solidity's `uint208` operator.\n   *\n   * Requirements:\n   *\n   * - input must fit into 208 bits\n   */\n  function toUint208(uint256 _value) internal pure returns (uint208) {\n    require(_value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n    return uint208(_value);\n  }\n\n  /**\n   * @dev Returns the downcasted uint224 from uint256, reverting on\n   * overflow (when the input is greater than largest uint224).\n   *\n   * Counterpart to Solidity's `uint224` operator.\n   *\n   * Requirements:\n   *\n   * - input must fit into 224 bits\n   */\n  function toUint224(uint256 _value) internal pure returns (uint224) {\n    require(_value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n    return uint224(_value);\n  }\n\n  /**\n   * @dev Returns the downcasted uint192 from uint256, reverting on\n   * overflow (when the input is greater than largest uint192).\n   *\n   * Counterpart to Solidity's `uint192` operator.\n   *\n   * Requirements:\n   *\n   * - input must fit into 224 bits\n   */\n  function toUint192(uint256 value) internal pure returns (uint192) {\n    require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n    return uint192(value);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248) {\n        require(value >= type(int248).min && value <= type(int248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return int248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240) {\n        require(value >= type(int240).min && value <= type(int240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return int240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232) {\n        require(value >= type(int232).min && value <= type(int232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return int232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224) {\n        require(value >= type(int224).min && value <= type(int224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return int224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216) {\n        require(value >= type(int216).min && value <= type(int216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return int216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208) {\n        require(value >= type(int208).min && value <= type(int208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return int208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200) {\n        require(value >= type(int200).min && value <= type(int200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return int200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192) {\n        require(value >= type(int192).min && value <= type(int192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return int192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184) {\n        require(value >= type(int184).min && value <= type(int184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return int184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176) {\n        require(value >= type(int176).min && value <= type(int176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return int176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168) {\n        require(value >= type(int168).min && value <= type(int168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return int168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160) {\n        require(value >= type(int160).min && value <= type(int160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return int160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152) {\n        require(value >= type(int152).min && value <= type(int152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return int152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144) {\n        require(value >= type(int144).min && value <= type(int144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return int144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136) {\n        require(value >= type(int136).min && value <= type(int136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return int136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120) {\n        require(value >= type(int120).min && value <= type(int120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return int120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112) {\n        require(value >= type(int112).min && value <= type(int112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return int112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104) {\n        require(value >= type(int104).min && value <= type(int104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return int104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96) {\n        require(value >= type(int96).min && value <= type(int96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return int96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88) {\n        require(value >= type(int88).min && value <= type(int88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return int88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80) {\n        require(value >= type(int80).min && value <= type(int80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return int80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72) {\n        require(value >= type(int72).min && value <= type(int72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return int72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56) {\n        require(value >= type(int56).min && value <= type(int56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return int56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48) {\n        require(value >= type(int48).min && value <= type(int48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return int48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40) {\n        require(value >= type(int40).min && value <= type(int40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return int40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24) {\n        require(value >= type(int24).min && value <= type(int24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return int24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/twab/OverflowSafeComparatorLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\n/// @author PoolTogether Inc.\nlibrary OverflowSafeComparatorLib {\n  /// @notice 32-bit timestamps comparator.\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n  /// @param _b Timestamp to compare against `_a`.\n  /// @param _timestamp A timestamp truncated to 32 bits.\n  /// @return bool Whether `_a` is chronologically < `_b`.\n  function lt(\n    uint32 _a,\n    uint32 _b,\n    uint32 _timestamp\n  ) internal pure returns (bool) {\n    // No need to adjust if there hasn't been an overflow\n    if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\n\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n    return aAdjusted < bAdjusted;\n  }\n\n  /// @notice 32-bit timestamps comparator.\n  /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\n  /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\n  /// @param _b Timestamp to compare against `_a`.\n  /// @param _timestamp A timestamp truncated to 32 bits.\n  /// @return bool Whether `_a` is chronologically <= `_b`.\n  function lte(\n    uint32 _a,\n    uint32 _b,\n    uint32 _timestamp\n  ) internal pure returns (bool) {\n    // No need to adjust if there hasn't been an overflow\n    if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\n\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n    return aAdjusted <= bAdjusted;\n  }\n\n  /// @notice 32-bit timestamp subtractor\n  /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\n  /// @param _a The subtraction left operand\n  /// @param _b The subtraction right operand\n  /// @param _timestamp The current time.  Expected to be chronologically after both.\n  /// @return The difference between a and b, adjusted for overflow\n  function checkedSub(\n    uint32 _a,\n    uint32 _b,\n    uint32 _timestamp\n  ) internal pure returns (uint32) {\n    // No need to adjust if there hasn't been an overflow\n\n    if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\n\n    uint256 aAdjusted = _a > _timestamp ? _a : _a + 2**32;\n    uint256 bAdjusted = _b > _timestamp ? _b : _b + 2**32;\n\n    return uint32(aAdjusted - bAdjusted);\n  }\n}\n"
    },
    "contracts/twab/RingBufferLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nlibrary RingBufferLib {\n  /**\n   * @notice Returns wrapped TWAB index.\n   * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\n   * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\n   *       it will return 0 and will point to the first element of the array.\n   * @param _index Index used to navigate through the TWAB circular buffer.\n   * @param _cardinality TWAB buffer cardinality.\n   * @return TWAB index.\n   */\n  function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\n    return _index % _cardinality;\n  }\n\n  /**\n   * @notice Computes the negative offset from the given index, wrapped by the cardinality.\n   * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\n   * @param _index The index from which to offset\n   * @param _amount The number of indices to offset.  This is subtracted from the given index.\n   * @param _cardinality The number of elements in the ring buffer\n   * @return Offsetted index.\n   */\n  function offset(\n    uint256 _index,\n    uint256 _amount,\n    uint256 _cardinality\n  ) internal pure returns (uint256) {\n    return wrap(_index + _cardinality - _amount, _cardinality);\n  }\n\n  /// @notice Returns the index of the last recorded TWAB\n  /// @param _nextIndex The next available twab index.  This will be recorded to next.\n  /// @param _cardinality The cardinality of the TWAB history.\n  /// @return The index of the last recorded TWAB\n  function newestIndex(uint256 _nextIndex, uint256 _cardinality) internal pure returns (uint256) {\n    if (_cardinality == 0) {\n      return 0;\n    }\n\n    return wrap(_nextIndex + _cardinality - 1, _cardinality);\n  }\n\n  /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\n  /// @param _index The index to increment\n  /// @param _cardinality The number of elements in the Ring Buffer\n  /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\n  function nextIndex(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\n    return wrap(_index + 1, _cardinality);\n  }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@erc721k/core-sol/contracts/interfaces/IERC721KImage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IERC721KImage {\n  function render(bytes memory input) external view returns (string memory);\n}\n"
    },
    "@erc721k/core-sol/contracts/interfaces/IERC721KTraits.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IERC721KTraits {\n  function fetch(bytes memory input) external view returns (string memory);\n}\n"
    },
    "@erc721k/core-sol/contracts/ERC721K.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { ERC721 } from \"@turbo-eth/solbase-sol/src/tokens/ERC721/ERC721.sol\";\nimport { OwnedThreeStep } from \"@turbo-eth/solbase-sol/src/auth/OwnedThreeStep.sol\";\nimport { ERC721Storage } from \"./ERC721Storage.sol\";\n\n/**\n * @title ERC721K\n * @author Kames Geraghty\n */\nabstract contract ERC721K is ERC721, OwnedThreeStep {\n  /// @notice ID counter for ERC721 tokens\n  uint256 internal _idCounter;\n\n  /// @notice ENSReverseRecords instance\n  address internal _erc721Storage;\n\n  event ERC721StorageUpdated(address erc721Storage);\n\n  /**\n   * @notice ERC721K Construction\n   * @param name_ string - Name of ERC721 token\n   * @param symbol_ string - Symbol of ERC721 token\n   * @param _erc721Storage_ address - Metadata instance\n   */\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    address _erc721Storage_\n  ) ERC721(name_, symbol_) OwnedThreeStep(msg.sender) {\n    _erc721Storage = _erc721Storage_;\n  }\n\n  /* ===================================================================================== */\n  /* EIP Functions                                                                     */\n  /* ===================================================================================== */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC721)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  /* ===================================================================================== */\n  /* Virtual Functions                                                                     */\n  /* ===================================================================================== */\n  function _tokenData(uint256 tokenId)\n    internal\n    view\n    virtual\n    returns (bytes memory imageBytes, bytes memory traitsBytes);\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function contractURI() external view returns (string memory) {\n    return ERC721Storage(_erc721Storage).constructContractURI();\n  }\n\n  function totalSupply() external view returns (uint256) {\n    return _idCounter;\n  }\n\n  function getERC721Storage() external view returns (address) {\n    return _erc721Storage;\n  }\n\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\n    (bytes memory imageBytes, bytes memory traitsBytes) = _tokenData(tokenId);\n    return ERC721Storage(_erc721Storage).constructTokenURI(tokenId, imageBytes, traitsBytes);\n  }\n\n  /* ====================================== */\n  /* Writes\n  /* ====================================== */\n\n  function setStorage(address erc721Storage) external onlyOwner {\n    _erc721Storage = erc721Storage;\n    emit ERC721StorageUpdated(erc721Storage);\n  }\n}\n"
    },
    "@turbo-eth/solbase-sol/src/tokens/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Modern, minimalist, and gas-optimized ERC721 implementation.\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /// -----------------------------------------------------------------------\n    /// Events\n    /// -----------------------------------------------------------------------\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /// -----------------------------------------------------------------------\n    /// Custom Errors\n    /// -----------------------------------------------------------------------\n\n    error NotMinted();\n\n    error ZeroAddress();\n\n    error ERC721Unauthorized();\n\n    error WrongFrom();\n\n    error InvalidRecipient();\n\n    error UnsafeRecipient();\n\n    error AlreadyMinted();\n\n    /// -----------------------------------------------------------------------\n    /// Metadata Storage/Logic\n    /// -----------------------------------------------------------------------\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /// -----------------------------------------------------------------------\n    /// ERC721 Balance/Owner Storage\n    /// -----------------------------------------------------------------------\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        if ((owner = _ownerOf[id]) == address(0)) revert NotMinted();\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) revert ZeroAddress();\n        return _balanceOf[owner];\n    }\n\n    /// -----------------------------------------------------------------------\n    /// ERC721 Approval Storage\n    /// -----------------------------------------------------------------------\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /// -----------------------------------------------------------------------\n    /// Constructor\n    /// -----------------------------------------------------------------------\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /// -----------------------------------------------------------------------\n    /// ERC721 Logic\n    /// -----------------------------------------------------------------------\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _ownerOf[id];\n\n        if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) revert ERC721Unauthorized();\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        if (from != _ownerOf[id]) revert WrongFrom();\n\n        if (to == address(0)) revert InvalidRecipient();\n\n        if (msg.sender != from && !isApprovedForAll[from][msg.sender] && msg.sender != getApproved[id])\n            revert ERC721Unauthorized();\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        if (to.code.length != 0) {\n            if (\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") !=\n                ERC721TokenReceiver.onERC721Received.selector\n            ) revert UnsafeRecipient();\n        }\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        if (to.code.length != 0) {\n            if (\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) !=\n                ERC721TokenReceiver.onERC721Received.selector\n            ) revert UnsafeRecipient();\n        }\n    }\n\n    /// -----------------------------------------------------------------------\n    /// ERC165 Logic\n    /// -----------------------------------------------------------------------\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Internal Mint/Burn Logic\n    /// -----------------------------------------------------------------------\n\n    function _mint(address to, uint256 id) internal virtual {\n        if (to == address(0)) revert InvalidRecipient();\n\n        if (_ownerOf[id] != address(0)) revert AlreadyMinted();\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        if (owner == address(0)) revert NotMinted();\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _ownerOf[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Internal Safe Mint Logic\n    /// -----------------------------------------------------------------------\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        if (to.code.length != 0) {\n            if (\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") !=\n                ERC721TokenReceiver.onERC721Received.selector\n            ) revert UnsafeRecipient();\n        }\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        if (to.code.length != 0) {\n            if (\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) !=\n                ERC721TokenReceiver.onERC721Received.selector\n            ) revert UnsafeRecipient();\n        }\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/tokens/ERC721.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"
    },
    "@turbo-eth/solbase-sol/src/auth/OwnedThreeStep.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Three-step single owner authorization mixin.\n/// @author SolBase (https://github.com/Sol-DAO/solbase/blob/main/src/auth/OwnedThreeStep.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract OwnedThreeStep {\n    /// -----------------------------------------------------------------------\n    /// Events\n    /// -----------------------------------------------------------------------\n\n    event OwnerUpdateInitiated(address indexed user, address indexed ownerCandidate);\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /// -----------------------------------------------------------------------\n    /// Custom Errors\n    /// -----------------------------------------------------------------------\n\n    error Unauthorized();\n\n    /// -----------------------------------------------------------------------\n    /// Ownership Storage\n    /// -----------------------------------------------------------------------\n\n    address public owner;\n\n    address internal _ownerCandidate;\n\n    bool internal _ownerCandidateConfirmed;\n\n    modifier onlyOwner() virtual {\n        if (msg.sender != owner) revert Unauthorized();\n\n        _;\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Constructor\n    /// -----------------------------------------------------------------------\n\n    /// @notice Create contract and set `owner`.\n    /// @param _owner The `owner` of contract.\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Ownership Logic\n    /// -----------------------------------------------------------------------\n\n    /// @notice Initiate ownership transfer.\n    /// @param newOwner The `_ownerCandidate` that will `confirmOwner()`.\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\n        _ownerCandidate = newOwner;\n\n        emit OwnerUpdateInitiated(msg.sender, newOwner);\n    }\n\n    /// @notice Confirm ownership between `owner` and `_ownerCandidate`.\n    function confirmOwner() public payable virtual {\n        if (_ownerCandidateConfirmed) {\n            if (msg.sender != owner) revert Unauthorized();\n\n            delete _ownerCandidateConfirmed;\n\n            address newOwner = _ownerCandidate;\n\n            owner = newOwner;\n\n            emit OwnershipTransferred(msg.sender, newOwner);\n        } else {\n            if (msg.sender != _ownerCandidate) revert Unauthorized();\n\n            _ownerCandidateConfirmed = true;\n        }\n    }\n\n    /// @notice Terminate ownership by `owner`.\n    function renounceOwner() public payable virtual onlyOwner {\n        delete owner;\n\n        emit OwnershipTransferred(msg.sender, address(0));\n    }\n}\n"
    },
    "contracts/Web3Assets.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { svg } from \"@erc721k/periphery-sol/contracts/svg/svg.sol\";\nimport { OwnedThreeStep } from \"@turbo-eth/solbase-sol/src/auth/OwnedThreeStep.sol\";\nimport { svgUtils } from \"@erc721k/periphery-sol/contracts/svg/svgUtils.sol\";\nimport { SVGLibrary } from \"@erc721k/periphery-sol/contracts/svg/SVGLibrary.sol\";\nimport { ISVGModule } from \"@erc721k/periphery-sol/contracts/interfaces/ISVGModule.sol\";\n\ncontract Web3Assets is OwnedThreeStep {\n  string private encoding = \"(uint8, uint8)\";\n  mapping(bytes32 => string) private assets;\n\n  /* ===================================================================================== */\n  /* Constructor & Modifiers                                                               */\n  /* ===================================================================================== */\n\n  constructor(address _owner) OwnedThreeStep(_owner) {}\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function getEncoding() external view returns (string memory) {\n    return encoding;\n  }\n\n  function get(bytes32 position) external view returns (string memory) {\n    return assets[position];\n  }\n\n  function decode(bytes memory input) external view returns (string memory) {\n    bytes32 position = abi.decode(input, (bytes32));\n    return assets[position];\n  }\n\n  function set(bytes32 position, string memory svg) external onlyOwner {\n    assets[position] = svg;\n  }\n}\n"
    },
    "@erc721k/periphery-sol/contracts/svg/svg.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./svgUtils.sol\";\n\n/**\n * @title svg\n * @author Kames Geraghty\n * @notice SVG construction library using web-like API.\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n */\nlibrary svg {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\n    return el(\"g\", _props, _children);\n  }\n\n  function path(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"path\", _props, _children);\n  }\n\n  function text(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"text\", _props, _children);\n  }\n\n  function line(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"line\", _props, _children);\n  }\n\n  function circle(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"circle\", _props, _children);\n  }\n\n  function circle(string memory _props) internal pure returns (string memory) {\n    return el(\"circle\", _props);\n  }\n\n  function rect(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"rect\", _props, _children);\n  }\n\n  function rect(string memory _props) internal pure returns (string memory) {\n    return el(\"rect\", _props);\n  }\n\n  function stop(string memory _props) internal pure returns (string memory) {\n    return el(\"stop\", _props);\n  }\n\n  function filter(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"filter\", _props, _children);\n  }\n\n  function defs(string memory _children) internal pure returns (string memory) {\n    return el(\"defs\", \"\", _children);\n  }\n\n  function cdata(string memory _content) internal pure returns (string memory) {\n    return string.concat(\"<![CDATA[\", _content, \"]]>\");\n  }\n\n  /* GRADIENTS */\n  function radialGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"radialGradient\", _props, _children);\n  }\n\n  function linearGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"linearGradient\", _props, _children);\n  }\n\n  function gradientStop(\n    uint256 offset,\n    string memory stopColor,\n    string memory _props\n  ) internal pure returns (string memory) {\n    return\n      el(\n        \"stop\",\n        string.concat(\n          prop(\"stop-color\", stopColor),\n          \" \",\n          prop(\"offset\", string.concat(svgUtils.uint2str(offset), \"%\")),\n          \" \",\n          _props\n        )\n      );\n  }\n\n  function animateTransform(string memory _props) internal pure returns (string memory) {\n    return el(\"animateTransform\", _props);\n  }\n\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\n    return el(\"image\", string.concat(prop(\"href\", _href), \" \", _props));\n  }\n\n  function start() internal pure returns (string memory) {\n    return\n      string.concat(\n        '<svg width=\"320\" height=\"320\" style=\"background:#FFF\" ',\n        'viewBox=\"0 0 320 320\" ',\n        'xmlns=\"http://www.w3.org/2000/svg\" ',\n        \">\"\n      );\n  }\n\n  function end() internal pure returns (bytes memory) {\n    return (\"</svg>\");\n  }\n\n  /* COMMON */\n  // A generic element, can be used to construct any SVG (or HTML) element\n  function el(\n    string memory _tag,\n    string memory _props,\n    string memory _children\n  ) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \">\", _children, \"</\", _tag, \">\");\n  }\n\n  // A generic element, can be used to construct any SVG (or HTML) element without children\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \"/>\");\n  }\n\n  // an SVG attribute\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\n    return string.concat(_key, \"=\", '\"', _val, '\" ');\n  }\n\n  function stringifyIntSet(\n    bytes memory _data,\n    uint256 _offset,\n    uint256 _len\n  ) public pure returns (bytes memory) {\n    bytes memory res;\n    require(_data.length >= _offset + _len, \"Out of range\");\n    for (uint256 i = _offset; i < _offset + _len; i++) {\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \" \");\n    }\n    return res;\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n}\n"
    },
    "@erc721k/periphery-sol/contracts/svg/svgUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n/**\n  * @title  SVG Utilities\n  * @author Kames Geraghty\n  * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\n  * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n*/\nlibrary svgUtils {\n    using Strings for uint256;\n    using Strings for uint8;\n    \n    /// @notice Empty SVG element\n    string internal constant NULL = \"\";\n\n    /**\n     * @notice Formats a CSS variable line. Includes a semicolon for formatting.\n     * @param _key User for which to calculate prize amount.\n     * @param _val User for which to calculate prize amount.\n     * @return string Generated CSS variable.\n    */\n    function setCssVar(string memory _key, string memory _val)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"--\", _key, \":\", _val, \";\");\n    }\n\n    /**\n     * @notice Formats getting a css variable\n     * @param _key User for which to calculate prize amount.\n     * @return string Generated CSS variable.\n    */\n    function getCssVar(string memory _key)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"var(--\", _key, \")\");\n    }\n\n    // formats getting a def URL\n    function getDefURL(string memory _id)\n        internal\n        pure\n        returns (string memory)\n    {\n        return string.concat(\"url(#\", _id, \")\");\n    }\n\n    // checks if two strings are equal\n    function stringsEqual(string memory _a, string memory _b)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\n    }\n\n    // returns the length of a string in characters\n    function utfStringLength(string memory _str)\n        internal\n        pure\n        returns (uint256 length)\n    {\n        uint256 i = 0;\n        bytes memory string_rep = bytes(_str);\n\n        while (i < string_rep.length) {\n            if (string_rep[i] >> 7 == 0) i += 1;\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\n                i += 4;\n                //For safety\n            else i += 1;\n\n            length++;\n        }\n    }\n\n    function round2Txt(\n        uint256 _value,\n        uint8 _decimals,\n        uint8 _prec\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(\n            (_value / 10 ** _decimals).toString(), \n            \".\",\n            ( _value / 10 ** (_decimals - _prec) -\n                _value / 10 ** (_decimals ) * 10 ** _prec\n            ).toString()\n        );\n    }\n\n     // converts an unsigned integer to a string\n     function uint2str(uint256 _i)\n     internal\n     pure\n     returns (string memory _uintAsString)\n {\n     if (_i == 0) {\n         return \"0\";\n     }\n     uint256 j = _i;\n     uint256 len;\n     while (j != 0) {\n         len++;\n         j /= 10;\n     }\n     bytes memory bstr = new bytes(len);\n     uint256 k = len;\n     while (_i != 0) {\n         k = k - 1;\n         uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n         bytes1 b1 = bytes1(temp);\n         bstr[k] = b1;\n         _i /= 10;\n     }\n     return string(bstr);\n }\n}\n"
    },
    "@erc721k/periphery-sol/contracts/svg/SVGLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { svg } from \"./svg.sol\";\nimport { svgUtils } from \"./svgUtils.sol\";\nimport { SVGColor } from \"./SVGColor.sol\";\n\ncontract SVGLibrary {\n  address private _colors;\n\n  bytes32 private immutable BUILD = keccak256(\"BUILD\");\n  bytes32 private immutable COLOR = keccak256(\"COLOR\");\n  bytes32 private immutable UTILS = keccak256(\"UTILS\");\n\n  mapping(bytes32 => address) _modules;\n\n  constructor(address _colors_) {\n    _colors = _colors_;\n  }\n\n  function execute(bytes32 package, bytes calldata input)\n    external\n    view\n    returns (string memory data)\n  {\n    if (_modules[package] != 0x0000000000000000000000000000000000000000) {\n      (bool success, bytes memory data) = address(_modules[package]).staticcall(input);\n      return string(data);\n    } else if (package == BUILD) {\n      (bool success, bytes memory data) = address(svg).staticcall(input);\n      return string(data);\n    } else if (package == COLOR) {\n      (bool success, bytes memory data) = _colors.staticcall(input);\n      return string(data);\n    } else if (package == UTILS) {\n      (bool success, bytes memory data) = address(svgUtils).staticcall(input);\n      return string(data);\n    } else {\n      return string(data);\n      revert(\"SVGLibrary:invalid-operation\");\n    }\n  }\n}\n"
    },
    "@erc721k/periphery-sol/contracts/interfaces/ISVGModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ISVGModule {\n  function decode(bytes memory input) external view returns (string memory);\n\n  function getEncoding() external view returns (string memory);\n}\n"
    },
    "@erc721k/periphery-sol/contracts/svg/SVGColor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract SVGColor {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  mapping(string => bytes) public colors;\n\n  constructor() {\n    colors[\"Black\"] = hex\"000000\";\n    colors[\"White\"] = hex\"FFFFFF\";\n    colors[\"Dark1\"] = hex\"232323\";\n    colors[\"Dark2\"] = hex\"464646\";\n  }\n\n  function getColor(string memory _colorName) public view returns (bytes memory) {\n    require(colors[_colorName].length == 3, \"Unknown color\");\n    return abi.encodePacked(colors[_colorName], hex\"64\");\n  }\n\n  function getColor(string memory _colorName, uint8 _alpha) public view returns (bytes memory) {\n    require(colors[_colorName].length == 3, \"Unknown color\");\n    return abi.encodePacked(colors[_colorName], _alpha);\n  }\n\n  function getRgba(string memory _colorName) public view returns (string memory) {\n    return string(toRgba(getColor(_colorName), 0));\n  }\n\n  // Input: array of colors (without alpha)\n  // Ouputs a linearGradient\n  function autoLinearGradient(\n    bytes memory _colors,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) public view returns (bytes memory) {\n    return this.autoLinearGradient(\"\", _colors, _id, _customAttributes);\n  }\n\n  function autoLinearGradient(\n    bytes memory _coordinates,\n    bytes memory _colors,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) external view returns (bytes memory) {\n    bytes memory _b;\n    if (_coordinates.length > 3) {\n      _b = abi.encodePacked(uint8(128), _coordinates);\n    } else {\n      _b = hex\"00\";\n    }\n    // Count the number of colors passed, each on 4 byte\n    uint256 colorCount = _colors.length / 4;\n    uint8 i = 0;\n    while (i < colorCount) {\n      _b = abi.encodePacked(\n        _b,\n        uint8(i * (100 / (colorCount - 1))), // grad. stop %\n        uint8(_colors[i * 4]),\n        uint8(_colors[i * 4 + 1]),\n        uint8(_colors[i * 4 + 2]),\n        uint8(_colors[i * 4 + 3])\n      );\n      i++;\n    }\n    return linearGradient(_b, _id, _customAttributes);\n  }\n\n  function linearGradient(\n    bytes memory _lg,\n    bytes memory _id,\n    bytes memory _customAttributes\n  ) public pure returns (bytes memory) {\n    bytes memory grdata;\n    uint8 offset = 1;\n\n    if (uint8(_lg[0]) & 128 == 128) {\n      grdata = abi.encodePacked(\n        'x1=\"',\n        byte2uint8(_lg, 1).toString(),\n        '%\" x2=\"',\n        byte2uint8(_lg, 2).toString(),\n        '%\" y1=\"',\n        byte2uint8(_lg, 3).toString(),\n        '%\" y2=\"',\n        byte2uint8(_lg, 4).toString(),\n        '%\"'\n      );\n      offset = 5;\n    }\n    grdata = abi.encodePacked('<linearGradient id=\"', _id, '\" ', _customAttributes, grdata, \">\");\n    for (uint256 i = offset; i < _lg.length; i += 5) {\n      grdata = abi.encodePacked(\n        grdata,\n        '<stop offset=\"',\n        byte2uint8(_lg, i).toString(),\n        '%\" stop-color=\"',\n        toRgba(_lg, i + 1),\n        '\" id=\"',\n        _id,\n        byte2uint8(_lg, i).toString(),\n        '\"/>'\n      );\n    }\n    return abi.encodePacked(grdata, \"</linearGradient>\");\n  }\n\n  function toRgba(bytes memory _rgba, uint256 offset) public pure returns (bytes memory) {\n    return\n      abi.encodePacked(\n        \"rgba(\",\n        byte2uint8(_rgba, offset).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 1).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 2).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 3).toString(),\n        \"%)\"\n      );\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n\n  // formats rgba white with a specified opacity / alpha\n  function white_a(uint256 _a) internal pure returns (string memory) {\n    return rgba(255, 255, 255, _a);\n  }\n\n  // formats rgba black with a specified opacity / alpha\n  function black_a(uint256 _a) internal pure returns (string memory) {\n    return rgba(0, 0, 0, _a);\n  }\n\n  // formats generic rgba color in css\n  function rgba(\n    uint256 _r,\n    uint256 _g,\n    uint256 _b,\n    uint256 _a\n  ) internal pure returns (string memory) {\n    string memory formattedA = _a < 100 ? string.concat(\"0.\", uint2str(_a)) : \"1\";\n    return\n      string.concat(\n        \"rgba(\",\n        uint2str(_r),\n        \",\",\n        uint2str(_g),\n        \",\",\n        uint2str(_b),\n        \",\",\n        formattedA,\n        \")\"\n      );\n  }\n\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n    if (_i == 0) {\n      return \"0\";\n    }\n    uint256 j = _i;\n    uint256 len;\n    while (j != 0) {\n      len++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint256 k = len;\n    while (_i != 0) {\n      k = k - 1;\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n      bytes1 b1 = bytes1(temp);\n      bstr[k] = b1;\n      _i /= 10;\n    }\n    return string(bstr);\n  }\n}\n"
    },
    "@erc721k/periphery-sol/contracts/svg/SVGRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ISVGModule } from \"../interfaces/ISVGModule.sol\";\n\ncontract SVGRegistry is Ownable {\n  mapping(bytes32 => address) private _modules;\n\n  constructor() {}\n\n  function fetch(bytes32 widgetId, bytes memory input) external view returns (string memory) {\n    if (_modules[widgetId] != address(0)) {\n      return ISVGModule(_modules[widgetId]).decode(input);\n    } else {\n      return \"\";\n    }\n  }\n\n  function getWidget(bytes32 widgetId) external view returns (address widget) {\n    return _modules[widgetId];\n  }\n\n  function setWidget(bytes32 widgetId, address widget) external onlyOwner {\n    _modules[widgetId] = widget;\n  }\n}\n"
    },
    "contracts/rendering/Web3CardRender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { strings } from \"../libraries/strings.sol\";\nimport { svg } from \"../svg/svg.sol\";\nimport { svgUtils } from \"../svg/svgUtils.sol\";\nimport { SVGLibrary } from \"@erc721k/periphery-sol/contracts/svg/SVGLibrary.sol\";\nimport { SVGRegistry } from \"@erc721k/periphery-sol/contracts/svg/SVGRegistry.sol\";\nimport { Base64 } from \"base64-sol/base64.sol\";\n\ncontract Web3CardRender is Ownable {\n  address internal _svgLibrary;\n  address internal _svgRegistry;\n\n  string private constant ENCODING = \"data:image/svg+xml;base64, \";\n  bytes32 private constant CHANCE_CARD_V0 =\n    0x464f554e44455200000000000000000000000000000000000000000000000000;\n\n  constructor(address _svgLibrary_, address _svgRegistry_) {\n    _svgLibrary = _svgLibrary_;\n    _svgRegistry = _svgRegistry_;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function render(bytes memory input) external view returns (string memory) {\n    return string(abi.encodePacked(ENCODING, Base64.encode(bytes(input))));\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n  function encodeSvgToDataURI(string memory data) internal view returns (string memory) {\n    return string(abi.encodePacked(ENCODING, Base64.encode(bytes(data))));\n  }\n\n  function _render(bytes memory input) internal view returns (string memory) {\n    (\n      address owner,\n      uint256 balance,\n      uint256 avgBalance2Weeks,\n      uint256 avgBalance4Weeks,\n      uint256 avgBalance26Weeks\n    ) = abi.decode(input, (address, uint256, uint256, uint256, uint256));\n\n    return\n      string.concat(\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1080\" height=\"631\" viewBox=\"0 0 1080 631\" fill=\"none\" style=\"font-family:sans-serif;\" >',\n        svg.rect(\n          string.concat(\n            svg.prop(\"x\", \"0.00195312\"),\n            svg.prop(\"width\", \"1079.14\"),\n            svg.prop(\"height\", \"630.353\"),\n            svg.prop(\"fill\", \"url(#paint0_linear_213_860)\")\n          )\n        ),\n        '<mask id=\"mask0_213_860\" style=\"mask-type:alpha\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"1080\" height=\"631\"><rect y=\"0.000488281\" width=\"1079.91\" height=\"630.805\" fill=\"#ED713C\"/></mask>',\n        '<g mask=\"url(#mask0_213_860)\"><ellipse opacity=\"0.1\" cx=\"83.9943\" cy=\"730.225\" rx=\"550.24\" ry=\"387.397\" fill=\"black\"/><ellipse opacity=\"0.08\" cx=\"995.92\" cy=\"-99.4212\" rx=\"550.24\" ry=\"387.397\" fill=\"black\"/></g>',\n        '<g opacity=\"0.92\" filter=\"url(#filter0_ii_213_860)\"><rect x=\"673.592\" y=\"465.15\" width=\"347.639\" height=\"114.247\" rx=\"19.5853\" fill=\"#D9D9D9\" fill-opacity=\"0.01\"/></g>',\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"70\"),\n            svg.prop(\"y\", \"70%\"),\n            svg.prop(\"font-size\", \"22\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          unicode\"🍀\"\n          // \"Weekly Chances - 1:254\"\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"70\"),\n            svg.prop(\"y\", \"80%\"),\n            svg.prop(\"font-size\", \"42\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          // \"0x000...000\"\n          // strings.split(string(abi.encodePacked(owner)), 0, 6)\n          svgUtils.splitAddress(owner)\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"70\"),\n            svg.prop(\"y\", \"90%\"),\n            svg.prop(\"font-size\", \"22\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          \"Web3 Chance Card\"\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"70\"),\n            svg.prop(\"y\", \"20%\"),\n            svg.prop(\"font-size\", \"32\"),\n            svg.prop(\"font-weight\", \"bold\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          string.concat(\"Deposit\")\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"70\"),\n            svg.prop(\"y\", \"38%\"),\n            svg.prop(\"font-size\", \"88\"),\n            svg.prop(\"font-weight\", \"bold\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          string(abi.encodePacked(svgUtils.round2Txt(balance, 6, 2)))\n        ),\n        // Right Bottom\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"72.5%\"),\n            svg.prop(\"y\", \"60%\"),\n            // svg.prop(\"fill\", \"#92FAC2\"),\n            svg.prop(\"font-size\", \"28\"),\n            svg.prop(\"font-weight\", \"300\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          \"2 Week Avg\"\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"72.5%\"),\n            svg.prop(\"y\", \"67.5%\"),\n            svg.prop(\"font-size\", \"38\"),\n            svg.prop(\"font-weight\", \"500\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          string(abi.encodePacked(svgUtils.round2Txt(avgBalance26Weeks, 6, 2)))\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"72.5%\"),\n            svg.prop(\"y\", \"85%\"),\n            svg.prop(\"font-size\", \"38\"),\n            svg.prop(\"font-weight\", \"300\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          \"Ethereum\"\n        ),\n        svg.g(\n          string.concat(\n            svg.prop(\"x\", \"72.5%\"),\n            svg.prop(\"y\", \"15%\"),\n            svg.prop(\"font-size\", \"38\"),\n            svg.prop(\"font-weight\", \"300\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          '<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 2500 1500\" x=\"62%\" y=\"10%\"> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M30.3339 62.4837C29.8869 58.3689 32.0591 57.9172 33.2011 58.2056C33.2011 58.2056 52.0917 66.23 89.8159 66.8885C127.54 67.5469 148.301 58.4869 148.301 58.4869C149.444 58.204 151.614 58.6664 151.147 62.7789C150.68 66.8915 149.965 78.7739 149.666 84.201L171.377 84.254C174.044 84.1653 178.973 85.7009 177.356 92.5532C177.027 93.9471 176.545 96.3319 175.925 99.3935C172.738 115.144 165.925 148.809 157.771 157.639C152.041 164.481 144.32 167.891 138.317 169.304C133.317 170.791 128.102 170.53 126.299 170.439L126.299 170.439C126.04 170.426 125.852 170.417 125.745 170.416C121.731 176.406 111.472 189.35 102.549 193.214C99.6405 194.263 99.6637 195.32 99.682 196.151C99.6835 196.219 99.685 196.285 99.6848 196.349C100.142 204.063 102.081 221.323 106.176 228.646C106.72 229.739 106.872 230.571 106.977 231.141C107.092 231.765 107.149 232.077 107.596 232.078L113.024 232.091C113.596 232.092 114.967 232.096 115.878 233.241C116.365 233.853 117.22 233.839 118.149 233.824C119.393 233.803 120.773 233.781 121.587 235.254C122.458 236.832 122.277 238.517 122.184 239.385C122.163 239.574 122.147 239.724 122.147 239.827L130.717 239.848C131.765 239.85 133.858 240.369 133.853 242.426L133.811 259.567C133.811 259.879 133.788 260.134 133.77 260.343C133.688 261.28 133.688 261.28 136.093 261.286L143.52 261.304C143.997 261.306 144.948 261.365 144.942 263.879L144.923 271.592C144.922 272.164 144.919 273.306 142.348 273.3L38.104 273.045C35.5329 273.039 35.5357 271.896 35.5371 271.325L35.556 263.612C35.5621 261.098 36.5138 261.043 36.9906 261.044L44.4181 261.062C46.8229 261.068 46.8229 261.068 46.7453 260.13L46.7453 260.13L46.7453 260.13C46.728 259.921 46.7069 259.666 46.7077 259.354L46.7496 242.213C46.7546 240.157 48.8508 239.648 49.8983 239.65L58.4685 239.671C58.4687 239.569 58.4533 239.419 58.4339 239.229C58.3448 238.361 58.1718 236.675 59.051 235.102C59.8722 233.632 61.2513 233.661 62.4955 233.688C63.425 233.707 64.2792 233.725 64.7693 233.116C65.6863 231.975 67.0575 231.979 67.6289 231.98L73.0567 231.993C73.5042 231.995 73.563 231.683 73.6805 231.06C73.7881 230.49 73.9448 229.659 74.4934 228.569C78.6249 221.266 80.6478 204.016 81.1427 196.304C81.1429 196.24 81.1447 196.174 81.1465 196.107L81.1465 196.106C81.1688 195.275 81.1973 194.218 78.2937 193.154C69.3902 189.247 59.1948 176.253 55.21 170.244C55.1031 170.244 54.9161 170.252 54.6595 170.264L54.6581 170.264L54.6554 170.264L54.6552 170.264C52.8517 170.346 47.6361 170.582 42.6432 169.071C36.6475 167.628 28.9427 164.181 23.246 157.311C15.1355 148.441 8.48736 114.743 5.37695 98.9767C4.77236 95.9121 4.30143 93.5251 3.9794 92.1295C2.39638 85.2695 7.33272 83.7579 9.99878 83.8597L31.7099 83.9127C31.4375 78.4842 30.7809 66.5986 30.3339 62.4837ZM15.8476 93.4105C12.5076 93.3522 13.3007 97.257 13.9042 100.228C13.9825 100.614 14.0576 100.983 14.1201 101.327C14.6639 104.316 17.1903 116.638 23.8372 136.461C30.484 156.285 43.3322 157.727 48.9255 155.971C45.0967 147.693 37.0168 121.196 35.3888 112.029C33.7607 102.862 31.7356 93.6877 29.3524 93.6462L15.8476 93.4105ZM167.242 101.408C167.897 98.4475 168.758 94.5571 165.418 94.5571L151.911 94.5571C149.528 94.5571 147.343 103.694 145.555 112.831C143.767 121.968 135.226 148.32 131.253 156.531C136.815 158.384 149.686 157.166 156.678 137.462C163.67 117.757 166.411 105.482 167.007 102.502C167.076 102.16 167.157 101.792 167.242 101.408L167.242 101.408ZM109.937 132.129L90.4634 144.384L71.0746 131.994L90.4062 160.182L90.4062 160.19L90.4089 160.186L90.4117 160.19L90.4117 160.182L109.937 132.129ZM90.6544 90.6369L90.6544 90.6188L90.6491 90.6278L90.644 90.6189L90.6439 90.6367L70.9767 124.244L90.4858 136.479L90.4857 136.485L90.4911 136.482L90.4962 136.485L90.4962 136.479L110.089 124.38L90.6544 90.6369Z\" fill=\"#FFB636\"/> <path d=\"M150.342 59.0848C150.294 64.5697 123.755 68.7848 91.0653 68.4995C58.3754 68.2142 31.1194 63.5227 31.1673 58.0378C31.2152 52.553 58.5488 48.3517 91.2387 48.637C123.929 48.9223 150.39 53.5999 150.342 59.0848Z\" fill=\"#FFD469\"/> <path d=\"M133.184 78.6368C136.105 78.6368 136.626 78.6368 141.923 76.7831C141.266 80.3072 137.812 107.016 136.626 111.208C133.458 122.409 129.879 139.718 125.24 143.064C124.358 143.699 120.473 143.064 119.027 142.132C117.581 141.2 122.592 131.598 128.682 111.208C132.125 89.229 131.066 79.696 133.184 78.6368Z\" fill=\"#FFCC4E\"/> <path d=\"M291.226 50.5033C327.31 50.5033 356.562 80.2436 356.562 116.93V155.126C356.562 191.812 327.31 221.552 291.226 221.552C285.558 221.552 280.059 220.819 274.815 219.439L274.815 223.948C274.815 250.786 253.313 272.593 226.624 273.027L225.813 273.033V126.894L225.888 126.892L225.89 116.93C225.89 80.2436 255.142 50.5033 291.226 50.5033ZM583.816 50.5033C619.921 50.5033 649.19 80.4136 649.19 117.31V155.724C649.19 192.62 619.921 222.53 583.816 222.53C547.711 222.53 518.442 192.62 518.442 155.724V117.31C518.442 80.4136 547.711 50.5033 583.816 50.5033ZM437.502 47.3468C473.607 47.3468 502.876 77.2571 502.876 114.153V152.567C502.876 189.463 473.607 219.374 437.502 219.374C401.397 219.374 372.128 189.463 372.128 152.567V114.153C372.128 77.2571 401.397 47.3468 437.502 47.3468ZM714.565 0V169.48C714.565 196.76 692.708 218.926 665.579 219.367L664.756 219.374V49.8933C664.756 22.338 687.056 0 714.565 0ZM583.816 100.608C574.79 100.608 567.472 108.086 567.472 117.31V155.724C567.472 164.948 574.79 172.425 583.816 172.425C592.842 172.425 600.16 164.948 600.16 155.724V117.31C600.16 108.086 592.842 100.608 583.816 100.608ZM291.226 100.323C282.205 100.323 274.892 107.758 274.892 116.93V155.126C274.892 164.297 282.205 171.732 291.226 171.732C300.247 171.732 307.56 164.297 307.56 155.126V116.93C307.56 107.758 300.247 100.323 291.226 100.323ZM437.502 97.4517C428.476 97.4517 421.158 104.929 421.158 114.153V152.567C421.158 161.791 428.476 169.269 437.502 169.269C446.528 169.269 453.845 161.791 453.845 152.567V114.153C453.845 104.929 446.528 97.4517 437.502 97.4517Z\" fill=\"white\"/> <path d=\"M531.611 265.029H530.252C528.901 265.029 527.714 263.764 527.714 261.794V252.487H530.612C531.961 252.487 532.99 251.594 532.99 250.324C532.99 249.682 532.751 249.111 532.313 248.702C531.878 248.296 531.279 248.081 530.612 248.081H527.714V242.862C527.714 241.437 526.651 240.381 525.216 240.381C523.781 240.381 522.717 241.437 522.717 242.862V248.081H521.378C520.711 248.081 520.113 248.296 519.677 248.702C519.239 249.111 519 249.682 519 250.324C519 251.594 520.029 252.487 521.378 252.487H522.717V261.794C522.717 266.429 525.936 269.99 530.252 269.99H530.972C532.525 269.99 533.83 269.01 533.83 267.51C533.83 266.15 532.908 265.029 531.611 265.029Z\" fill=\"white\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M561.745 258.659L561.745 258.656C561.704 251.921 556.931 247.129 550.253 247.129C546.894 247.129 544.004 248.315 541.954 250.366C539.904 252.417 538.721 255.306 538.721 258.659C538.721 261.993 539.905 264.871 541.954 266.917C544.005 268.963 546.894 270.149 550.253 270.149C553.593 270.149 556.473 268.962 558.517 266.917C560.562 264.871 561.745 261.993 561.745 258.659ZM550.253 251.693C552.201 251.693 553.836 252.416 554.986 253.63C556.137 254.847 556.829 256.587 556.829 258.659C556.829 260.731 556.138 262.459 554.987 263.666C553.838 264.871 552.203 265.585 550.253 265.585C548.303 265.585 546.657 264.87 545.498 263.664C544.337 262.457 543.638 260.729 543.638 258.659C543.638 254.541 546.397 251.693 550.253 251.693Z\" fill=\"white\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M579.146 279C575.213 279 571.626 277.436 569.243 274.449C568.8 273.91 568.633 273.281 568.74 272.678C568.846 272.079 569.213 271.552 569.75 271.188L569.755 271.185C570.952 270.393 572.4 270.75 573.185 271.771C574.517 273.459 576.561 274.436 579.225 274.436C581.018 274.436 582.652 273.779 583.84 272.536C585.026 271.294 585.801 269.429 585.801 266.954V266.639C584.034 268.85 581.465 270.149 578.426 270.149C575.294 270.149 572.601 268.954 570.694 266.904C568.79 264.856 567.693 261.982 567.693 258.659C567.693 255.306 568.876 252.417 570.926 250.366C572.977 248.315 575.866 247.129 579.225 247.129C585.903 247.129 590.676 251.921 590.718 258.656L590.718 258.659L590.718 267.232C590.718 273.753 586 279 579.146 279ZM579.225 265.585C577.275 265.585 575.63 264.87 574.47 263.664C573.31 262.457 572.61 260.729 572.61 258.659C572.61 254.541 575.369 251.693 579.225 251.693C581.173 251.693 582.808 252.416 583.958 253.63C585.11 254.847 585.801 256.587 585.801 258.659C585.801 260.731 585.11 262.459 583.959 263.666C582.81 264.871 581.175 265.585 579.225 265.585Z\" fill=\"white\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M616.03 264.309C615.151 263.59 613.856 263.619 612.895 264.334C611.896 265.068 610.081 265.743 608.557 265.743C604.933 265.743 602.257 263.632 601.494 260.544H616.072C616.724 260.544 617.313 260.327 617.741 259.921C618.172 259.513 618.411 258.943 618.411 258.302C618.411 255.071 617.452 252.275 615.644 250.28C613.83 248.279 611.201 247.129 607.958 247.129C604.675 247.129 601.844 248.317 599.835 250.37C597.827 252.421 596.666 255.308 596.666 258.659C596.666 261.998 597.893 264.878 600.01 266.923C602.126 268.966 605.103 270.149 608.557 270.149C611.098 270.149 614.207 269.125 616.102 267.622C616.649 267.2 616.947 266.619 616.926 265.99C616.906 265.37 616.579 264.782 616.041 264.317L616.03 264.309ZM607.958 251.534C609.636 251.534 610.956 252.096 611.915 253.03C612.765 253.858 613.357 255.005 613.641 256.377H601.537C601.879 255.004 602.552 253.862 603.509 253.035C604.596 252.096 606.084 251.534 607.958 251.534Z\" fill=\"white\"/> <path d=\"M634.423 265.029H633.064C631.713 265.029 630.526 263.764 630.526 261.794V252.487H633.424C634.773 252.487 635.802 251.594 635.802 250.324C635.802 249.682 635.563 249.111 635.125 248.702C634.69 248.296 634.091 248.081 633.424 248.081H630.526V242.862C630.526 241.437 629.463 240.381 628.028 240.381C626.593 240.381 625.53 241.437 625.53 242.862V248.081H624.19C623.523 248.081 622.925 248.296 622.489 248.702C622.051 249.111 621.812 249.682 621.812 250.324C621.812 251.594 622.841 252.487 624.19 252.487H625.53V261.794C625.53 266.429 628.748 269.99 633.064 269.99H633.784C635.337 269.99 636.642 269.01 636.642 267.51C636.642 266.15 635.72 265.029 634.423 265.029Z\" fill=\"white\"/> <path d=\"M654.025 247.089C651.611 247.089 649.423 247.838 647.729 249.146V240.52C647.729 239.806 647.475 239.17 647.013 238.711C646.551 238.252 645.91 238 645.191 238C644.471 238 643.831 238.252 643.368 238.711C642.906 239.17 642.652 239.806 642.652 240.52V267.51C642.652 268.224 642.906 268.86 643.368 269.319C643.831 269.778 644.471 270.03 645.191 270.03C645.91 270.03 646.551 269.778 647.013 269.319C647.475 268.86 647.729 268.224 647.729 267.51V256.317C647.729 253.766 650.025 251.733 653.225 251.733C654.954 251.733 656.406 252.213 657.423 253.17C658.435 254.121 659.081 255.605 659.081 257.746V267.51C659.081 268.935 660.184 270.03 661.619 270.03C663.055 270.03 664.158 268.935 664.158 267.51V257.746C664.158 254.346 663.082 251.671 661.249 249.845C659.416 248.02 656.873 247.089 654.025 247.089Z\" fill=\"white\"/> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M690.224 260.544H675.646C676.409 263.632 679.085 265.743 682.71 265.743C684.234 265.743 686.049 265.068 687.048 264.333C688.008 263.619 689.304 263.59 690.182 264.309L690.193 264.317C690.731 264.782 691.058 265.37 691.079 265.99C691.099 266.619 690.802 267.2 690.254 267.622C688.359 269.125 685.25 270.149 682.71 270.149C679.255 270.149 676.278 268.966 674.162 266.923C672.045 264.878 670.818 261.998 670.818 258.659C670.818 255.308 671.979 252.421 673.987 250.37C675.996 248.317 678.827 247.129 682.11 247.129C685.354 247.129 687.983 248.279 689.796 250.28C691.605 252.275 692.563 255.071 692.563 258.302C692.563 258.943 692.324 259.513 691.893 259.921C691.465 260.327 690.876 260.544 690.224 260.544ZM682.11 251.534C683.788 251.534 685.108 252.096 686.067 253.03C686.918 253.858 687.509 255.005 687.793 256.377H675.689C676.031 255.004 676.704 253.862 677.661 253.035C678.748 252.096 680.236 251.534 682.11 251.534Z\" fill=\"white\"/> <path d=\"M709.975 247.049C707.592 247.049 705.385 247.913 703.736 249.347C703.673 248.788 703.477 248.301 703.108 247.934C702.648 247.478 702.001 247.288 701.261 247.288C700.529 247.288 699.887 247.493 699.428 247.949C698.97 248.404 698.762 249.042 698.762 249.768V267.51C698.762 268.252 698.968 268.893 699.431 269.347C699.893 269.798 700.536 269.99 701.261 269.99C702.008 269.99 702.654 269.786 703.11 269.326C703.566 268.868 703.759 268.229 703.759 267.51V255.92C703.759 254.301 704.604 253.073 706.063 252.339C707.543 251.595 709.668 251.361 712.149 251.841C712.736 251.974 713.339 251.966 713.858 251.711C714.396 251.448 714.767 250.957 714.936 250.285C715.053 249.82 715.009 249.358 714.803 248.936C714.6 248.521 714.254 248.174 713.813 247.899C712.938 247.354 711.623 247.049 709.975 247.049Z\" fill=\"white\"/> </svg> '\n        ),\n        '<defs> <filter id=\"filter0_ii_213_860\" x=\"670.328\" y=\"461.886\" width=\"355.799\" height=\"124.04\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"> <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/> <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"/> <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/> <feOffset dx=\"4.89632\" dy=\"6.52843\"/> <feGaussianBlur stdDeviation=\"3.26421\"/> <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\"/> <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\"/> <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow_213_860\"/> <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/> <feOffset dx=\"-3.26421\" dy=\"-3.26421\"/> <feGaussianBlur stdDeviation=\"6.52843\"/> <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\"/> <feColorMatrix type=\"matrix\" values=\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.25 0\"/> <feBlend mode=\"normal\" in2=\"effect1_innerShadow_213_860\" result=\"effect2_innerShadow_213_860\"/> </filter> <linearGradient id=\"paint0_linear_213_860\" x1=\"543.292\" y1=\"-104.506\" x2=\"566.289\" y2=\"709.269\" gradientUnits=\"userSpaceOnUse\"> <stop stop-color=\"#9C2CF3\"/> <stop offset=\"1\" stop-color=\"#3A49F9\"/> </linearGradient> </defs>',\n        \"</svg>\"\n      );\n  }\n\n  function _lib(bytes32 _key, bytes memory _value) internal view returns (string memory) {\n    return SVGLibrary(_svgLibrary).execute(_key, _value);\n  }\n\n  function _registry(bytes32 _key, bytes memory _value) internal view returns (string memory) {\n    return SVGRegistry(_svgRegistry).fetch(_key, _value);\n  }\n}\n"
    },
    "contracts/libraries/strings.sol": {
      "content": "/*\n * @title String & slice utility library for Solidity contracts.\n * @author Nick Johnson <arachnid@notdot.net>\n *\n * @dev Functionality in this library is largely implemented using an\n *      abstraction called a 'slice'. A slice represents a part of a string -\n *      anything from the entire string to a single character, or even no\n *      characters at all (a 0-length slice). Since a slice only has to specify\n *      an offset and a length, copying and manipulating slices is a lot less\n *      expensive than copying and manipulating the strings they reference.\n *\n *      To further reduce gas costs, most functions on slice that need to return\n *      a slice modify the original one instead of allocating a new one; for\n *      instance, `s.split(\".\")` will return the text up to the first '.',\n *      modifying s to only contain the remainder of the string after the '.'.\n *      In situations where you do not want to modify the original slice, you\n *      can make a copy first with `.copy()`, for example:\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\n *      Solidity has no memory management, it will result in allocating many\n *      short-lived slices that are later discarded.\n *\n *      Functions that return two slices come in two versions: a non-allocating\n *      version that takes the second slice as an argument, modifying it in\n *      place, and an allocating version that allocates and returns the second\n *      slice; see `nextRune` for example.\n *\n *      Functions that have to copy string data will return strings rather than\n *      slices; these can be cast back to slices for further processing if\n *      required.\n *\n *      For convenience, some functions are provided with non-modifying\n *      variants that create a new slice and return both; for instance,\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\n *      corresponding to the left and right parts of the string.\n */\n\npragma solidity ^0.8.0;\n\nlibrary strings {\n  struct slice {\n    uint256 _len;\n    uint256 _ptr;\n  }\n\n  function memcpy(\n    uint256 dest,\n    uint256 src,\n    uint256 len\n  ) private pure {\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    uint256 mask = type(uint256).max;\n    if (len > 0) {\n      mask = 256**(32 - len) - 1;\n    }\n    assembly {\n      let srcpart := and(mload(src), not(mask))\n      let destpart := and(mload(dest), mask)\n      mstore(dest, or(destpart, srcpart))\n    }\n  }\n\n  /*\n   * @dev Returns a slice containing the entire string.\n   * @param self The string to make a slice from.\n   * @return A newly allocated slice containing the entire string.\n   */\n  function toSlice(string memory self) internal pure returns (slice memory) {\n    uint256 ptr;\n    assembly {\n      ptr := add(self, 0x20)\n    }\n    return slice(bytes(self).length, ptr);\n  }\n\n  /*\n   * @dev Returns the length of a null-terminated bytes32 string.\n   * @param self The value to find the length of.\n   * @return The length of the string, from 0 to 32.\n   */\n  function len(bytes32 self) internal pure returns (uint256) {\n    uint256 ret;\n    if (self == 0) return 0;\n    if (uint256(self) & type(uint128).max == 0) {\n      ret += 16;\n      self = bytes32(uint256(self) / 0x100000000000000000000000000000000);\n    }\n    if (uint256(self) & type(uint64).max == 0) {\n      ret += 8;\n      self = bytes32(uint256(self) / 0x10000000000000000);\n    }\n    if (uint256(self) & type(uint32).max == 0) {\n      ret += 4;\n      self = bytes32(uint256(self) / 0x100000000);\n    }\n    if (uint256(self) & type(uint16).max == 0) {\n      ret += 2;\n      self = bytes32(uint256(self) / 0x10000);\n    }\n    if (uint256(self) & type(uint8).max == 0) {\n      ret += 1;\n    }\n    return 32 - ret;\n  }\n\n  /*\n   * @dev Returns a slice containing the entire bytes32, interpreted as a\n   *      null-terminated utf-8 string.\n   * @param self The bytes32 value to convert to a slice.\n   * @return A new slice containing the value of the input argument up to the\n   *         first null.\n   */\n  function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\n    // Allocate space for `self` in memory, copy it there, and point ret at it\n    assembly {\n      let ptr := mload(0x40)\n      mstore(0x40, add(ptr, 0x20))\n      mstore(ptr, self)\n      mstore(add(ret, 0x20), ptr)\n    }\n    ret._len = len(self);\n  }\n\n  /*\n   * @dev Returns a new slice containing the same data as the current slice.\n   * @param self The slice to copy.\n   * @return A new slice containing the same data as `self`.\n   */\n  function copy(slice memory self) internal pure returns (slice memory) {\n    return slice(self._len, self._ptr);\n  }\n\n  /*\n   * @dev Copies a slice to a new string.\n   * @param self The slice to copy.\n   * @return A newly allocated string containing the slice's text.\n   */\n  function toString(slice memory self) internal pure returns (string memory) {\n    string memory ret = new string(self._len);\n    uint256 retptr;\n    assembly {\n      retptr := add(ret, 32)\n    }\n\n    memcpy(retptr, self._ptr, self._len);\n    return ret;\n  }\n\n  /*\n   * @dev Returns the length in runes of the slice. Note that this operation\n   *      takes time proportional to the length of the slice; avoid using it\n   *      in loops, and call `slice.empty()` if you only need to know whether\n   *      the slice is empty or not.\n   * @param self The slice to operate on.\n   * @return The length of the slice in runes.\n   */\n  function len(slice memory self) internal pure returns (uint256 l) {\n    // Starting at ptr-31 means the LSB will be the byte we care about\n    uint256 ptr = self._ptr - 31;\n    uint256 end = ptr + self._len;\n    for (l = 0; ptr < end; l++) {\n      uint8 b;\n      assembly {\n        b := and(mload(ptr), 0xFF)\n      }\n      if (b < 0x80) {\n        ptr += 1;\n      } else if (b < 0xE0) {\n        ptr += 2;\n      } else if (b < 0xF0) {\n        ptr += 3;\n      } else if (b < 0xF8) {\n        ptr += 4;\n      } else if (b < 0xFC) {\n        ptr += 5;\n      } else {\n        ptr += 6;\n      }\n    }\n  }\n\n  /*\n   * @dev Returns true if the slice is empty (has a length of 0).\n   * @param self The slice to operate on.\n   * @return True if the slice is empty, False otherwise.\n   */\n  function empty(slice memory self) internal pure returns (bool) {\n    return self._len == 0;\n  }\n\n  /*\n   * @dev Returns a positive number if `other` comes lexicographically after\n   *      `self`, a negative number if it comes before, or zero if the\n   *      contents of the two slices are equal. Comparison is done per-rune,\n   *      on unicode codepoints.\n   * @param self The first slice to compare.\n   * @param other The second slice to compare.\n   * @return The result of the comparison.\n   */\n  function compare(slice memory self, slice memory other) internal pure returns (int256) {\n    uint256 shortest = self._len;\n    if (other._len < self._len) shortest = other._len;\n\n    uint256 selfptr = self._ptr;\n    uint256 otherptr = other._ptr;\n    for (uint256 idx = 0; idx < shortest; idx += 32) {\n      uint256 a;\n      uint256 b;\n      assembly {\n        a := mload(selfptr)\n        b := mload(otherptr)\n      }\n      if (a != b) {\n        // Mask out irrelevant bytes and check again\n        uint256 mask = type(uint256).max; // 0xffff...\n        if (shortest < 32) {\n          mask = ~(2**(8 * (32 - shortest + idx)) - 1);\n        }\n        unchecked {\n          uint256 diff = (a & mask) - (b & mask);\n          if (diff != 0) return int256(diff);\n        }\n      }\n      selfptr += 32;\n      otherptr += 32;\n    }\n    return int256(self._len) - int256(other._len);\n  }\n\n  /*\n   * @dev Returns true if the two slices contain the same text.\n   * @param self The first slice to compare.\n   * @param self The second slice to compare.\n   * @return True if the slices are equal, false otherwise.\n   */\n  function equals(slice memory self, slice memory other) internal pure returns (bool) {\n    return compare(self, other) == 0;\n  }\n\n  /*\n   * @dev Extracts the first rune in the slice into `rune`, advancing the\n   *      slice to point to the next rune and returning `self`.\n   * @param self The slice to operate on.\n   * @param rune The slice that will contain the first rune.\n   * @return `rune`.\n   */\n  function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\n    rune._ptr = self._ptr;\n\n    if (self._len == 0) {\n      rune._len = 0;\n      return rune;\n    }\n\n    uint256 l;\n    uint256 b;\n    // Load the first byte of the rune into the LSBs of b\n    assembly {\n      b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF)\n    }\n    if (b < 0x80) {\n      l = 1;\n    } else if (b < 0xE0) {\n      l = 2;\n    } else if (b < 0xF0) {\n      l = 3;\n    } else {\n      l = 4;\n    }\n\n    // Check for truncated codepoints\n    if (l > self._len) {\n      rune._len = self._len;\n      self._ptr += self._len;\n      self._len = 0;\n      return rune;\n    }\n\n    self._ptr += l;\n    self._len -= l;\n    rune._len = l;\n    return rune;\n  }\n\n  /*\n   * @dev Returns the first rune in the slice, advancing the slice to point\n   *      to the next rune.\n   * @param self The slice to operate on.\n   * @return A slice containing only the first rune from `self`.\n   */\n  function nextRune(slice memory self) internal pure returns (slice memory ret) {\n    nextRune(self, ret);\n  }\n\n  /*\n   * @dev Returns the number of the first codepoint in the slice.\n   * @param self The slice to operate on.\n   * @return The number of the first codepoint in the slice.\n   */\n  function ord(slice memory self) internal pure returns (uint256 ret) {\n    if (self._len == 0) {\n      return 0;\n    }\n\n    uint256 word;\n    uint256 length;\n    uint256 divisor = 2**248;\n\n    // Load the rune into the MSBs of b\n    assembly {\n      word := mload(mload(add(self, 32)))\n    }\n    uint256 b = word / divisor;\n    if (b < 0x80) {\n      ret = b;\n      length = 1;\n    } else if (b < 0xE0) {\n      ret = b & 0x1F;\n      length = 2;\n    } else if (b < 0xF0) {\n      ret = b & 0x0F;\n      length = 3;\n    } else {\n      ret = b & 0x07;\n      length = 4;\n    }\n\n    // Check for truncated codepoints\n    if (length > self._len) {\n      return 0;\n    }\n\n    for (uint256 i = 1; i < length; i++) {\n      divisor = divisor / 256;\n      b = (word / divisor) & 0xFF;\n      if (b & 0xC0 != 0x80) {\n        // Invalid UTF-8 sequence\n        return 0;\n      }\n      ret = (ret * 64) | (b & 0x3F);\n    }\n\n    return ret;\n  }\n\n  /*\n   * @dev Returns the keccak-256 hash of the slice.\n   * @param self The slice to hash.\n   * @return The hash of the slice.\n   */\n  function keccak(slice memory self) internal pure returns (bytes32 ret) {\n    assembly {\n      ret := keccak256(mload(add(self, 32)), mload(self))\n    }\n  }\n\n  /*\n   * @dev Returns true if `self` starts with `needle`.\n   * @param self The slice to operate on.\n   * @param needle The slice to search for.\n   * @return True if the slice starts with the provided text, false otherwise.\n   */\n  function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n    if (self._len < needle._len) {\n      return false;\n    }\n\n    if (self._ptr == needle._ptr) {\n      return true;\n    }\n\n    bool equal;\n    assembly {\n      let length := mload(needle)\n      let selfptr := mload(add(self, 0x20))\n      let needleptr := mload(add(needle, 0x20))\n      equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n    }\n    return equal;\n  }\n\n  /*\n   * @dev If `self` starts with `needle`, `needle` is removed from the\n   *      beginning of `self`. Otherwise, `self` is unmodified.\n   * @param self The slice to operate on.\n   * @param needle The slice to search for.\n   * @return `self`\n   */\n  function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\n    if (self._len < needle._len) {\n      return self;\n    }\n\n    bool equal = true;\n    if (self._ptr != needle._ptr) {\n      assembly {\n        let length := mload(needle)\n        let selfptr := mload(add(self, 0x20))\n        let needleptr := mload(add(needle, 0x20))\n        equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n      }\n    }\n\n    if (equal) {\n      self._len -= needle._len;\n      self._ptr += needle._len;\n    }\n\n    return self;\n  }\n\n  /*\n   * @dev Returns true if the slice ends with `needle`.\n   * @param self The slice to operate on.\n   * @param needle The slice to search for.\n   * @return True if the slice starts with the provided text, false otherwise.\n   */\n  function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n    if (self._len < needle._len) {\n      return false;\n    }\n\n    uint256 selfptr = self._ptr + self._len - needle._len;\n\n    if (selfptr == needle._ptr) {\n      return true;\n    }\n\n    bool equal;\n    assembly {\n      let length := mload(needle)\n      let needleptr := mload(add(needle, 0x20))\n      equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n    }\n\n    return equal;\n  }\n\n  /*\n   * @dev If `self` ends with `needle`, `needle` is removed from the\n   *      end of `self`. Otherwise, `self` is unmodified.\n   * @param self The slice to operate on.\n   * @param needle The slice to search for.\n   * @return `self`\n   */\n  function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\n    if (self._len < needle._len) {\n      return self;\n    }\n\n    uint256 selfptr = self._ptr + self._len - needle._len;\n    bool equal = true;\n    if (selfptr != needle._ptr) {\n      assembly {\n        let length := mload(needle)\n        let needleptr := mload(add(needle, 0x20))\n        equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n      }\n    }\n\n    if (equal) {\n      self._len -= needle._len;\n    }\n\n    return self;\n  }\n\n  // Returns the memory address of the first byte of the first occurrence of\n  // `needle` in `self`, or the first byte after `self` if not found.\n  function findPtr(\n    uint256 selflen,\n    uint256 selfptr,\n    uint256 needlelen,\n    uint256 needleptr\n  ) private pure returns (uint256) {\n    uint256 ptr = selfptr;\n    uint256 idx;\n\n    if (needlelen <= selflen) {\n      if (needlelen <= 32) {\n        bytes32 mask;\n        if (needlelen > 0) {\n          mask = bytes32(~(2**(8 * (32 - needlelen)) - 1));\n        }\n\n        bytes32 needledata;\n        assembly {\n          needledata := and(mload(needleptr), mask)\n        }\n\n        uint256 end = selfptr + selflen - needlelen;\n        bytes32 ptrdata;\n        assembly {\n          ptrdata := and(mload(ptr), mask)\n        }\n\n        while (ptrdata != needledata) {\n          if (ptr >= end) return selfptr + selflen;\n          ptr++;\n          assembly {\n            ptrdata := and(mload(ptr), mask)\n          }\n        }\n        return ptr;\n      } else {\n        // For long needles, use hashing\n        bytes32 hash;\n        assembly {\n          hash := keccak256(needleptr, needlelen)\n        }\n\n        for (idx = 0; idx <= selflen - needlelen; idx++) {\n          bytes32 testHash;\n          assembly {\n            testHash := keccak256(ptr, needlelen)\n          }\n          if (hash == testHash) return ptr;\n          ptr += 1;\n        }\n      }\n    }\n    return selfptr + selflen;\n  }\n\n  // Returns the memory address of the first byte after the last occurrence of\n  // `needle` in `self`, or the address of `self` if not found.\n  function rfindPtr(\n    uint256 selflen,\n    uint256 selfptr,\n    uint256 needlelen,\n    uint256 needleptr\n  ) private pure returns (uint256) {\n    uint256 ptr;\n\n    if (needlelen <= selflen) {\n      if (needlelen <= 32) {\n        bytes32 mask;\n        if (needlelen > 0) {\n          mask = bytes32(~(2**(8 * (32 - needlelen)) - 1));\n        }\n\n        bytes32 needledata;\n        assembly {\n          needledata := and(mload(needleptr), mask)\n        }\n\n        ptr = selfptr + selflen - needlelen;\n        bytes32 ptrdata;\n        assembly {\n          ptrdata := and(mload(ptr), mask)\n        }\n\n        while (ptrdata != needledata) {\n          if (ptr <= selfptr) return selfptr;\n          ptr--;\n          assembly {\n            ptrdata := and(mload(ptr), mask)\n          }\n        }\n        return ptr + needlelen;\n      } else {\n        // For long needles, use hashing\n        bytes32 hash;\n        assembly {\n          hash := keccak256(needleptr, needlelen)\n        }\n        ptr = selfptr + (selflen - needlelen);\n        while (ptr >= selfptr) {\n          bytes32 testHash;\n          assembly {\n            testHash := keccak256(ptr, needlelen)\n          }\n          if (hash == testHash) return ptr + needlelen;\n          ptr -= 1;\n        }\n      }\n    }\n    return selfptr;\n  }\n\n  /*\n   * @dev Modifies `self` to contain everything from the first occurrence of\n   *      `needle` to the end of the slice. `self` is set to the empty slice\n   *      if `needle` is not found.\n   * @param self The slice to search and modify.\n   * @param needle The text to search for.\n   * @return `self`.\n   */\n  function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\n    uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n    self._len -= ptr - self._ptr;\n    self._ptr = ptr;\n    return self;\n  }\n\n  /*\n   * @dev Modifies `self` to contain the part of the string from the start of\n   *      `self` to the end of the first occurrence of `needle`. If `needle`\n   *      is not found, `self` is set to the empty slice.\n   * @param self The slice to search and modify.\n   * @param needle The text to search for.\n   * @return `self`.\n   */\n  function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\n    uint256 ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n    self._len = ptr - self._ptr;\n    return self;\n  }\n\n  /*\n   * @dev Splits the slice, setting `self` to everything after the first\n   *      occurrence of `needle`, and `token` to everything before it. If\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\n   *      and `token` is set to the entirety of `self`.\n   * @param self The slice to split.\n   * @param needle The text to search for in `self`.\n   * @param token An output parameter to which the first token is written.\n   * @return `token`.\n   */\n  function split(\n    slice memory self,\n    slice memory needle,\n    slice memory token\n  ) internal pure returns (slice memory) {\n    uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n    token._ptr = self._ptr;\n    token._len = ptr - self._ptr;\n    if (ptr == self._ptr + self._len) {\n      // Not found\n      self._len = 0;\n    } else {\n      self._len -= token._len + needle._len;\n      self._ptr = ptr + needle._len;\n    }\n    return token;\n  }\n\n  /*\n   * @dev Splits the slice, setting `self` to everything after the first\n   *      occurrence of `needle`, and returning everything before it. If\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\n   *      and the entirety of `self` is returned.\n   * @param self The slice to split.\n   * @param needle The text to search for in `self`.\n   * @return The part of `self` up to the first occurrence of `delim`.\n   */\n  function split(slice memory self, slice memory needle)\n    internal\n    pure\n    returns (slice memory token)\n  {\n    split(self, needle, token);\n  }\n\n  /*\n   * @dev Splits the slice, setting `self` to everything before the last\n   *      occurrence of `needle`, and `token` to everything after it. If\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\n   *      and `token` is set to the entirety of `self`.\n   * @param self The slice to split.\n   * @param needle The text to search for in `self`.\n   * @param token An output parameter to which the first token is written.\n   * @return `token`.\n   */\n  function rsplit(\n    slice memory self,\n    slice memory needle,\n    slice memory token\n  ) internal pure returns (slice memory) {\n    uint256 ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n    token._ptr = ptr;\n    token._len = self._len - (ptr - self._ptr);\n    if (ptr == self._ptr) {\n      // Not found\n      self._len = 0;\n    } else {\n      self._len -= token._len + needle._len;\n    }\n    return token;\n  }\n\n  /*\n   * @dev Splits the slice, setting `self` to everything before the last\n   *      occurrence of `needle`, and returning everything after it. If\n   *      `needle` does not occur in `self`, `self` is set to the empty slice,\n   *      and the entirety of `self` is returned.\n   * @param self The slice to split.\n   * @param needle The text to search for in `self`.\n   * @return The part of `self` after the last occurrence of `delim`.\n   */\n  function rsplit(slice memory self, slice memory needle)\n    internal\n    pure\n    returns (slice memory token)\n  {\n    rsplit(self, needle, token);\n  }\n\n  /*\n   * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n   * @param self The slice to search.\n   * @param needle The text to search for in `self`.\n   * @return The number of occurrences of `needle` found in `self`.\n   */\n  function count(slice memory self, slice memory needle) internal pure returns (uint256 cnt) {\n    uint256 ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n    while (ptr <= self._ptr + self._len) {\n      cnt++;\n      ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n    }\n  }\n\n  /*\n   * @dev Returns True if `self` contains `needle`.\n   * @param self The slice to search.\n   * @param needle The text to search for in `self`.\n   * @return True if `needle` is found in `self`, false otherwise.\n   */\n  function contains(slice memory self, slice memory needle) internal pure returns (bool) {\n    return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n  }\n\n  /*\n   * @dev Returns a newly allocated string containing the concatenation of\n   *      `self` and `other`.\n   * @param self The first slice to concatenate.\n   * @param other The second slice to concatenate.\n   * @return The concatenation of the two strings.\n   */\n  function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n    string memory ret = new string(self._len + other._len);\n    uint256 retptr;\n    assembly {\n      retptr := add(ret, 32)\n    }\n    memcpy(retptr, self._ptr, self._len);\n    memcpy(retptr + self._len, other._ptr, other._len);\n    return ret;\n  }\n\n  /*\n   * @dev Joins an array of slices, using `self` as a delimiter, returning a\n   *      newly allocated string.\n   * @param self The delimiter to use.\n   * @param parts A list of slices to join.\n   * @return A newly allocated string containing all the slices in `parts`,\n   *         joined with `self`.\n   */\n  function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\n    if (parts.length == 0) return \"\";\n\n    uint256 length = self._len * (parts.length - 1);\n    for (uint256 i = 0; i < parts.length; i++) length += parts[i]._len;\n\n    string memory ret = new string(length);\n    uint256 retptr;\n    assembly {\n      retptr := add(ret, 32)\n    }\n\n    for (uint256 i = 0; i < parts.length; i++) {\n      memcpy(retptr, parts[i]._ptr, parts[i]._len);\n      retptr += parts[i]._len;\n      if (i < parts.length - 1) {\n        memcpy(retptr, self._ptr, self._len);\n        retptr += self._len;\n      }\n    }\n\n    return ret;\n  }\n}\n"
    },
    "contracts/svg/svg.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./svgUtils.sol\";\n\n/**\n * @title svg\n * @author Kames Geraghty\n * @notice SVG construction library using web-like API.\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n */\nlibrary svg {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\n    return el(\"g\", _props, _children);\n  }\n\n  function path(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"path\", _props, _children);\n  }\n\n  function text(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"text\", _props, _children);\n  }\n\n  function line(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"line\", _props, _children);\n  }\n\n  function circle(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"circle\", _props, _children);\n  }\n\n  function circle(string memory _props) internal pure returns (string memory) {\n    return el(\"circle\", _props);\n  }\n\n  function rect(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"rect\", _props, _children);\n  }\n\n  function rect(string memory _props) internal pure returns (string memory) {\n    return el(\"rect\", _props);\n  }\n\n  function stop(string memory _props) internal pure returns (string memory) {\n    return el(\"stop\", _props);\n  }\n\n  function filter(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"filter\", _props, _children);\n  }\n\n  function defs(string memory _children) internal pure returns (string memory) {\n    return el(\"defs\", \"\", _children);\n  }\n\n  function cdata(string memory _content) internal pure returns (string memory) {\n    return string.concat(\"<![CDATA[\", _content, \"]]>\");\n  }\n\n  /* GRADIENTS */\n  function radialGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"radialGradient\", _props, _children);\n  }\n\n  function linearGradient(string memory _props, string memory _children)\n    internal\n    pure\n    returns (string memory)\n  {\n    return el(\"linearGradient\", _props, _children);\n  }\n\n  function gradientStop(\n    uint256 offset,\n    string memory stopColor,\n    string memory _props\n  ) internal pure returns (string memory) {\n    return\n      el(\n        \"stop\",\n        string.concat(\n          prop(\"stop-color\", stopColor),\n          \" \",\n          prop(\"offset\", string.concat(svgUtils.uint2str(offset), \"%\")),\n          \" \",\n          _props\n        )\n      );\n  }\n\n  function animateTransform(string memory _props) internal pure returns (string memory) {\n    return el(\"animateTransform\", _props);\n  }\n\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\n    return el(\"image\", string.concat(prop(\"href\", _href), \" \", _props));\n  }\n\n  function start(string memory width, string memory height) internal pure returns (string memory) {\n    return\n      string.concat(\n        '<svg width=\"',\n        width,\n        '\" ',\n        'height=\"',\n        height,\n        '\" ',\n        'style=\"background:#FFF\" ',\n        'viewBox=\"0 0 320 190\" ',\n        'xmlns=\"http://www.w3.org/2000/svg\" ',\n        \">\"\n      );\n  }\n\n  function end() internal pure returns (bytes memory) {\n    return (\"</svg>\");\n  }\n\n  /* COMMON */\n  // A generic element, can be used to construct any SVG (or HTML) element\n  function el(\n    string memory _tag,\n    string memory _props,\n    string memory _children\n  ) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \">\", _children, \"</\", _tag, \">\");\n  }\n\n  // A generic element, can be used to construct any SVG (or HTML) element without children\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\n    return string.concat(\"<\", _tag, \" \", _props, \"/>\");\n  }\n\n  // an SVG attribute\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\n    return string.concat(_key, \"=\", '\"', _val, '\" ');\n  }\n\n  function stringifyIntSet(\n    bytes memory _data,\n    uint256 _offset,\n    uint256 _len\n  ) public pure returns (bytes memory) {\n    bytes memory res;\n    require(_data.length >= _offset + _len, \"Out of range\");\n    for (uint256 i = _offset; i < _offset + _len; i++) {\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \" \");\n    }\n    return res;\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n}\n"
    },
    "contracts/svg/svgUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport { BytesLib } from \"../libraries/BytesLib.sol\";\n\n/**\n * @title  SVG Utilities\n * @author Kames Geraghty\n * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\n */\nlibrary svgUtils {\n  using Strings for uint256;\n  using Strings for uint8;\n\n  /// @notice Empty SVG element\n  string internal constant NULL = \"\";\n\n  /**\n   * @notice Formats a CSS variable line. Includes a semicolon for formatting.\n   * @param _key User for which to calculate prize amount.\n   * @param _val User for which to calculate prize amount.\n   * @return string Generated CSS variable.\n   */\n  function setCssVar(string memory _key, string memory _val) internal pure returns (string memory) {\n    return string.concat(\"--\", _key, \":\", _val, \";\");\n  }\n\n  /**\n   * @notice Formats getting a css variable\n   * @param _key User for which to calculate prize amount.\n   * @return string Generated CSS variable.\n   */\n  function getCssVar(string memory _key) internal pure returns (string memory) {\n    return string.concat(\"var(--\", _key, \")\");\n  }\n\n  // formats getting a def URL\n  function getDefURL(string memory _id) internal pure returns (string memory) {\n    return string.concat(\"url(#\", _id, \")\");\n  }\n\n  // checks if two strings are equal\n  function stringsEqual(string memory _a, string memory _b) internal pure returns (bool) {\n    return keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\n  }\n\n  // returns the length of a string in characters\n  function utfStringLength(string memory _str) internal pure returns (uint256 length) {\n    uint256 i = 0;\n    bytes memory string_rep = bytes(_str);\n\n    while (i < string_rep.length) {\n      if (string_rep[i] >> 7 == 0) i += 1;\n      else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\n      else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\n      else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\n        i += 4;\n        //For safety\n      else i += 1;\n\n      length++;\n    }\n  }\n\n  function round2Txt(\n    uint256 _value,\n    uint8 _decimals,\n    uint8 _prec\n  ) internal pure returns (bytes memory) {\n    return\n      abi.encodePacked(\n        (_value / 10**_decimals).toString(),\n        \".\",\n        (_value / 10**(_decimals - _prec) - (_value / 10**(_decimals)) * 10**_prec).toString()\n      );\n  }\n\n  // converts an unsigned integer to a string\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n    if (_i == 0) {\n      return \"0\";\n    }\n    uint256 j = _i;\n    uint256 len;\n    while (j != 0) {\n      len++;\n      j /= 10;\n    }\n    bytes memory bstr = new bytes(len);\n    uint256 k = len;\n    while (_i != 0) {\n      k = k - 1;\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n      bytes1 b1 = bytes1(temp);\n      bstr[k] = b1;\n      _i /= 10;\n    }\n    return string(bstr);\n  }\n\n  function splitAddress(address account) internal pure returns (string memory) {\n    bytes memory start = BytesLib.slice(abi.encodePacked(account), 0, 3);\n    // bytes memory end = BytesLib.slice(abi.encodePacked(account), 2, 3);\n    // 0x761d584f1C2d43cBc3F42ECd739701a36dFFAa31\n    return string(abi.encodePacked(\"0x000\", \"...\"));\n    // return\n    // string.concat(\"0x\", string(abi.encodePacked(start)), \"...\", string(abi.encodePacked(start)));\n  }\n\n  function toString(address account) internal pure returns (string memory) {\n    return toString(abi.encodePacked(account));\n  }\n\n  function toString(uint256 value) internal pure returns (string memory) {\n    return toString(abi.encodePacked(value));\n  }\n\n  function toString(bytes32 value) internal pure returns (string memory) {\n    return toString(abi.encodePacked(value));\n  }\n\n  function toString(bytes memory data) internal pure returns (string memory) {\n    bytes memory alphabet = \"0123456789abcdef\";\n\n    bytes memory str = new bytes(2 + data.length * 2);\n    str[0] = \"0\";\n    str[1] = \"x\";\n    for (uint256 i = 0; i < data.length; i++) {\n      str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\n      str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\n    }\n    return string(str);\n  }\n\n  function getColor(bytes memory _colorHex) internal view returns (bytes memory) {\n    require(_colorHex.length == 3, \"Unknown color\");\n    return abi.encodePacked(_colorHex, hex\"64\");\n  }\n\n  function getColor(bytes memory _colorHex, uint8 _alpha) internal view returns (bytes memory) {\n    require(_colorHex.length == 3, \"Unknown color\");\n    return abi.encodePacked(_colorHex, _alpha);\n  }\n\n  function getRgba(bytes memory _colorHex) internal view returns (string memory) {\n    return string(toRgba(getColor(_colorHex), 0));\n  }\n\n  function toRgba(bytes memory _rgba, uint256 offset) internal pure returns (bytes memory) {\n    return\n      abi.encodePacked(\n        \"rgba(\",\n        byte2uint8(_rgba, offset).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 1).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 2).toString(),\n        \",\",\n        byte2uint8(_rgba, offset + 3).toString(),\n        \"%)\"\n      );\n  }\n\n  function byte2uint8(bytes memory _data, uint256 _offset) internal pure returns (uint8) {\n    require(_data.length > _offset, \"Out of range\");\n    return uint8(_data[_offset]);\n  }\n}\n"
    },
    "contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\n        internal\n    {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(\n                    add(tempBytes, lengthmod),\n                    mul(0x20, iszero(lengthmod))\n                )\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(\n                        add(\n                            add(_bytes, lengthmod),\n                            mul(0x20, iszero(lengthmod))\n                        ),\n                        _start\n                    )\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (address)\n    {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(\n                mload(add(add(_bytes, 0x20), _start)),\n                0x1000000000000000000000000\n            )\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint8)\n    {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint16)\n    {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint32)\n    {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint64)\n    {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint96)\n    {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint128)\n    {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (bytes32)\n    {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\n        internal\n        pure\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n                2\n            )\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "contracts/rendering/PoolTogetherV0Render.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\n// Global\nimport { Base64 } from \"base64-sol/base64.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { SVGLibrary } from \"@erc721k/periphery-sol/contracts/svg/SVGLibrary.sol\";\nimport { SVGRegistry } from \"@erc721k/periphery-sol/contracts/svg/SVGRegistry.sol\";\n// Local\nimport { svg } from \"../svg/svg.sol\";\nimport { svgUtils } from \"../svg/svgUtils.sol\";\n\ncontract PoolTogetherV0Render is Ownable {\n  bytes32 private constant BYTES32_WEB3_ASSETS =\n    0x574542335f415353455453000000000000000000000000000000000000000000;\n  bytes32 private constant BYTES32_TOKEN_USDC =\n    0x544f4b454e5f5553444300000000000000000000000000000000000000000000;\n  bytes32 private constant BYTES32_TOKEN_POOL =\n    0x544f4b454e5f504f4f4c00000000000000000000000000000000000000000000;\n  bytes32 private constant BYTES32_LOGO_POOL =\n    0x4c4f474f5f504f4f4c0000000000000000000000000000000000000000000000;\n  bytes32 private constant BYTES32_ICON_NETWORK_TEST =\n    0x49434f4e5f4e4554574f524b5f54455354000000000000000000000000000000;\n  bytes32 private constant BYTES32_ICON_NETWORK_ETHEREUM =\n    0x49434f4e5f4e4554574f524b5f455448455245554d0000000000000000000000;\n  bytes32 private constant BYTES32_ICON_NETWORK_OPTIMISM =\n    0x49434f4e5f4e4554574f524b5f4f5054494d49534d0000000000000000000000;\n  bytes32 private constant BYTES32_ICON_NETWORK_ARBITRUM =\n    0x49434f4e5f4e4554574f524b5f415242495452554d0000000000000000000000;\n  bytes32 private constant BYTES32_ICON_NETWORK_POLYGON =\n    0x49434f4e5f4e4554574f524b5f504f4c59474f4e000000000000000000000000;\n  string private constant ENCODING = \"data:image/svg+xml;base64, \";\n\n  address public svgLibrary;\n  address public svgRegistry;\n\n  constructor(address svgLibrary_, address svgRegistry_) {\n    svgLibrary = svgLibrary_;\n    svgRegistry = svgRegistry_;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function render(bytes memory input) external view returns (string memory) {\n    return string(abi.encodePacked(ENCODING, Base64.encode(bytes(_construct(input)))));\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n  function _construct(bytes memory input) internal view returns (string memory) {\n    (\n      address owner,\n      uint256 balance,\n      uint256 avgBalance2Weeks,\n      uint256 avgBalance8Weeks,\n      uint256 avgBalance26Weeks,\n      string memory emoji\n    ) = abi.decode(input, (address, uint256, uint256, uint256, uint256, string));\n\n    // string memory emoji = unicode\"text\";\n    string memory tagline = \"Web3 Savings Network\";\n\n    return\n      string.concat(\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"500\" height=\"300\" viewBox=\"0 0 500 300\" fill=\"#633EF7\" style=\"font-family: sans-serif;\" >',\n        svg.rect(\n          string.concat(\n            svg.prop(\"x\", \"0.00195312\"),\n            svg.prop(\"width\", \"500\"),\n            svg.prop(\"height\", \"300\"),\n            svg.prop(\"fill\", \"url(#paint0_linear_213_860)\")\n          )\n        ),\n        svg.rect(\n          string.concat(\n            svg.prop(\"x\", \"0\"),\n            svg.prop(\"width\", \"500\"),\n            svg.prop(\"height\", \"500\")\n            // svg.prop(\"fill\", string(svgUtils.getRgba(_colorFill)))\n          )\n        ),\n        '<g mask=\"url(#mask0_213_860)\"> <ellipse opacity=\"0.1\" cx=\"93\" cy=\"300\" rx=\"230\" ry=\"145\" fill=\"black\"/> <ellipse opacity=\"0.08\" cx=\"550\" cy=\"-119\" rx=\"450\" ry=\"247\" fill=\"black\"/> </g>',\n        renderHeader(balance),\n        renderFooter(owner, avgBalance8Weeks, emoji, tagline),\n        '<defs><style>.cls-1{fill:#FFF;}.text-shadow-md {text-shadow: 0px 4px 10px rgba(0, 0, 0, 0.12);}</style><linearGradient id=\"myGradient\" gradientTransform=\"rotate(90)\"> <stop offset=\"5%\" stop-color=\"gold\" /> <stop offset=\"95%\" stop-color=\"red\" /> </linearGradient></defs>',\n        \"</svg>\"\n      );\n  }\n\n  function renderHeader(uint256 balance) internal view returns (string memory) {\n    return string.concat(chanceDetails(balance), cardDetails());\n  }\n\n  function cardDetails() internal view returns (string memory) {\n    return\n      string.concat(\n        svg.g(\n          string.concat(svg.prop(\"transform\", \"translate(350,30)\")),\n          _registry(BYTES32_WEB3_ASSETS, abi.encode(BYTES32_LOGO_POOL))\n        )\n      );\n  }\n\n  function chanceDetails(uint256 balance) internal view returns (string memory) {\n    return\n      string.concat(\n        // svg.g(\n        //   string.concat(svg.prop(\"transform\", \"translate(40,50)\")),\n        //   _registry(BYTES32_WEB3_ASSETS, abi.encode(BYTES32_TOKEN_USDC))\n        // ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"7.5%\"),\n            svg.prop(\"y\", \"62.5\"),\n            svg.prop(\"font-size\", \"18\"),\n            svg.prop(\"alignment-baseline\", \"middle\"),\n            svg.prop(\"text-anchor\", \"start\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          string.concat(unicode\"🏆\", \" Chance\")\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"7.5%\"),\n            svg.prop(\"y\", \"100\"),\n            svg.prop(\"font-size\", \"32\"),\n            svg.prop(\"alignment-baseline\", \"middle\"),\n            svg.prop(\"text-anchor\", \"start\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          string(svgUtils.round2Txt(balance, 6, 2))\n        )\n      );\n  }\n\n  function avgBalanceDetails(uint256 avgBalance8Weeks) internal view returns (string memory) {\n    return\n      string.concat(\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"95%\"),\n            svg.prop(\"y\", \"50%\"),\n            svg.prop(\"font-size\", \"14\"),\n            svg.prop(\"alignment-baseline\", \"middle\"),\n            svg.prop(\"text-anchor\", \"end\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          \"Avg 60 Day Balance\"\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"95%\"),\n            svg.prop(\"y\", \"60%\"),\n            svg.prop(\"font-size\", \"24\"),\n            svg.prop(\"alignment-baseline\", \"middle\"),\n            svg.prop(\"text-anchor\", \"end\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          string(svgUtils.round2Txt(avgBalance8Weeks, 6, 2))\n        )\n      );\n  }\n\n  function renderFooter(\n    address account,\n    uint256 avgBalance8Weeks,\n    string memory emoji,\n    string memory tagline\n  ) internal view returns (string memory) {\n    return\n      string.concat(\n        accountDetails(account, emoji, tagline),\n        renderNetwork(),\n        avgBalanceDetails(avgBalance8Weeks)\n      );\n  }\n\n  function accountDetails(\n    address account,\n    string memory emoji,\n    string memory tagline\n  ) internal view returns (string memory) {\n    return\n      string.concat(\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"7.5%\"),\n            svg.prop(\"y\", \"67.5%\"),\n            svg.prop(\"font-size\", \"24\"),\n            svg.prop(\"alignment-baseline\", \"middle\"),\n            svg.prop(\"text-anchor\", \"start\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          emoji\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"7.5%\"),\n            svg.prop(\"y\", \"77.5%\"),\n            svg.prop(\"font-size\", \"28\"),\n            svg.prop(\"alignment-baseline\", \"middle\"),\n            svg.prop(\"text-anchor\", \"start\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          svgUtils.splitAddress(account)\n        ),\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"7.5%\"),\n            svg.prop(\"y\", \"87.5%\"),\n            svg.prop(\"font-size\", \"14\"),\n            svg.prop(\"font-weight\", \"300\"),\n            svg.prop(\"alignment-baseline\", \"middle\"),\n            svg.prop(\"text-anchor\", \"start\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          tagline\n        )\n      );\n  }\n\n  function renderNetwork() internal view returns (string memory) {\n    bytes32 network;\n    string memory name;\n    if (block.chainid == 1) {\n      name = \"Ethereum\";\n      network = BYTES32_ICON_NETWORK_ETHEREUM;\n    } else if (block.chainid == 10) {\n      name = \"Optimism\";\n      network = BYTES32_ICON_NETWORK_OPTIMISM;\n    } else if (block.chainid == 137) {\n      name = \"Polygon\";\n      network = BYTES32_ICON_NETWORK_POLYGON;\n    } else if (block.chainid == 42161) {\n      name = \"Arbitrum\";\n      network = BYTES32_ICON_NETWORK_ARBITRUM;\n    } else {\n      name = \"Unknown\";\n      network = BYTES32_ICON_NETWORK_TEST;\n      // network = BYTES32_ICON_NETWORK_ETHEREUM;\n    }\n\n    return\n      string.concat(\n        svg.text(\n          string.concat(\n            svg.prop(\"x\", \"85%\"),\n            svg.prop(\"y\", \"80%\"),\n            svg.prop(\"font-size\", \"18\"),\n            svg.prop(\"alignment-baseline\", \"middle\"),\n            svg.prop(\"text-anchor\", \"end\"),\n            svg.prop(\"fill\", \"white\")\n          ),\n          name\n        ),\n        svg.g(\n          string.concat(svg.prop(\"transform\", \"translate(440,225)\")),\n          _registry(BYTES32_WEB3_ASSETS, abi.encode(network))\n        )\n      );\n  }\n\n  function _lib(bytes32 _key, bytes memory _value) internal view returns (string memory) {\n    return SVGLibrary(svgLibrary).execute(_key, _value);\n  }\n\n  function _registry(bytes32 _key, bytes memory _value) internal view returns (string memory) {\n    return SVGRegistry(svgRegistry).fetch(_key, _value);\n  }\n}\n"
    },
    "contracts/Web3CardTraits.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport { IStream } from \"./interfaces/IStream.sol\";\nimport { ITraitsFetch } from \"./interfaces/ITraitsFetch.sol\";\n\n/**\n * @title Web3CardTraits\n * @author Kames Geraghty\n */\ncontract Web3CardTraits is ITraitsFetch, Ownable {\n  constructor() {}\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function fetch(bytes memory input) external view returns (string memory) {\n    return string.concat(_generateTrait(\"friend\", \"true\"));\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _generateTrait(string memory _key, string memory _value)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    return string.concat('{\"trait_type\":' '\"', _key, '\",', '\"value\":', '\"', _value, '\"}');\n  }\n\n  function _generateTraits(string[] memory _keys, string[] memory _values)\n    internal\n    pure\n    returns (string memory __traits)\n  {\n    string memory _traits = \"\";\n    for (uint256 i = 0; i < _keys.length; i++) {\n      if (bytes(_values[i]).length > 0) {\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \",\");\n      }\n    }\n    return _traits;\n  }\n}\n"
    },
    "contracts/interfaces/IStream.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IStream {\n  function count(address _address) external view returns (uint256);\n\n  function getData(address _address)\n    external\n    view\n    returns (string[] memory keys, string[] memory values);\n\n  function getValue(address _address, string memory _key) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/ITraitsFetch.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ITraitsFetch {\n  function fetch(bytes memory input) external view returns (string memory);\n}\n"
    },
    "contracts/Web3CardSvgModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"hardhat/console.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { svg } from \"@erc721k/periphery-sol/contracts/svg/svg.sol\";\nimport { svgUtils } from \"@erc721k/periphery-sol/contracts/svg/svgUtils.sol\";\nimport { SVGLibrary } from \"@erc721k/periphery-sol/contracts/svg/SVGLibrary.sol\";\nimport { ISVGModule } from \"./interfaces/ISVGModule.sol\";\n\ncontract Web3CardSvgModule is ISVGModule, Ownable {\n  SVGLibrary private _svgLibrary;\n\n  string private _encoding = \"(uint8)\";\n  bytes32 private constant BUILD = keccak256(\"BUILD\");\n  bytes32 private constant COLOR = keccak256(\"COLOR\");\n  bytes32 private constant UTILS = keccak256(\"UTILS\");\n\n  mapping(uint8 => mapping(uint8 => string)) private _elements;\n\n  constructor(address svgLibrary) {\n    _svgLibrary = SVGLibrary(svgLibrary);\n  }\n\n  function render(bytes memory input) external view override returns (string memory) {\n    return _render(input);\n  }\n\n  function getEncoding() external view override returns (string memory) {\n    return _encoding;\n  }\n\n  function getElement(uint8 element, uint8 position) external view returns (string memory) {\n    return _elements[element][position];\n  }\n\n  function setElement(\n    uint8 element,\n    uint8 position,\n    string memory svg\n  ) external onlyOwner {\n    _elements[element][position] = svg;\n  }\n\n  function _color(string memory _sig, string memory _value) internal view returns (string memory) {\n    return _svgLibrary.execute(COLOR, abi.encodeWithSignature(_sig, _value));\n  }\n\n  function _props(string memory _key, string memory _value) internal view returns (string memory) {\n    return _svgLibrary.execute(BUILD, abi.encodeWithSignature(\"prop(string,string)\", _key, _value));\n  }\n\n  function _render(bytes memory input) internal view returns (string memory) {\n    (uint8 elementType, uint8 elementId) = abi.decode(input, (uint8, uint8));\n    return _elements[elementType][elementId];\n  }\n}\n"
    },
    "contracts/interfaces/ISVGModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ISVGModule {\n  function render(bytes memory input) external view returns (string memory);\n\n  function getEncoding() external view returns (string memory);\n}\n"
    },
    "contracts/Delegatable/mock/MockDelegatableCore.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"hardhat/console.sol\";\nimport \"../DelegatableCore.sol\";\nimport {ReplayProtection} from \"../TypesAndDecoders.sol\";\n\ncontract MockDelegatableCore is DelegatableCore {\n    /// @notice The hash of the domain separator used in the EIP712 domain hash.\n    bytes32 public immutable domainHash;\n\n    constructor(string memory contractName) {\n        domainHash = getEIP712DomainHash(\n            contractName,\n            \"1\",\n            block.chainid,\n            address(this)\n        );\n    }\n\n    /* ===================================================================================== */\n    /* Helper Functions                                                                    */\n    /* ===================================================================================== */\n    function updateNonce(\n        address intendedSender,\n        uint256 queue,\n        uint256 nonce\n    ) internal {\n        multiNonce[intendedSender][queue] = nonce;\n    }\n\n    function exec() external view returns (address) {\n        return _msgSender();\n    }\n\n    address public specialSender;\n\n    function execFrom(address sender) external returns (address) {\n        specialSender = sender;\n        bytes memory data;\n        _execute(address(this), data, uint256(21000000), sender);\n    }\n\n    fallback() external payable {\n        specialSender = _msgSender();\n    }\n\n    /* ===================================================================================== */\n    /* Core Functions                                                                    */\n    /* ===================================================================================== */\n\n    function getEIP712DomainHash(\n        string memory contractName,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    ) public pure returns (bytes32) {\n        bytes memory encoded = abi.encode(\n            EIP712DOMAIN_TYPEHASH,\n            keccak256(bytes(contractName)),\n            keccak256(bytes(version)),\n            chainId,\n            verifyingContract\n        );\n        return keccak256(encoded);\n    }\n\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n        public\n        view\n        virtual\n        override(DelegatableCore)\n        returns (address)\n    {\n        Delegation memory delegation = signedDelegation.delegation;\n        bytes32 sigHash = getDelegationTypedDataHash(delegation);\n        address recoveredSignatureSigner = recover(\n            sigHash,\n            signedDelegation.signature\n        );\n        return recoveredSignatureSigner;\n    }\n\n    function getDelegationTypedDataHash(Delegation memory delegation)\n        public\n        view\n        returns (bytes32)\n    {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainHash,\n                GET_DELEGATION_PACKETHASH(delegation)\n            )\n        );\n        return digest;\n    }\n\n    function invoke(Invocation[] calldata batch, address sender)\n        external\n        returns (bool success)\n    {\n        _invoke(batch, sender);\n    }\n\n    function enforceReplayProtection(\n        address intendedSender,\n        ReplayProtection memory protection\n    ) external {\n        _enforceReplayProtection(intendedSender, protection);\n    }\n\n    function execute(\n        address to,\n        bytes memory data,\n        uint256 gasLimit,\n        address sender\n    ) internal returns (bool success) {\n        return _execute(to, data, gasLimit, sender);\n    }\n}\n"
    },
    "contracts/Delegatable/DelegatableCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { EIP712Decoder, EIP712DOMAIN_TYPEHASH } from \"./TypesAndDecoders.sol\";\nimport { Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation, Transaction, ReplayProtection, CaveatEnforcer } from \"./CaveatEnforcer.sol\";\n\nabstract contract DelegatableCore is EIP712Decoder {\n  /// @notice Account delegation nonce manager\n  mapping(address => mapping(uint256 => uint256)) internal multiNonce;\n\n  function getNonce(address intendedSender, uint256 queue) external view returns (uint256) {\n    return multiNonce[intendedSender][queue];\n  }\n\n  function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n    public\n    view\n    virtual\n    returns (address);\n\n  function _enforceReplayProtection(address intendedSender, ReplayProtection memory protection)\n    internal\n  {\n    uint256 queue = protection.queue;\n    uint256 nonce = protection.nonce;\n    require(\n      nonce == (multiNonce[intendedSender][queue] + 1),\n      \"DelegatableCore:nonce2-out-of-order\"\n    );\n    multiNonce[intendedSender][queue] = nonce;\n  }\n\n  function _execute(\n    address to,\n    bytes memory data,\n    uint256 gasLimit,\n    address sender\n  ) internal returns (bool success) {\n    bytes memory full = abi.encodePacked(data, sender);\n    assembly {\n      success := call(gasLimit, to, 0, add(full, 0x20), mload(full), 0, 0)\n    }\n  }\n\n  function _invoke(Invocation[] calldata batch, address sender) internal returns (bool success) {\n    for (uint256 x = 0; x < batch.length; x++) {\n      Invocation memory invocation = batch[x];\n      address intendedSender;\n      address canGrant;\n\n      // If there are no delegations, this invocation comes from the signer\n      if (invocation.authority.length == 0) {\n        intendedSender = sender;\n        canGrant = intendedSender;\n      }\n\n      bytes32 authHash = 0x0;\n\n      for (uint256 d = 0; d < invocation.authority.length; d++) {\n        SignedDelegation memory signedDelegation = invocation.authority[d];\n        address delegationSigner = verifyDelegationSignature(signedDelegation);\n\n        // Implied sending account is the signer of the first delegation\n        if (d == 0) {\n          intendedSender = delegationSigner;\n          canGrant = intendedSender;\n        }\n\n        require(delegationSigner == canGrant, \"DelegatableCore:invalid-delegation-signer\");\n\n        Delegation memory delegation = signedDelegation.delegation;\n        require(\n          delegation.authority == authHash,\n          \"DelegatableCore:invalid-authority-delegation-link\"\n        );\n\n        // TODO: maybe delegations should have replay protection, at least a nonce (non order dependent),\n        // otherwise once it's revoked, you can't give the exact same permission again.\n        bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(signedDelegation);\n\n        // Each delegation can include any number of caveats.\n        // A caveat is any condition that may reject a proposed transaction.\n        // The caveats specify an external contract that is passed the proposed tx,\n        // As well as some extra terms that are used to parameterize the enforcer.\n        for (uint16 y = 0; y < delegation.caveats.length; y++) {\n          CaveatEnforcer enforcer = CaveatEnforcer(delegation.caveats[y].enforcer);\n          bool caveatSuccess = enforcer.enforceCaveat(\n            delegation.caveats[y].terms,\n            invocation.transaction,\n            delegationHash\n          );\n          require(caveatSuccess, \"DelegatableCore:caveat-rejected\");\n        }\n\n        // Store the hash of this delegation in `authHash`\n        // That way the next delegation can be verified against it.\n        authHash = delegationHash;\n        canGrant = delegation.delegate;\n      }\n\n      // Here we perform the requested invocation.\n      Transaction memory transaction = invocation.transaction;\n\n      require(transaction.to == address(this), \"DelegatableCore:invalid-invocation-target\");\n\n      // TODO(@kames): Can we bubble up the error message from the enforcer? Why not? Optimizations?\n      success = _execute(transaction.to, transaction.data, transaction.gasLimit, intendedSender);\n      require(success, \"DelegatableCore::execution-failed\");\n    }\n  }\n\n  function _msgSender() internal view virtual returns (address sender) {\n    if (msg.sender == address(this)) {\n      bytes memory array = msg.data;\n      uint256 index = msg.data.length;\n      assembly {\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n      }\n    } else {\n      sender = msg.sender;\n    }\n    return sender;\n  }\n}\n"
    },
    "contracts/Delegatable/interfaces/ICaveatEnforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../TypesAndDecoders.sol\";\n\ninterface ICaveatEnforcer {\n    function enforceCaveat(\n        bytes calldata terms,\n        Transaction calldata tx,\n        bytes32 delegationHash\n    ) external virtual returns (bool);\n}\n"
    },
    "contracts/Delegatable/DelegatableRelayCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport {EIP712Decoder, EIP712DOMAIN_TYPEHASH} from \"./TypesAndDecoders.sol\";\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation, Transaction, ReplayProtection, CaveatEnforcer} from \"./CaveatEnforcer.sol\";\n\nabstract contract DelegatableRelayCore is EIP712Decoder {\n    /// @notice Account delegation nonce manager\n    mapping(address => mapping(uint256 => uint256)) internal multiNonce;\n\n    function getNonce(address intendedSender, uint256 queue)\n        external\n        view\n        returns (uint256)\n    {\n        return multiNonce[intendedSender][queue];\n    }\n\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n        public\n        view\n        virtual\n        returns (address);\n\n    function _enforceReplayProtection(\n        address intendedSender,\n        ReplayProtection memory protection\n    ) internal {\n        uint256 queue = protection.queue;\n        uint256 nonce = protection.nonce;\n        require(\n            nonce == (multiNonce[intendedSender][queue] + 1),\n            \"DelegatableCore:nonce2-out-of-order\"\n        );\n        multiNonce[intendedSender][queue] = nonce;\n    }\n\n    function _execute(\n        address to,\n        bytes memory data,\n        uint256 gasLimit,\n        address sender\n    ) internal returns (bool success) {\n        bytes memory full = abi.encodePacked(data, sender);\n        assembly {\n            success := call(gasLimit, to, 0, add(full, 0x20), mload(full), 0, 0)\n        }\n    }\n\n    function _invoke(Invocation[] calldata batch, address sender)\n        internal\n        returns (bool success)\n    {\n        for (uint256 x = 0; x < batch.length; x++) {\n            Invocation memory invocation = batch[x];\n            address intendedSender;\n            address canGrant;\n\n            // If there are no delegations, this invocation comes from the signer\n            if (invocation.authority.length == 0) {\n                intendedSender = sender;\n                canGrant = intendedSender;\n            }\n\n            bytes32 authHash = 0x0;\n\n            for (uint256 d = 0; d < invocation.authority.length; d++) {\n                SignedDelegation memory signedDelegation = invocation.authority[\n                    d\n                ];\n                address delegationSigner = verifyDelegationSignature(\n                    signedDelegation\n                );\n\n                // Implied sending account is the signer of the first delegation\n                if (d == 0) {\n                    intendedSender = delegationSigner;\n                    canGrant = intendedSender;\n                }\n\n                require(\n                    delegationSigner == canGrant,\n                    \"DelegatableCore:invalid-delegation-signer\"\n                );\n\n                Delegation memory delegation = signedDelegation.delegation;\n                require(\n                    delegation.authority == authHash,\n                    \"DelegatableCore:invalid-authority-delegation-link\"\n                );\n\n                // TODO: maybe delegations should have replay protection, at least a nonce (non order dependent),\n                // otherwise once it's revoked, you can't give the exact same permission again.\n                bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(\n                    signedDelegation\n                );\n\n                // Each delegation can include any number of caveats.\n                // A caveat is any condition that may reject a proposed transaction.\n                // The caveats specify an external contract that is passed the proposed tx,\n                // As well as some extra terms that are used to parameterize the enforcer.\n                for (uint16 y = 0; y < delegation.caveats.length; y++) {\n                    CaveatEnforcer enforcer = CaveatEnforcer(\n                        delegation.caveats[y].enforcer\n                    );\n                    bool caveatSuccess = enforcer.enforceCaveat(\n                        delegation.caveats[y].terms,\n                        invocation.transaction,\n                        delegationHash\n                    );\n                    require(caveatSuccess, \"DelegatableCore:caveat-rejected\");\n                }\n\n                // Store the hash of this delegation in `authHash`\n                // That way the next delegation can be verified against it.\n                authHash = delegationHash;\n                canGrant = delegation.delegate;\n            }\n\n            // Here we perform the requested invocation.\n            Transaction memory transaction = invocation.transaction;\n\n            // TODO(@kames): Can we bubble up the error message from the enforcer? Why not? Optimizations?\n            success = _execute(\n                transaction.to,\n                transaction.data,\n                transaction.gasLimit,\n                intendedSender\n            );\n            require(success, \"DelegatableCore::execution-failed\");\n        }\n    }\n\n    function _msgSender() internal view virtual returns (address sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/Delegatable/DelegatableRelay.sol": {
      "content": "// SPDe-License-Identifier: MIT\npragma solidity 0.8.15;\n\n// import \"hardhat/console.sol\";\nimport {EIP712DOMAIN_TYPEHASH} from \"./TypesAndDecoders.sol\";\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation} from \"./CaveatEnforcer.sol\";\nimport {DelegatableRelayCore} from \"./DelegatableRelayCore.sol\";\nimport {IDelegatable} from \"./interfaces/IDelegatable.sol\";\n\ncontract DelegatableRelay is IDelegatable, DelegatableRelayCore {\n    /// @notice The hash of the domain separator used in the EIP712 domain hash.\n    bytes32 public immutable domainHash;\n\n    /**\n     * @notice Delegatable Relay Constructor\n     */\n    constructor() {\n        domainHash = getEIP712DomainHash(\n            \"DelegatableRelay\",\n            \"1\",\n            block.chainid,\n            address(this)\n        );\n    }\n\n    /* ===================================================================================== */\n    /* External Functions                                                                    */\n    /* ===================================================================================== */\n\n    /// @inheritdoc IDelegatable\n    function getDelegationTypedDataHash(Delegation memory delegation)\n        public\n        view\n        returns (bytes32)\n    {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainHash,\n                GET_DELEGATION_PACKETHASH(delegation)\n            )\n        );\n        return digest;\n    }\n\n    /// @inheritdoc IDelegatable\n    function getInvocationsTypedDataHash(Invocations memory invocations)\n        public\n        view\n        returns (bytes32)\n    {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainHash,\n                GET_INVOCATIONS_PACKETHASH(invocations)\n            )\n        );\n        return digest;\n    }\n\n    function getEIP712DomainHash(\n        string memory contractName,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    ) public pure returns (bytes32) {\n        bytes memory encoded = abi.encode(\n            EIP712DOMAIN_TYPEHASH,\n            keccak256(bytes(contractName)),\n            keccak256(bytes(version)),\n            chainId,\n            verifyingContract\n        );\n        return keccak256(encoded);\n    }\n\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n        public\n        view\n        virtual\n        override(IDelegatable, DelegatableRelayCore)\n        returns (address)\n    {\n        Delegation memory delegation = signedDelegation.delegation;\n        bytes32 sigHash = getDelegationTypedDataHash(delegation);\n        address recoveredSignatureSigner = recover(\n            sigHash,\n            signedDelegation.signature\n        );\n        return recoveredSignatureSigner;\n    }\n\n    function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n        public\n        view\n        returns (address)\n    {\n        bytes32 sigHash = getInvocationsTypedDataHash(\n            signedInvocation.invocations\n        );\n        address recoveredSignatureSigner = recover(\n            sigHash,\n            signedInvocation.signature\n        );\n        return recoveredSignatureSigner;\n    }\n\n    // --------------------------------------\n    // WRITES\n    // --------------------------------------\n\n    /// @inheritdoc IDelegatable\n    function contractInvoke(Invocation[] calldata batch)\n        external\n        override\n        returns (bool)\n    {\n        return _invoke(batch, msg.sender);\n    }\n\n    /// @inheritdoc IDelegatable\n    function invoke(SignedInvocation[] calldata signedInvocations)\n        external\n        override\n        returns (bool success)\n    {\n        for (uint256 i = 0; i < signedInvocations.length; i++) {\n            SignedInvocation calldata signedInvocation = signedInvocations[i];\n            address invocationSigner = verifyInvocationSignature(\n                signedInvocation\n            );\n            _enforceReplayProtection(\n                invocationSigner,\n                signedInvocations[i].invocations.replayProtection\n            );\n            _invoke(signedInvocation.invocations.batch, invocationSigner);\n        }\n    }\n\n    /* ===================================================================================== */\n    /* Internal Functions                                                                    */\n    /* ===================================================================================== */\n}\n"
    },
    "contracts/Delegatable/interfaces/IDelegatable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../TypesAndDecoders.sol\";\n\ninterface IDelegatable {\n    /**\n     * @notice Allows a smart contract to submit a batch of invocations for processing, allowing itself to be the delegate.\n     * @param batch Invocation[] - The batch of invocations to process.\n     * @return success bool - Whether the batch of invocations was successfully processed.\n     */\n    function contractInvoke(Invocation[] calldata batch)\n        external\n        returns (bool);\n\n    /**\n     * @notice Allows anyone to submit a batch of signed invocations for processing.\n     * @param signedInvocations SignedInvocation[] - The batch of signed invocations to process.\n     * @return success bool - Whether the batch of invocations was successfully processed.\n     */\n    function invoke(SignedInvocation[] calldata signedInvocations)\n        external\n        returns (bool success);\n\n    /**\n     * @notice Returns the typehash for this contract's delegation signatures.\n     * @param delegation Delegation - The delegation to get the type of\n     * @return bytes32 - The type of the delegation\n     */\n    function getDelegationTypedDataHash(Delegation memory delegation)\n        external\n        view\n        returns (bytes32);\n\n    /**\n     * @notice Returns the typehash for this contract's invocation signatures.\n     * @param invocations Invocations\n     * @return bytes32 - The type of the Invocations\n     */\n    function getInvocationsTypedDataHash(Invocations memory invocations)\n        external\n        view\n        returns (bytes32);\n\n    function getEIP712DomainHash(\n        string memory contractName,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    ) external pure returns (bytes32);\n\n    /**\n     * @notice Verifies that the given invocation is valid.\n     * @param signedInvocation - The signed invocation to verify\n     * @return address - The address of the account authorizing this invocation to act on its behalf.\n     */\n    function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n        external\n        view\n        returns (address);\n\n    /**\n     * @notice Verifies that the given delegation is valid.\n     * @param signedDelegation - The delegation to verify\n     * @return address - The address of the account authorizing this delegation to act on its behalf.\n     */\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n        external\n        view\n        returns (address);\n}\n"
    },
    "contracts/Delegatable/DelegatableFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n// import \"hardhat/console.sol\";\nimport {EIP712DOMAIN_TYPEHASH} from \"./TypesAndDecoders.sol\";\nimport {Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation} from \"./CaveatEnforcer.sol\";\nimport {DelegatableCore} from \"./DelegatableCore.sol\";\nimport {IDelegatable} from \"./interfaces/IDelegatable.sol\";\n\n/* @notice AppStorage is used so ERC2535 Diamond facets do not clobber each others' storage.\n * https://eip2535diamonds.substack.com/p/keep-your-data-right-in-eip2535-diamonds?utm_source=substack&utm_campaign=post_embed&utm_medium=web\n */\nstruct AppStorage {\n    bytes32 eip712domainTypeHash;\n}\n\ncontract DelegatableFacet is IDelegatable, DelegatableCore {\n    AppStorage internal s;\n\n    /* ===================================================================================== */\n    /* External Functions                                                                    */\n    /* ===================================================================================== */\n\n    /**\n     * @notice Typehash Initializer - To be called by a diamond after facet assignment.\n     * Yes, anyone can assign the facet's own name, but it doesn't do anything, so it's fine.\n     */\n    function setDomainHash(string calldata contractName) public {\n        s.eip712domainTypeHash = getEIP712DomainHash(\n            contractName,\n            \"1\",\n            block.chainid,\n            address(this)\n        );\n    }\n\n    /**\n     * @notice Domain Hash Getter\n     * @return bytes32 - The domain hash of the calling contract.\n     */\n    function getEIP712DomainHash() public view returns (bytes32) {\n        bytes32 domainHash = s.eip712domainTypeHash;\n        require(domainHash != 0, \"Domain hash not set\");\n        return domainHash;\n    }\n\n    /// @inheritdoc IDelegatable\n    function getDelegationTypedDataHash(Delegation memory delegation)\n        public\n        view\n        returns (bytes32)\n    {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                getEIP712DomainHash(),\n                GET_DELEGATION_PACKETHASH(delegation)\n            )\n        );\n        return digest;\n    }\n\n    /// @inheritdoc IDelegatable\n    function getInvocationsTypedDataHash(Invocations memory invocations)\n        public\n        view\n        returns (bytes32)\n    {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                getEIP712DomainHash(),\n                GET_INVOCATIONS_PACKETHASH(invocations)\n            )\n        );\n        return digest;\n    }\n\n    function getEIP712DomainHash(\n        string memory contractName,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    ) public pure returns (bytes32) {\n        bytes memory encoded = abi.encode(\n            EIP712DOMAIN_TYPEHASH,\n            keccak256(bytes(contractName)),\n            keccak256(bytes(version)),\n            chainId,\n            verifyingContract\n        );\n        return keccak256(encoded);\n    }\n\n    function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n        public\n        view\n        virtual\n        override(IDelegatable, DelegatableCore)\n        returns (address)\n    {\n        Delegation memory delegation = signedDelegation.delegation;\n        bytes32 sigHash = getDelegationTypedDataHash(delegation);\n        address recoveredSignatureSigner = recover(\n            sigHash,\n            signedDelegation.signature\n        );\n        return recoveredSignatureSigner;\n    }\n\n    function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n        public\n        view\n        returns (address)\n    {\n        bytes32 sigHash = getInvocationsTypedDataHash(\n            signedInvocation.invocations\n        );\n        address recoveredSignatureSigner = recover(\n            sigHash,\n            signedInvocation.signature\n        );\n        return recoveredSignatureSigner;\n    }\n\n    // --------------------------------------\n    // WRITES\n    // --------------------------------------\n\n    /// @inheritdoc IDelegatable\n    function contractInvoke(Invocation[] calldata batch)\n        external\n        override\n        returns (bool)\n    {\n        return _invoke(batch, msg.sender);\n    }\n\n    /// @inheritdoc IDelegatable\n    function invoke(SignedInvocation[] calldata signedInvocations)\n        external\n        override\n        returns (bool success)\n    {\n        for (uint256 i = 0; i < signedInvocations.length; i++) {\n            SignedInvocation calldata signedInvocation = signedInvocations[i];\n            address invocationSigner = verifyInvocationSignature(\n                signedInvocation\n            );\n            _enforceReplayProtection(\n                invocationSigner,\n                signedInvocations[i].invocations.replayProtection\n            );\n            _invoke(signedInvocation.invocations.batch, invocationSigner);\n        }\n    }\n\n    /*\n     * @notice Overrides the msgSender to enable delegation message signing.\n     * @returns address - The account whose authority is being acted on.\n     */\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(DelegatableCore)\n        returns (address sender)\n    {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n\n    /* ===================================================================================== */\n    /* Internal Functions                                                                    */\n    /* ===================================================================================== */\n}\n"
    },
    "contracts/Delegatable/Delegatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { EIP712DOMAIN_TYPEHASH } from \"./TypesAndDecoders.sol\";\nimport { Delegation, Invocation, Invocations, SignedInvocation, SignedDelegation } from \"./CaveatEnforcer.sol\";\nimport { DelegatableCore } from \"./DelegatableCore.sol\";\nimport { IDelegatable } from \"./interfaces/IDelegatable.sol\";\n\nabstract contract Delegatable is IDelegatable, DelegatableCore {\n  /// @notice The hash of the domain separator used in the EIP712 domain hash.\n  bytes32 public immutable domainHash;\n\n  /**\n   * @notice Delegatable Constructor\n   * @param contractName string - The name of the contract\n   * @param version string - The version of the contract\n   */\n  constructor(string memory contractName, string memory version) {\n    domainHash = getEIP712DomainHash(contractName, version, block.chainid, address(this));\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  /// @inheritdoc IDelegatable\n  function getDelegationTypedDataHash(Delegation memory delegation) public view returns (bytes32) {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_DELEGATION_PACKETHASH(delegation))\n    );\n    return digest;\n  }\n\n  /// @inheritdoc IDelegatable\n  function getInvocationsTypedDataHash(Invocations memory invocations)\n    public\n    view\n    returns (bytes32)\n  {\n    bytes32 digest = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", domainHash, GET_INVOCATIONS_PACKETHASH(invocations))\n    );\n    return digest;\n  }\n\n  function getEIP712DomainHash(\n    string memory contractName,\n    string memory version,\n    uint256 chainId,\n    address verifyingContract\n  ) public pure returns (bytes32) {\n    bytes memory encoded = abi.encode(\n      EIP712DOMAIN_TYPEHASH,\n      keccak256(bytes(contractName)),\n      keccak256(bytes(version)),\n      chainId,\n      verifyingContract\n    );\n    return keccak256(encoded);\n  }\n\n  function verifyDelegationSignature(SignedDelegation memory signedDelegation)\n    public\n    view\n    virtual\n    override(IDelegatable, DelegatableCore)\n    returns (address)\n  {\n    Delegation memory delegation = signedDelegation.delegation;\n    bytes32 sigHash = getDelegationTypedDataHash(delegation);\n    address recoveredSignatureSigner = recover(sigHash, signedDelegation.signature);\n    return recoveredSignatureSigner;\n  }\n\n  function verifyInvocationSignature(SignedInvocation memory signedInvocation)\n    public\n    view\n    returns (address)\n  {\n    bytes32 sigHash = getInvocationsTypedDataHash(signedInvocation.invocations);\n    address recoveredSignatureSigner = recover(sigHash, signedInvocation.signature);\n    return recoveredSignatureSigner;\n  }\n\n  // --------------------------------------\n  // WRITES\n  // --------------------------------------\n\n  /// @inheritdoc IDelegatable\n  function contractInvoke(Invocation[] calldata batch) external override returns (bool) {\n    return _invoke(batch, msg.sender);\n  }\n\n  /// @inheritdoc IDelegatable\n  function invoke(SignedInvocation[] calldata signedInvocations)\n    external\n    override\n    returns (bool success)\n  {\n    for (uint256 i = 0; i < signedInvocations.length; i++) {\n      SignedInvocation calldata signedInvocation = signedInvocations[i];\n      address invocationSigner = verifyInvocationSignature(signedInvocation);\n      _enforceReplayProtection(invocationSigner, signedInvocations[i].invocations.replayProtection);\n      _invoke(signedInvocation.invocations.batch, invocationSigner);\n    }\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n}\n"
    },
    "contracts/DelegatableERC721Controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n// import \"hardhat/console.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { Ownable, Context } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Delegatable, DelegatableCore } from \"./Delegatable/Delegatable.sol\";\n\ninterface IERC721Mintable {\n  function mint(address to) external;\n\n  function burn(uint256 tokenId) external;\n}\n\ncontract DelegatableERC721Controller is Ownable, AccessControl, Delegatable {\n  address public erc721TokenAddress;\n  bytes32 public constant CONTROLLER_ROLE = keccak256(\"CONTROLLER_ROLE\");\n\n  constructor(address _erc721TokenAddress, address admin)\n    Delegatable(\"DelegatableERC721Controller\", \"1\")\n  {\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _setupRole(CONTROLLER_ROLE, admin);\n    erc721TokenAddress = _erc721TokenAddress;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function controllerMint(address account) external virtual {\n    require(hasRole(CONTROLLER_ROLE, _msgSender()), \"DistrictController:unauthorized\");\n    IERC721Mintable(erc721TokenAddress).mint(account);\n  }\n\n  function controllerBurn(uint256 tokenId) external virtual {\n    require(hasRole(CONTROLLER_ROLE, _msgSender()), \"DistrictController:unauthorized\");\n    IERC721Mintable(erc721TokenAddress).burn(tokenId);\n  }\n\n  function grantMinterRole(address _minter) external virtual onlyOwner {\n    grantRole(CONTROLLER_ROLE, _minter);\n  }\n\n  function revokeMinter(address _minter) external virtual onlyOwner {\n    revokeRole(CONTROLLER_ROLE, _minter);\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _msgSender()\n    internal\n    view\n    virtual\n    override(Context, DelegatableCore)\n    returns (address sender)\n  {\n    if (msg.sender == address(this)) {\n      bytes memory array = msg.data;\n      uint256 index = msg.data.length;\n      assembly {\n        sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n      }\n    } else {\n      sender = msg.sender;\n    }\n    return sender;\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/Web3Card.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { ERC721K } from \"@erc721k/core-sol/contracts/ERC721K.sol\";\nimport { ERC721Storage } from \"@erc721k/core-sol/contracts/ERC721Storage.sol\";\nimport { AccessControl } from \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport { ISVGRender } from \"./interfaces/ISVGRender.sol\";\nimport { ERC20TWAB } from \"./ERC20TWAB.sol\";\nimport { Web3CardStorage } from \"./Web3CardStorage.sol\";\n\ncontract Web3Card is ERC721K, AccessControl {\n  bytes32 public constant MINTER_BURNER_ROLE = keccak256(\"MINTER_BURNER_ROLE\");\n\n  mapping(address => uint256) private _tokenOwners;\n\n  constructor(\n    string memory name,\n    string memory symbol,\n    address erc721Storage\n  ) ERC721K(name, symbol, erc721Storage) {}\n\n  /* ===================================================================================== */\n  /* Override Functions                                                                    */\n  /* ===================================================================================== */\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC721K, AccessControl)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n    address owner = _ownerOf[tokenId];\n    if (owner == address(0)) {\n      return address(0);\n    }\n    return owner;\n  }\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  // --------------------------------------\n  // READS\n  // --------------------------------------\n\n  function preview(address account) external view returns (string memory) {\n    bytes memory imageBytes = Web3CardStorage(_erc721Storage).getImageBytes(1);\n    return ISVGRender(ERC721Storage(_erc721Storage).getSvgRender()).render(imageBytes);\n  }\n\n  // --------------------------------------\n  // WRITES\n  // --------------------------------------\n\n  /**\n   * @notice Mints a new token to the given address\n   * @param to address - Address to mint to`\n   */\n  function mint(address to) external {\n    require(hasRole(MINTER_BURNER_ROLE, _msgSender()), \"DiscoERC721:unauthorized\");\n    unchecked {\n      uint256 nextId = _idCounter++;\n      _tokenOwners[to] = nextId;\n      _mint(to, _idCounter++);\n    }\n  }\n\n  /**\n   * @notice Burns a token\n   * @param tokenId uint256 - Token ID to burn\n   */\n  function burn(uint256 tokenId) external {\n    require(hasRole(MINTER_BURNER_ROLE, _msgSender()), \"DiscoERC721:unauthorized\");\n    _burn(tokenId);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    super.transferFrom(from, to, tokenId);\n  }\n\n  /* ===================================================================================== */\n  /* Internal Functions                                                                    */\n  /* ===================================================================================== */\n\n  function _tokenData(uint256 _tokenId)\n    internal\n    view\n    virtual\n    override\n    returns (bytes memory, bytes memory)\n  {\n    bytes memory imageBytes = Web3CardStorage(_erc721Storage).getImageBytes(_tokenId);\n    bytes memory traitsBytes = Web3CardStorage(_erc721Storage).getTraitsBytes(_tokenId);\n    return (imageBytes, traitsBytes);\n  }\n}\n"
    },
    "contracts/interfaces/ISVGRender.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ISVGRender {\n  function render(bytes memory input) external view returns (string memory);\n}\n"
    },
    "contracts/Delegatable/extensions/ERC20Delegatable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../Delegatable.sol\";\n\ncontract ERC20Delegatable is ERC20, Delegatable {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 amount\n    ) Delegatable(name, \"1\") ERC20(name, symbol) {\n        _mint(msg.sender, amount);\n    }\n\n    function _msgSender()\n        internal\n        view\n        override(DelegatableCore, Context)\n        returns (address sender)\n    {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/Delegatable/test/DelegatableOwnable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../Delegatable.sol\";\n\ncontract DelegatableOwnable is Delegatable, Ownable {\n    constructor(string memory name) Delegatable(name, \"1\") {}\n\n    string public purpose = \"What is my purpose?\";\n\n    function setPurpose(string calldata newPurpose) external onlyOwner {\n        purpose = newPurpose;\n    }\n\n    function _msgSender()\n        internal\n        view\n        override(DelegatableCore, Context)\n        returns (address sender)\n    {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/Delegatable/mock/MockRelayedDelegatable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../Delegatable.sol\";\n\ncontract MockRelayedDelegatable is Ownable {\n    string public purpose = \"What is my purpose?\";\n    address public trustedRelay;\n\n    constructor(address _trustedRelay) {\n        trustedRelay = _trustedRelay;\n    }\n\n    function setPurpose(string memory purpose_) public onlyOwner {\n        purpose = purpose_;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context)\n        returns (address sender)\n    {\n        if (msg.sender == trustedRelay) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/Delegatable/mock/MockPurposeFacet.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../Delegatable.sol\";\nimport \"../diamond/libraries/LibDiamond.sol\";\n\nstruct AppStorage {\n    string purpose;\n}\n\ncontract MockPurposeFacet {\n    AppStorage internal s;\n\n    function purpose() public view returns (string memory) {\n        return s.purpose;\n    }\n\n    function setPurpose(string memory purpose_) public {\n        LibDiamond.enforceIsContractOwner();\n        s.purpose = purpose_;\n    }\n}\n"
    },
    "contracts/Delegatable/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION =\n        keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage()\n        internal\n        pure\n        returns (DiamondStorage storage ds)\n    {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(\n            _msgSender() == diamondStorage().contractOwner,\n            \"LibDiamond: Must be contract owner\"\n        );\n    }\n\n    event DiamondCut(\n        IDiamondCut.FacetCut[] _diamondCut,\n        address _init,\n        bytes _calldata\n    );\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (\n            uint256 facetIndex;\n            facetIndex < _diamondCut.length;\n            facetIndex++\n        ) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(\n                    _diamondCut[facetIndex].facetAddress,\n                    _diamondCut[facetIndex].functionSelectors\n                );\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Add facet can't be address(0)\"\n        );\n        uint96 selectorPosition = uint96(\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\n        );\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            require(\n                oldFacetAddress == address(0),\n                \"LibDiamondCut: Can't add function that already exists\"\n            );\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Add facet can't be address(0)\"\n        );\n        uint96 selectorPosition = uint96(\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\n        );\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            require(\n                oldFacetAddress != _facetAddress,\n                \"LibDiamondCut: Can't replace function with same function\"\n            );\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(\n        address _facetAddress,\n        bytes4[] memory _functionSelectors\n    ) internal {\n        require(\n            _functionSelectors.length > 0,\n            \"LibDiamondCut: No selectors in facet to cut\"\n        );\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(\n            _facetAddress == address(0),\n            \"LibDiamondCut: Remove facet address must be address(0)\"\n        );\n        for (\n            uint256 selectorIndex;\n            selectorIndex < _functionSelectors.length;\n            selectorIndex++\n        ) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds\n                .selectorToFacetAndPosition[selector]\n                .facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress)\n        internal\n    {\n        enforceHasContractCode(\n            _facetAddress,\n            \"LibDiamondCut: New facet has no code\"\n        );\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\n            .facetAddresses\n            .length;\n        ds.facetAddresses.push(_facetAddress);\n    }\n\n    function addFunction(\n        DiamondStorage storage ds,\n        bytes4 _selector,\n        uint96 _selectorPosition,\n        address _facetAddress\n    ) internal {\n        ds\n            .selectorToFacetAndPosition[_selector]\n            .functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\n            _selector\n        );\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(\n        DiamondStorage storage ds,\n        address _facetAddress,\n        bytes4 _selector\n    ) internal {\n        require(\n            _facetAddress != address(0),\n            \"LibDiamondCut: Can't remove function that doesn't exist\"\n        );\n        // an immutable function is a function defined directly in a diamond\n        require(\n            _facetAddress != address(this),\n            \"LibDiamondCut: Can't remove immutable function\"\n        );\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds\n            .selectorToFacetAndPosition[_selector]\n            .functionSelectorPosition;\n        uint256 lastSelectorPosition = ds\n            .facetFunctionSelectors[_facetAddress]\n            .functionSelectors\n            .length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds\n                .facetFunctionSelectors[_facetAddress]\n                .functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\n                    selectorPosition\n                ] = lastSelector;\n            ds\n                .selectorToFacetAndPosition[lastSelector]\n                .functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds\n                .facetFunctionSelectors[_facetAddress]\n                .facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[\n                    lastFacetAddressPosition\n                ];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds\n                    .facetFunctionSelectors[lastFacetAddress]\n                    .facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds\n                .facetFunctionSelectors[_facetAddress]\n                .facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata)\n        internal\n    {\n        if (_init == address(0)) {\n            require(\n                _calldata.length == 0,\n                \"LibDiamondCut: _init is address(0) but_calldata is not empty\"\n            );\n        } else {\n            require(\n                _calldata.length > 0,\n                \"LibDiamondCut: _calldata is empty but _init is not address(0)\"\n            );\n            if (_init != address(this)) {\n                enforceHasContractCode(\n                    _init,\n                    \"LibDiamondCut: _init address has no code\"\n                );\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(\n        address _contract,\n        string memory _errorMessage\n    ) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n\n    /*\n     * @notice Overrides the msgSender to enable delegation message signing.\n     * @returns address - The account whose authority is being acted on.\n     */\n    function _msgSender() internal view returns (address sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/Delegatable/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {\n        Add,\n        Replace,\n        Remove\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "contracts/Delegatable/diamond/upgradeInitializers/DiamondInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n*\n* Implementation of a diamond.\n/******************************************************************************/\n\nimport {LibDiamond} from \"../libraries/LibDiamond.sol\";\nimport {IDiamondLoupe} from \"../interfaces/IDiamondLoupe.sol\";\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\nimport {IERC173} from \"../interfaces/IERC173.sol\";\nimport {IERC165} from \"../interfaces/IERC165.sol\";\n\n// It is expected that this contract is customized if you want to deploy your diamond\n// with data from a deployment script. Use the init function to initialize state variables\n// of your diamond. Add parameters to the init funciton if you need to.\n\ncontract DiamondInit {\n    // You can add parameters to this function in order to pass in\n    // data to set your own state variables\n    function init() external {\n        // adding ERC165 data\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\n\n        // add your own state variables\n        // EIP-2535 specifies that the `diamondCut` function takes two optional\n        // arguments: address _init and bytes calldata _calldata\n        // These arguments are used to execute an arbitrary function using delegatecall\n        // in order to set state variables in the diamond during deployment or an upgrade\n        // More info here: https://eips.ethereum.org/EIPS/eip-2535#diamond-interface\n    }\n}\n"
    },
    "contracts/Delegatable/diamond/interfaces/IDiamondLoupe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet)\n        external\n        view\n        returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses()\n        external\n        view\n        returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector)\n        external\n        view\n        returns (address facetAddress_);\n}\n"
    },
    "contracts/Delegatable/diamond/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ERC-173 Contract Ownership Standard\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\n/* is ERC165 */\ninterface IERC173 {\n    /// @dev This emits when ownership of a contract changes.\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /// @notice Get the address of the owner\n    /// @return owner_ The address of the owner.\n    function owner() external view returns (address owner_);\n\n    /// @notice Set the address of the new owner of the contract\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\n    /// @param _newOwner The address of the new owner of the contract\n    function transferOwnership(address _newOwner) external;\n}\n"
    },
    "contracts/Delegatable/diamond/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceId The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Delegatable/diamond/facets/DiamondLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport {LibDiamond} from \"../libraries/LibDiamond.sol\";\nimport {IDiamondLoupe} from \"../interfaces/IDiamondLoupe.sol\";\nimport {IERC165} from \"../interfaces/IERC165.sol\";\n\n// The functions in DiamondLoupeFacet MUST be added to a diamond.\n// The EIP-2535 Diamond standard requires these functions.\n\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\n    // Diamond Loupe Functions\n    ////////////////////////////////////////////////////////////////////\n    /// These functions are expected to be called frequently by tools.\n    //\n    // struct Facet {\n    //     address facetAddress;\n    //     bytes4[] functionSelectors;\n    // }\n\n    /// @notice Gets all facets and their selectors.\n    /// @return facets_ Facet\n    function facets() external view override returns (Facet[] memory facets_) {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        uint256 numFacets = ds.facetAddresses.length;\n        facets_ = new Facet[](numFacets);\n        for (uint256 i; i < numFacets; i++) {\n            address facetAddress_ = ds.facetAddresses[i];\n            facets_[i].facetAddress = facetAddress_;\n            facets_[i].functionSelectors = ds\n                .facetFunctionSelectors[facetAddress_]\n                .functionSelectors;\n        }\n    }\n\n    /// @notice Gets all the function selectors provided by a facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet)\n        external\n        view\n        override\n        returns (bytes4[] memory facetFunctionSelectors_)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetFunctionSelectors_ = ds\n            .facetFunctionSelectors[_facet]\n            .functionSelectors;\n    }\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses()\n        external\n        view\n        override\n        returns (address[] memory facetAddresses_)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetAddresses_ = ds.facetAddresses;\n    }\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector)\n        external\n        view\n        override\n        returns (address facetAddress_)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        facetAddress_ = ds\n            .selectorToFacetAndPosition[_functionSelector]\n            .facetAddress;\n    }\n\n    // This implements ERC-165.\n    function supportsInterface(bytes4 _interfaceId)\n        external\n        view\n        override\n        returns (bool)\n    {\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        return ds.supportedInterfaces[_interfaceId];\n    }\n}\n"
    },
    "contracts/Delegatable/diamond/facets/OwnershipFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {LibDiamond} from \"../libraries/LibDiamond.sol\";\nimport {IERC173} from \"../interfaces/IERC173.sol\";\n\ncontract OwnershipFacet is IERC173 {\n    function transferOwnership(address _newOwner) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.setContractOwner(_newOwner);\n    }\n\n    function owner() external view override returns (address owner_) {\n        owner_ = LibDiamond.contractOwner();\n    }\n}\n"
    },
    "contracts/Delegatable/diamond/facets/DiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\nimport {LibDiamond} from \"../libraries/LibDiamond.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\ncontract DiamondCutFacet is IDiamondCut {\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\n    }\n}\n"
    },
    "contracts/Delegatable/diamond/Diamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n*\n* Implementation of a diamond.\n/******************************************************************************/\n\nimport {LibDiamond} from \"./libraries/LibDiamond.sol\";\nimport {IDiamondCut} from \"./interfaces/IDiamondCut.sol\";\n\ncontract Diamond {\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\n        LibDiamond.setContractOwner(_contractOwner);\n\n        // Add the diamondCut external function from the diamondCutFacet\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\n        bytes4[] memory functionSelectors = new bytes4[](1);\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        cut[0] = IDiamondCut.FacetCut({\n            facetAddress: _diamondCutFacet,\n            action: IDiamondCut.FacetCutAction.Add,\n            functionSelectors: functionSelectors\n        });\n        LibDiamond.diamondCut(cut, address(0), \"\");\n    }\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        LibDiamond.DiamondStorage storage ds;\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\n        // get diamond storage\n        assembly {\n            ds.slot := position\n        }\n        // get facet from function selector\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        // Execute external function from facet using delegatecall and return any value.\n        assembly {\n            // copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n            // execute function call using the facet\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n            // get any return value\n            returndatacopy(0, 0, returndatasize())\n            // return any return value or error back to the caller\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/Delegatable/mock/MockDelegatable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../Delegatable.sol\";\n\ncontract MockDelegatable is Delegatable, Ownable {\n    string public purpose = \"What is my purpose?\";\n\n    constructor(string memory contractName) Delegatable(contractName, \"1\") {}\n\n    function setPurpose(string memory purpose_) public onlyOwner {\n        purpose = purpose_;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(DelegatableCore, Context)\n        returns (address sender)\n    {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/Delegatable/enforcers/RevocationEnforcer.sol": {
      "content": "pragma solidity ^0.8.15;\n//SPDX-License-Identifier: MIT\n\nimport \"../CaveatEnforcer.sol\";\nimport \"../Delegatable.sol\";\nimport \"hardhat/console.sol\";\n\ncontract RevocationEnforcer is\n    CaveatEnforcer,\n    Delegatable(\"RevocationEnforcer\", \"1\")\n{\n    mapping(bytes32 => bool) isRevoked;\n\n    function enforceCaveat(\n        bytes calldata _terms,\n        Transaction calldata _transaction,\n        bytes32 delegationHash\n    ) public view override returns (bool) {\n        require(!isRevoked[delegationHash], \"RevocationEnforcer:revoked\");\n        return true;\n    }\n\n    function revokeDelegation(\n        SignedDelegation calldata signedDelegation,\n        bytes32 domainHash\n    ) public {\n        address signer = verifyExternalDelegationSignature(\n            signedDelegation,\n            domainHash\n        );\n        address sender = _msgSender();\n        console.log(\"Sender is \", sender);\n        console.log(\"signer is \", signer);\n        console.log(\"msg sender is \", msg.sender);\n        require(signer == sender, \"RevocationEnforcer:invalid-revoker\");\n        bytes32 delegationHash = GET_SIGNEDDELEGATION_PACKETHASH(\n            signedDelegation\n        );\n        isRevoked[delegationHash] = true;\n    }\n\n    function verifyExternalDelegationSignature(\n        SignedDelegation memory signedDelegation,\n        bytes32 domainHash\n    ) public view virtual returns (address) {\n        Delegation memory delegation = signedDelegation.delegation;\n        bytes32 sigHash = getExternalDelegationTypedDataHash(\n            delegation,\n            domainHash\n        );\n        address recoveredSignatureSigner = recover(\n            sigHash,\n            signedDelegation.signature\n        );\n        return recoveredSignatureSigner;\n    }\n\n    function getExternalDelegationTypedDataHash(\n        Delegation memory delegation,\n        bytes32 domainHash\n    ) public pure returns (bytes32) {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainHash,\n                GET_DELEGATION_PACKETHASH(delegation)\n            )\n        );\n        return digest;\n    }\n\n    /**\n     * This is boilerplate that must be added to any Delegatable contract if it also inherits\n     * from another class that also implements _msgSender().\n     */\n    function _msgSender() internal view override returns (address sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/ERC721K.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ERC721 } from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport { ERC721Storage } from \"@erc721k/core-sol/contracts/ERC721Storage.sol\";\n\n/**\n * @title ERC721K\n * @author Kames Geraghty\n */\nabstract contract ERC721K is ERC721, Ownable {\n  /// @notice ID counter for ERC721 tokens\n  uint256 internal _idCounter;\n\n  /// @notice ErC721Storage instance\n  address internal _erc721Storage;\n\n  event ERC721StorageUpdated(address erc721Storage);\n\n  /**\n   * @notice ERC721K Construction\n   * @param name_ string - Name of ERC721 token\n   * @param symbol_ string - Symbol of ERC721 token\n   * @param _erc721Storage_ address - Metadata instance\n   */\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    address _erc721Storage_\n  ) ERC721(name_, symbol_) {\n    _erc721Storage = _erc721Storage_;\n  }\n\n  /* ===================================================================================== */\n  /* EIP Functions                                                                     */\n  /* ===================================================================================== */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC721)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  /* ===================================================================================== */\n  /* Virtual Functions                                                                     */\n  /* ===================================================================================== */\n  function _tokenData(uint256 tokenId)\n    internal\n    view\n    virtual\n    returns (bytes memory imageBytes, bytes memory traitsBytes);\n\n  /* ===================================================================================== */\n  /* External Functions                                                                    */\n  /* ===================================================================================== */\n\n  function contractURI() external view returns (string memory) {\n    return ERC721Storage(_erc721Storage).constructContractURI();\n  }\n\n  function totalSupply() external view returns (uint256) {\n    return _idCounter;\n  }\n\n  function getERC721Storage() external view returns (address) {\n    return _erc721Storage;\n  }\n\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    (bytes memory imageBytes, bytes memory traitsBytes) = _tokenData(tokenId);\n    return ERC721Storage(_erc721Storage).constructTokenURI(tokenId, imageBytes, traitsBytes);\n  }\n\n  /* ====================================== */\n  /* Writes\n  /* ====================================== */\n\n  function setStorage(address erc721Storage) external onlyOwner {\n    _erc721Storage = erc721Storage;\n    emit ERC721StorageUpdated(erc721Storage);\n  }\n}\n"
    },
    "contracts/Delegatable/enforcers/BlockNumberEnforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../CaveatEnforcer.sol\";\nimport {BytesLib} from \"../libraries/BytesLib.sol\";\n\ncontract BlockNumberEnforcer is CaveatEnforcer {\n    /**\n     * @notice Allows the delegator to specify the latest block the delegation will be valid.\n     * @param terms - The range of blocks this delegation is valid. See test for example.\n     * @param transaction - The transaction the delegate might try to perform.\n     * @param delegationHash - The hash of the delegation being operated on.\n     */\n    function enforceCaveat(\n        bytes calldata terms,\n        Transaction calldata transaction,\n        bytes32 delegationHash\n    ) public override returns (bool) {\n        uint128 logicOperator = BytesLib.toUint128(terms, 0);\n        uint128 blockExpiration = BytesLib.toUint128(terms, 16);\n        if (logicOperator == 0) {\n            if (blockExpiration < block.number) {\n                return true;\n            } else {\n                revert(\"BlockNumberEnforcer:expired-delegation\");\n            }\n        } else {\n            if (blockExpiration > block.number) {\n                return true;\n            } else {\n                revert(\"BlockNumberEnforcer:early-delegation\");\n            }\n        }\n    }\n}\n"
    },
    "contracts/Delegatable/interfaces/IERC1271Wallet.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../CaveatEnforcer.sol\";\n\ninterface IERC1271Wallet {\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\n        external\n        view\n        returns (bytes4);\n}\n"
    },
    "contracts/Delegatable/enforcers/EIP1271Enforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../CaveatEnforcer.sol\";\nimport {IERC1271Wallet} from \"../interfaces/IERC1271Wallet.sol\";\n\ncontract EIP1271Enforcer is CaveatEnforcer {\n    function enforceCaveat(\n        bytes calldata terms,\n        Transaction calldata transaction,\n        bytes32 delegationHash\n    ) public override returns (bool) {\n        return true;\n    }\n\n    function _callERC1271isValidSignature(\n        address _addr,\n        bytes32 _hash,\n        bytes calldata _signature\n    ) internal view {\n        bytes4 result = IERC1271Wallet(_addr).isValidSignature(\n            _hash,\n            _signature\n        );\n        require(result == 0x1626ba7e, \"INVALID_SIGNATURE\");\n    }\n}\n"
    },
    "contracts/Delegatable/enforcers/AllowedMethodsEnforcer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../CaveatEnforcer.sol\";\n\ncontract AllowedMethodsEnforcer is CaveatEnforcer {\n    /**\n     * @notice Allows the delegator to limit what methods the delegate may call.\n     * @param terms - A series of 4byte method identifiers, representing the methods that the delegate is allowed to call.\n     * @param transaction - The transaction the delegate might try to perform.\n     * @param delegationHash - The hash of the delegation being operated on.\n     */\n    function enforceCaveat(\n        bytes calldata terms,\n        Transaction calldata transaction,\n        bytes32 delegationHash\n    ) public pure override returns (bool) {\n        bytes4 targetSig = bytes4(transaction.data[0:4]);\n        for (uint256 i = 0; i < terms.length; i += 4) {\n            bytes4 allowedSig = bytes4(terms[i:i + 4]);\n            if (allowedSig == targetSig) {\n                return true;\n            }\n        }\n        revert(\"AllowedMethodsEnforcer:method-not-allowed\");\n    }\n}\n"
    },
    "contracts/Delegatable/diamond/facets/Test1Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Test1Facet {\n    event TestEvent(address something);\n\n    function test1Func1() external {}\n\n    function test1Func2() external {}\n\n    function test1Func3() external {}\n\n    function test1Func4() external {}\n\n    function test1Func5() external {}\n\n    function test1Func6() external {}\n\n    function test1Func7() external {}\n\n    function test1Func8() external {}\n\n    function test1Func9() external {}\n\n    function test1Func10() external {}\n\n    function test1Func11() external {}\n\n    function test1Func12() external {}\n\n    function test1Func13() external {}\n\n    function test1Func14() external {}\n\n    function test1Func15() external {}\n\n    function test1Func16() external {}\n\n    function test1Func17() external {}\n\n    function test1Func18() external {}\n\n    function test1Func19() external {}\n\n    function test1Func20() external {}\n\n    function supportsInterface(bytes4 _interfaceID)\n        external\n        view\n        returns (bool)\n    {}\n}\n"
    },
    "contracts/Delegatable/diamond/facets/Test2Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Test2Facet {\n    function test2Func1() external {}\n\n    function test2Func2() external {}\n\n    function test2Func3() external {}\n\n    function test2Func4() external {}\n\n    function test2Func5() external {}\n\n    function test2Func6() external {}\n\n    function test2Func7() external {}\n\n    function test2Func8() external {}\n\n    function test2Func9() external {}\n\n    function test2Func10() external {}\n\n    function test2Func11() external {}\n\n    function test2Func12() external {}\n\n    function test2Func13() external {}\n\n    function test2Func14() external {}\n\n    function test2Func15() external {}\n\n    function test2Func16() external {}\n\n    function test2Func17() external {}\n\n    function test2Func18() external {}\n\n    function test2Func19() external {}\n\n    function test2Func20() external {}\n}\n"
    },
    "contracts/Delegatable/test/EIP1271.sol": {
      "content": "pragma solidity 0.8.15;\n\n//SPDX-License-Identifier: MIT\n\ncontract EIP1271 {\n    mapping(address => bool) isOwner;\n\n    function addOwner(address _owner) public {\n        isOwner[_owner] = true;\n    }\n\n    /**\n     * @notice Verifies that the signer is the owner of the signing contract.\n     */\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\n        external\n        view\n        returns (bytes4)\n    {\n        if (isOwner[recoverSigner(_hash, _signature)]) {\n            return 0x1626ba7e;\n        } else {\n            return 0xffffffff;\n        }\n    }\n\n    /**\n     * @notice Recover the signer of hash, assuming it's an EOA account\n     * @dev Only for EthSign signatures\n     * @param _hash       Hash of message that was signed\n     * @param _signature  Signature encoded as (bytes32 r, bytes32 s, uint8 v)\n     */\n    function recoverSigner(bytes32 _hash, bytes memory _signature)\n        internal\n        pure\n        returns (address signer)\n    {\n        (uint8 v, bytes32 r, bytes32 s) = _splitSignature(_signature);\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        //\n        // Source OpenZeppelin\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\n\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            revert(\n                \"SignatureValidator#recoverSigner: invalid signature 's' value\"\n            );\n        }\n\n        if (v != 27 && v != 28) {\n            revert(\n                \"SignatureValidator#recoverSigner: invalid signature 'v' value\"\n            );\n        }\n\n        // Recover ECDSA signer\n        signer = ecrecover(\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n            ),\n            v,\n            r,\n            s\n        );\n\n        // Prevent signer from being 0x0\n        require(\n            signer != address(0x0),\n            \"SignatureValidator#recoverSigner: INVALID_SIGNER\"\n        );\n\n        return signer;\n    }\n\n    function _splitSignature(bytes memory sig)\n        internal\n        pure\n        returns (\n            uint8 v,\n            bytes32 r,\n            bytes32 s\n        )\n    {\n        require(sig.length == 65);\n\n        assembly {\n            // first 32 bytes, after the length prefix.\n            r := mload(add(sig, 32))\n            // second 32 bytes.\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes).\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        return (v, r, s);\n    }\n}\n"
    },
    "contracts/interfaces/ENS/ENS.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface ENS {\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    function setRecord(\n        bytes32 node,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeRecord(\n        bytes32 node,\n        bytes32 label,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeOwner(\n        bytes32 node,\n        bytes32 label,\n        address owner\n    ) external returns (bytes32);\n\n    function setResolver(bytes32 node, address resolver) external;\n\n    function setOwner(bytes32 node, address owner) external;\n\n    function setTTL(bytes32 node, uint64 ttl) external;\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function owner(bytes32 node) external view returns (address);\n\n    function resolver(bytes32 node) external view returns (address);\n\n    function ttl(bytes32 node) external view returns (uint64);\n\n    function recordExists(bytes32 node) external view returns (bool);\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/interfaces/ENS/IDefaultReverseResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDefaultReverseResolver {\n  function name(bytes32 input) external view returns (string calldata);\n}\n"
    },
    "contracts/interfaces/ENS/IReverseRegistrar.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface IReverseRegistrar {\n  function setDefaultResolver(address resolver) external;\n\n  function claim(address owner) external returns (bytes32);\n\n  function claimForAddr(\n    address addr,\n    address owner,\n    address resolver\n  ) external returns (bytes32);\n\n  function claimWithResolver(address owner, address resolver) external returns (bytes32);\n\n  function setName(string memory name) external returns (bytes32);\n\n  function setNameForAddr(\n    address addr,\n    address owner,\n    address resolver,\n    string memory name\n  ) external returns (bytes32);\n\n  function node(address addr) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/ENS/ITextResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n  event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n\n  /**\n   * Returns the text data associated with an ENS node and key.\n   * @param node The ENS node to query.\n   * @param key The text data key to query.\n   * @return The associated text data.\n   */\n  function text(bytes32 node, string calldata key) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IENSReverseRecords.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.15;\n\nabstract contract IENSReverseRecords {\n  function getNames(address[] calldata addresses) external view virtual returns (string[] memory r);\n}\n"
    },
    "contracts/interfaces/ISVGRender copy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ISVGRender {\n  function render(bytes memory input) external view returns (string memory);\n}\n"
    },
    "contracts/libraries/ECRecovery.sol": {
      "content": "pragma solidity 0.8.15;\n\n// SPDX-License-Identifier: MIT\n\ncontract ECRecovery {\n    /**\n     * @dev Recover signer address from a message by using their signature\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n     */\n    function recover(bytes32 hash, bytes memory sig)\n        internal\n        pure\n        returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        //Check the signature length\n        if (sig.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, v, r, s);\n        }\n    }\n}\n"
    },
    "contracts/Web3CardMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ncontract Web3CardMinter {\n  address public ercTwab;\n\n  constructor() {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
