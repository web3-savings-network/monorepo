{
  "address": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "fetch",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xce66cc025c638cfd3e913b8250a548d60ce218c918c067412a8cdd28b66fd4fb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
    "transactionIndex": 0,
    "gasUsed": "1153353",
    "logsBloom": "0x
    "blockHash": "0x134781580f199f7a5f9a20470792ce60016f2b0b4ec0f85bd2b1b5139cbfa0cc",
    "transactionHash": "0xce66cc025c638cfd3e913b8250a548d60ce218c918c067412a8cdd28b66fd4fb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18,
        "transactionHash": "0xce66cc025c638cfd3e913b8250a548d60ce218c918c067412a8cdd28b66fd4fb",
        "address": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x134781580f199f7a5f9a20470792ce60016f2b0b4ec0f85bd2b1b5139cbfa0cc"
      }
    ],
    "blockNumber": 18,
    "cumulativeGasUsed": "1153353",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bce8c9a59deb035098ddf76bd51ea978",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"fetch\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Web3CardTraits\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Web3CardTraits.sol\":\"Web3CardTraits\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/Web3CardTraits.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { IStream } from \\\"./interfaces/IStream.sol\\\";\\nimport { ITraitsFetch } from \\\"./interfaces/ITraitsFetch.sol\\\";\\n\\n/**\\n * @title Web3CardTraits\\n * @author Kames Geraghty\\n */\\ncontract Web3CardTraits is ITraitsFetch, Ownable {\\n  constructor() {}\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function fetch(bytes memory input) external view returns (string memory) {\\n    (\\n      address account,\\n      uint256 balance,\\n      uint256 avgBalance2Weeks,\\n      uint256 avgBalance8Weeks,\\n      uint256 avgBalance26Weeks,\\n      string memory emoji\\n    ) = abi.decode(input, (address, uint256, uint256, uint256, uint256, string));\\n    string memory _address = Strings.toHexString(uint256(uint160(account)), 20);\\n    return\\n      string.concat(\\n        _generateTrait(\\\"owner\\\", _address),\\n        \\\",\\\",\\n        _generateTrait(\\\"emoji\\\", emoji),\\n        \\\",\\\",\\n        _generateTrait(\\\"balance\\\", Strings.toString(balance)),\\n        \\\",\\\",\\n        _generateTrait(\\\"avgBalance2Weeks\\\", Strings.toString(avgBalance2Weeks)),\\n        \\\",\\\",\\n        _generateTrait(\\\"avgBalance8Weeks\\\", Strings.toString(avgBalance8Weeks)),\\n        \\\",\\\",\\n        _generateTrait(\\\"avgBalance26Weeks\\\", Strings.toString(avgBalance26Weeks))\\n      );\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _generateTrait(string memory _key, string memory _value)\\n    internal\\n    pure\\n    returns (string memory __traits)\\n  {\\n    return string.concat('{\\\"trait_type\\\":' '\\\"', _key, '\\\",', '\\\"value\\\":', '\\\"', _value, '\\\"}');\\n  }\\n\\n  function _generateTraits(string[] memory _keys, string[] memory _values)\\n    internal\\n    pure\\n    returns (string memory __traits)\\n  {\\n    string memory _traits = \\\"\\\";\\n    for (uint256 i = 0; i < _keys.length; i++) {\\n      if (bytes(_values[i]).length > 0) {\\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \\\",\\\");\\n      }\\n    }\\n    return _traits;\\n  }\\n}\\n\",\"keccak256\":\"0x2dd7ca686207c0ca3497ba5c8e90d9eefef7387f4f142ae9b8e29563bd35b567\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IStream {\\n  function count(address _address) external view returns (uint256);\\n\\n  function getData(address _address)\\n    external\\n    view\\n    returns (string[] memory keys, string[] memory values);\\n\\n  function getValue(address _address, string memory _key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0b5b0ba6414345934de73e26b35cbe1d69b82a0623fd52ebf81376dd3bb9b3a\",\"license\":\"MIT\"},\"contracts/interfaces/ITraitsFetch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ITraitsFetch {\\n  function fetch(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8454d6dcf4c798032b7459026b6fa23f586b76400175a27c9b100c1aca36c5a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6113898061010d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b14610079578063f6559a6b14610095575b600080fd5b6100596100c5565b005b6100636100d9565b60405161007091906108f4565b60405180910390f35b610093600480360381019061008e919061094f565b610102565b005b6100af60048036038101906100aa9190610ac2565b610185565b6040516100bc9190610b93565b60405180910390f35b6100cd6103a1565b6100d7600061041f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61010a6103a1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017090610c27565b60405180910390fd5b6101828161041f565b50565b6060600080600080600080878060200190518101906101a49190610d5c565b95509550955095509550955060006101d38773ffffffffffffffffffffffffffffffffffffffff1660146104e3565b90506102146040518060400160405280600581526020017f6f776e65720000000000000000000000000000000000000000000000000000008152508261071f565b6102536040518060400160405280600581526020017f656d6f6a690000000000000000000000000000000000000000000000000000008152508461071f565b61029a6040518060400160405280600781526020017f62616c616e6365000000000000000000000000000000000000000000000000008152506102958a61074b565b61071f565b6102e16040518060400160405280601081526020017f61766742616c616e6365325765656b73000000000000000000000000000000008152506102dc8a61074b565b61071f565b6103286040518060400160405280601081526020017f61766742616c616e6365385765656b73000000000000000000000000000000008152506103238a61074b565b61071f565b61036f6040518060400160405280601181526020017f61766742616c616e636532365765656b7300000000000000000000000000000081525061036a8a61074b565b61071f565b60405160200161038496959493929190610e67565b604051602081830303815290604052975050505050505050919050565b6103a96108ab565b73ffffffffffffffffffffffffffffffffffffffff166103c76100d9565b73ffffffffffffffffffffffffffffffffffffffff161461041d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041490610f56565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060600060028360026104f69190610fa5565b6105009190610fff565b67ffffffffffffffff81111561051957610518610997565b5b6040519080825280601f01601f19166020018201604052801561054b5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061058357610582611055565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106105e7576105e6611055565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026106279190610fa5565b6106319190610fff565b90505b60018111156106d1577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061067357610672611055565b5b1a60f81b82828151811061068a57610689611055565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806106ca90611084565b9050610634565b5060008414610715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070c906110f9565b60405180910390fd5b8091505092915050565b606082826040516020016107349291906111d7565b604051602081830303815290604052905092915050565b606060008203610792576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506108a6565b600082905060005b600082146107c45780806107ad90611246565b915050600a826107bd91906112bd565b915061079a565b60008167ffffffffffffffff8111156107e0576107df610997565b5b6040519080825280601f01601f1916602001820160405280156108125781602001600182028036833780820191505090505b5090505b6000851461089f5760018261082b91906112ee565b9150600a8561083a9190611322565b60306108469190610fff565b60f81b81838151811061085c5761085b611055565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561089891906112bd565b9450610816565b8093505050505b919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108de826108b3565b9050919050565b6108ee816108d3565b82525050565b600060208201905061090960008301846108e5565b92915050565b6000604051905090565b600080fd5b600080fd5b61092c816108d3565b811461093757600080fd5b50565b60008135905061094981610923565b92915050565b60006020828403121561096557610964610919565b5b60006109738482850161093a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109cf82610986565b810181811067ffffffffffffffff821117156109ee576109ed610997565b5b80604052505050565b6000610a0161090f565b9050610a0d82826109c6565b919050565b600067ffffffffffffffff821115610a2d57610a2c610997565b5b610a3682610986565b9050602081019050919050565b82818337600083830152505050565b6000610a65610a6084610a12565b6109f7565b905082815260208101848484011115610a8157610a80610981565b5b610a8c848285610a43565b509392505050565b600082601f830112610aa957610aa861097c565b5b8135610ab9848260208601610a52565b91505092915050565b600060208284031215610ad857610ad7610919565b5b600082013567ffffffffffffffff811115610af657610af561091e565b5b610b0284828501610a94565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b45578082015181840152602081019050610b2a565b83811115610b54576000848401525b50505050565b6000610b6582610b0b565b610b6f8185610b16565b9350610b7f818560208601610b27565b610b8881610986565b840191505092915050565b60006020820190508181036000830152610bad8184610b5a565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c11602683610b16565b9150610c1c82610bb5565b604082019050919050565b60006020820190508181036000830152610c4081610c04565b9050919050565b6000610c52826108b3565b9050919050565b610c6281610c47565b8114610c6d57600080fd5b50565b600081519050610c7f81610c59565b92915050565b6000819050919050565b610c9881610c85565b8114610ca357600080fd5b50565b600081519050610cb581610c8f565b92915050565b600067ffffffffffffffff821115610cd657610cd5610997565b5b610cdf82610986565b9050602081019050919050565b6000610cff610cfa84610cbb565b6109f7565b905082815260208101848484011115610d1b57610d1a610981565b5b610d26848285610b27565b509392505050565b600082601f830112610d4357610d4261097c565b5b8151610d53848260208601610cec565b91505092915050565b60008060008060008060c08789031215610d7957610d78610919565b5b6000610d8789828a01610c70565b9650506020610d9889828a01610ca6565b9550506040610da989828a01610ca6565b9450506060610dba89828a01610ca6565b9350506080610dcb89828a01610ca6565b92505060a087015167ffffffffffffffff811115610dec57610deb61091e565b5b610df889828a01610d2e565b9150509295509295509295565b600081905092915050565b6000610e1b82610b0b565b610e258185610e05565b9350610e35818560208601610b27565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b6000610e738289610e10565b9150610e7e82610e41565b600182019150610e8e8288610e10565b9150610e9982610e41565b600182019150610ea98287610e10565b9150610eb482610e41565b600182019150610ec48286610e10565b9150610ecf82610e41565b600182019150610edf8285610e10565b9150610eea82610e41565b600182019150610efa8284610e10565b9150819050979650505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f40602083610b16565b9150610f4b82610f0a565b602082019050919050565b60006020820190508181036000830152610f6f81610f33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fb082610c85565b9150610fbb83610c85565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ff457610ff3610f76565b5b828202905092915050565b600061100a82610c85565b915061101583610c85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561104a57611049610f76565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061108f82610c85565b9150600082036110a2576110a1610f76565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006110e3602083610b16565b91506110ee826110ad565b602082019050919050565b60006020820190508181036000830152611112816110d6565b9050919050565b7f7b2274726169745f74797065223a220000000000000000000000000000000000815250565b7f222c000000000000000000000000000000000000000000000000000000000000815250565b7f2276616c7565223a000000000000000000000000000000000000000000000000815250565b7f2200000000000000000000000000000000000000000000000000000000000000815250565b7f227d000000000000000000000000000000000000000000000000000000000000815250565b60006111e282611119565b600f820191506111f28285610e10565b91506111fd8261113f565b60028201915061120c82611165565b60088201915061121b8261118b565b60018201915061122b8284610e10565b9150611236826111b1565b6002820191508190509392505050565b600061125182610c85565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361128357611282610f76565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112c882610c85565b91506112d383610c85565b9250826112e3576112e261128e565b5b828204905092915050565b60006112f982610c85565b915061130483610c85565b92508282101561131757611316610f76565b5b828203905092915050565b600061132d82610c85565b915061133883610c85565b9250826113485761134761128e565b5b82820690509291505056fea2646970667358221220508ec262df6ec9044819f1c2b45a37cbc7a213f2a4fb6eae924b9dc4be40826164736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b14610079578063f6559a6b14610095575b600080fd5b6100596100c5565b005b6100636100d9565b60405161007091906108f4565b60405180910390f35b610093600480360381019061008e919061094f565b610102565b005b6100af60048036038101906100aa9190610ac2565b610185565b6040516100bc9190610b93565b60405180910390f35b6100cd6103a1565b6100d7600061041f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61010a6103a1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017090610c27565b60405180910390fd5b6101828161041f565b50565b6060600080600080600080878060200190518101906101a49190610d5c565b95509550955095509550955060006101d38773ffffffffffffffffffffffffffffffffffffffff1660146104e3565b90506102146040518060400160405280600581526020017f6f776e65720000000000000000000000000000000000000000000000000000008152508261071f565b6102536040518060400160405280600581526020017f656d6f6a690000000000000000000000000000000000000000000000000000008152508461071f565b61029a6040518060400160405280600781526020017f62616c616e6365000000000000000000000000000000000000000000000000008152506102958a61074b565b61071f565b6102e16040518060400160405280601081526020017f61766742616c616e6365325765656b73000000000000000000000000000000008152506102dc8a61074b565b61071f565b6103286040518060400160405280601081526020017f61766742616c616e6365385765656b73000000000000000000000000000000008152506103238a61074b565b61071f565b61036f6040518060400160405280601181526020017f61766742616c616e636532365765656b7300000000000000000000000000000081525061036a8a61074b565b61071f565b60405160200161038496959493929190610e67565b604051602081830303815290604052975050505050505050919050565b6103a96108ab565b73ffffffffffffffffffffffffffffffffffffffff166103c76100d9565b73ffffffffffffffffffffffffffffffffffffffff161461041d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041490610f56565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060600060028360026104f69190610fa5565b6105009190610fff565b67ffffffffffffffff81111561051957610518610997565b5b6040519080825280601f01601f19166020018201604052801561054b5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061058357610582611055565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106105e7576105e6611055565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026106279190610fa5565b6106319190610fff565b90505b60018111156106d1577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061067357610672611055565b5b1a60f81b82828151811061068a57610689611055565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806106ca90611084565b9050610634565b5060008414610715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070c906110f9565b60405180910390fd5b8091505092915050565b606082826040516020016107349291906111d7565b604051602081830303815290604052905092915050565b606060008203610792576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506108a6565b600082905060005b600082146107c45780806107ad90611246565b915050600a826107bd91906112bd565b915061079a565b60008167ffffffffffffffff8111156107e0576107df610997565b5b6040519080825280601f01601f1916602001820160405280156108125781602001600182028036833780820191505090505b5090505b6000851461089f5760018261082b91906112ee565b9150600a8561083a9190611322565b60306108469190610fff565b60f81b81838151811061085c5761085b611055565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561089891906112bd565b9450610816565b8093505050505b919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108de826108b3565b9050919050565b6108ee816108d3565b82525050565b600060208201905061090960008301846108e5565b92915050565b6000604051905090565b600080fd5b600080fd5b61092c816108d3565b811461093757600080fd5b50565b60008135905061094981610923565b92915050565b60006020828403121561096557610964610919565b5b60006109738482850161093a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109cf82610986565b810181811067ffffffffffffffff821117156109ee576109ed610997565b5b80604052505050565b6000610a0161090f565b9050610a0d82826109c6565b919050565b600067ffffffffffffffff821115610a2d57610a2c610997565b5b610a3682610986565b9050602081019050919050565b82818337600083830152505050565b6000610a65610a6084610a12565b6109f7565b905082815260208101848484011115610a8157610a80610981565b5b610a8c848285610a43565b509392505050565b600082601f830112610aa957610aa861097c565b5b8135610ab9848260208601610a52565b91505092915050565b600060208284031215610ad857610ad7610919565b5b600082013567ffffffffffffffff811115610af657610af561091e565b5b610b0284828501610a94565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b45578082015181840152602081019050610b2a565b83811115610b54576000848401525b50505050565b6000610b6582610b0b565b610b6f8185610b16565b9350610b7f818560208601610b27565b610b8881610986565b840191505092915050565b60006020820190508181036000830152610bad8184610b5a565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c11602683610b16565b9150610c1c82610bb5565b604082019050919050565b60006020820190508181036000830152610c4081610c04565b9050919050565b6000610c52826108b3565b9050919050565b610c6281610c47565b8114610c6d57600080fd5b50565b600081519050610c7f81610c59565b92915050565b6000819050919050565b610c9881610c85565b8114610ca357600080fd5b50565b600081519050610cb581610c8f565b92915050565b600067ffffffffffffffff821115610cd657610cd5610997565b5b610cdf82610986565b9050602081019050919050565b6000610cff610cfa84610cbb565b6109f7565b905082815260208101848484011115610d1b57610d1a610981565b5b610d26848285610b27565b509392505050565b600082601f830112610d4357610d4261097c565b5b8151610d53848260208601610cec565b91505092915050565b60008060008060008060c08789031215610d7957610d78610919565b5b6000610d8789828a01610c70565b9650506020610d9889828a01610ca6565b9550506040610da989828a01610ca6565b9450506060610dba89828a01610ca6565b9350506080610dcb89828a01610ca6565b92505060a087015167ffffffffffffffff811115610dec57610deb61091e565b5b610df889828a01610d2e565b9150509295509295509295565b600081905092915050565b6000610e1b82610b0b565b610e258185610e05565b9350610e35818560208601610b27565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b6000610e738289610e10565b9150610e7e82610e41565b600182019150610e8e8288610e10565b9150610e9982610e41565b600182019150610ea98287610e10565b9150610eb482610e41565b600182019150610ec48286610e10565b9150610ecf82610e41565b600182019150610edf8285610e10565b9150610eea82610e41565b600182019150610efa8284610e10565b9150819050979650505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f40602083610b16565b9150610f4b82610f0a565b602082019050919050565b60006020820190508181036000830152610f6f81610f33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fb082610c85565b9150610fbb83610c85565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ff457610ff3610f76565b5b828202905092915050565b600061100a82610c85565b915061101583610c85565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561104a57611049610f76565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061108f82610c85565b9150600082036110a2576110a1610f76565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006110e3602083610b16565b91506110ee826110ad565b602082019050919050565b60006020820190508181036000830152611112816110d6565b9050919050565b7f7b2274726169745f74797065223a220000000000000000000000000000000000815250565b7f222c000000000000000000000000000000000000000000000000000000000000815250565b7f2276616c7565223a000000000000000000000000000000000000000000000000815250565b7f2200000000000000000000000000000000000000000000000000000000000000815250565b7f227d000000000000000000000000000000000000000000000000000000000000815250565b60006111e282611119565b600f820191506111f28285610e10565b91506111fd8261113f565b60028201915061120c82611165565b60088201915061121b8261118b565b60018201915061122b8284610e10565b9150611236826111b1565b6002820191508190509392505050565b600061125182610c85565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361128357611282610f76565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112c882610c85565b91506112d383610c85565b9250826112e3576112e261128e565b5b828204905092915050565b60006112f982610c85565b915061130483610c85565b92508282101561131757611316610f76565b5b828203905092915050565b600061132d82610c85565b915061133883610c85565b9250826113485761134761128e565b5b82820690509291505056fea2646970667358221220508ec262df6ec9044819f1c2b45a37cbc7a213f2a4fb6eae924b9dc4be40826164736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Web3CardTraits",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2542,
        "contract": "contracts/Web3CardTraits.sol:Web3CardTraits",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}