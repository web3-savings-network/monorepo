/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IMetaFetch {
  export type CoreStruct = {
    name: string;
    description: string;
    background_color: string;
    animation_url: string;
    external_url: string;
    youtube_url: string;
  };

  export type CoreStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    name: string;
    description: string;
    background_color: string;
    animation_url: string;
    external_url: string;
    youtube_url: string;
  };

  export type TraitStruct = {
    display_type: string;
    trait_type: string;
    value: string;
  };

  export type TraitStructOutput = [string, string, string] & {
    display_type: string;
    trait_type: string;
    value: string;
  };

  export type MetadataStruct = {
    name: string;
    description: string;
    image: string;
    image_data: string;
    background_color: string;
    animation_url: string;
    external_url: string;
    youtube_url: string;
    attributes: IMetaFetch.TraitStruct[];
  };

  export type MetadataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    IMetaFetch.TraitStructOutput[]
  ] & {
    name: string;
    description: string;
    image: string;
    image_data: string;
    background_color: string;
    animation_url: string;
    external_url: string;
    youtube_url: string;
    attributes: IMetaFetch.TraitStructOutput[];
  };

  export type ImageStruct = { image: string; image_data: string };

  export type ImageStructOutput = [string, string] & {
    image: string;
    image_data: string;
  };
}

export interface IMetaFetchInterface extends utils.Interface {
  contractName: "IMetaFetch";
  functions: {
    "data(uint256)": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "image(uint256)": FunctionFragment;
    "traits(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "data", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "image", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "traits",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "image", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "traits", data: BytesLike): Result;

  events: {};
}

export interface IMetaFetch extends BaseContract {
  contractName: "IMetaFetch";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMetaFetchInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    data(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IMetaFetch.CoreStructOutput] & { core: IMetaFetch.CoreStructOutput }
    >;

    get(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IMetaFetch.MetadataStructOutput] & {
        meta: IMetaFetch.MetadataStructOutput;
      }
    >;

    image(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IMetaFetch.ImageStructOutput] & { image: IMetaFetch.ImageStructOutput }
    >;

    traits(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IMetaFetch.TraitStructOutput[]] & {
        traits: IMetaFetch.TraitStructOutput[];
      }
    >;
  };

  data(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IMetaFetch.CoreStructOutput>;

  get(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IMetaFetch.MetadataStructOutput>;

  image(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IMetaFetch.ImageStructOutput>;

  traits(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IMetaFetch.TraitStructOutput[]>;

  callStatic: {
    data(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IMetaFetch.CoreStructOutput>;

    get(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IMetaFetch.MetadataStructOutput>;

    image(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IMetaFetch.ImageStructOutput>;

    traits(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IMetaFetch.TraitStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    data(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    get(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    image(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    traits(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    data(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    image(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traits(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
