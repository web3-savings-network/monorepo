{
  "id": "e4c1012e11f18c328074048ec8982460",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.15",
  "solcLongVersion": "0.8.15+commit.e14f2714",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/Solbase/utils/Multicallable.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Contract that enables a single call to call multiple methods on itself.\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/Multicallable.sol)\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)\n/// @dev WARNING!\n/// Multicallable is NOT SAFE for use in contracts with checks / requires on `msg.value`\n/// (e.g. in NFT minting / auction contracts) without a suitable nonce mechanism.\n/// It WILL open up your contract to double-spend vulnerabilities / exploits.\n/// See: (https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/)\nabstract contract Multicallable {\n    /// @dev Apply `DELEGATECALL` with the current contract to each calldata in `data`,\n    /// and store the `abi.encode` formatted results of each `DELEGATECALL` into `results`.\n    /// If any of the `DELEGATECALL`s reverts, the entire transaction is reverted,\n    /// and the error is bubbled up.\n    function multicall(bytes[] calldata data) public payable returns (bytes[] memory results) {\n        assembly {\n            if data.length {\n                results := mload(0x40) // Point `results` to start of free memory.\n                mstore(results, data.length) // Store `data.length` into `results`.\n                results := add(results, 0x20)\n\n                // `shl` 5 is equivalent to multiplying by 0x20.\n                let end := shl(5, data.length)\n                // Copy the offsets from calldata into memory.\n                calldatacopy(results, data.offset, end)\n                // Pointer to the top of the memory (i.e. start of the free memory).\n                let memPtr := add(results, end)\n                end := add(results, end)\n\n                // prettier-ignore\n                for {} 1 {} {\n                    // The offset of the current bytes in the calldata.\n                    let o := add(data.offset, mload(results))\n                    // Copy the current bytes from calldata to the memory.\n                    calldatacopy(\n                        memPtr,\n                        add(o, 0x20), // The offset of the current bytes' bytes.\n                        calldataload(o) // The length of the current bytes.\n                    )\n                    if iszero(delegatecall(gas(), address(), memPtr, calldataload(o), 0x00, 0x00)) {\n                        // Bubble up the revert if the delegatecall reverts.\n                        returndatacopy(0x00, 0x00, returndatasize())\n                        revert(0x00, returndatasize())\n                    }\n                    // Append the current `memPtr` into `results`.\n                    mstore(results, memPtr)\n                    results := add(results, 0x20)\n                    // Append the `returndatasize()`, and the return data.\n                    mstore(memPtr, returndatasize())\n                    returndatacopy(add(memPtr, 0x20), 0x00, returndatasize())\n                    // Advance the `memPtr` by `returndatasize() + 0x20`,\n                    // rounded up to the next multiple of 32.\n                    memPtr := and(add(add(memPtr, returndatasize()), 0x3f), 0xffffffffffffffe0)\n                    // prettier-ignore\n                    if iszero(lt(results, end)) { break }\n                }\n                // Restore `results` and allocate memory for it.\n                results := mload(0x40)\n                mstore(0x40, memPtr)\n            }\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "istanbul",
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/Solbase/utils/Multicallable.sol": {
        "Multicallable": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes[]",
                  "name": "data",
                  "type": "bytes[]"
                }
              ],
              "name": "multicall",
              "outputs": [
                {
                  "internalType": "bytes[]",
                  "name": "results",
                  "type": "bytes[]"
                }
              ],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/Multicallable.sol)Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)",
            "details": "WARNING! Multicallable is NOT SAFE for use in contracts with checks / requires on `msg.value` (e.g. in NFT minting / auction contracts) without a suitable nonce mechanism. It WILL open up your contract to double-spend vulnerabilities / exploits. See: (https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/)",
            "kind": "dev",
            "methods": {
              "multicall(bytes[])": {
                "details": "Apply `DELEGATECALL` with the current contract to each calldata in `data`, and store the `abi.encode` formatted results of each `DELEGATECALL` into `results`. If any of the `DELEGATECALL`s reverts, the entire transaction is reverted, and the error is bubbled up."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "multicall(bytes[])": "ac9650d8"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/Multicallable.sol)Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)\",\"details\":\"WARNING! Multicallable is NOT SAFE for use in contracts with checks / requires on `msg.value` (e.g. in NFT minting / auction contracts) without a suitable nonce mechanism. It WILL open up your contract to double-spend vulnerabilities / exploits. See: (https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/)\",\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"Apply `DELEGATECALL` with the current contract to each calldata in `data`, and store the `abi.encode` formatted results of each `DELEGATECALL` into `results`. If any of the `DELEGATECALL`s reverts, the entire transaction is reverted, and the error is bubbled up.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract that enables a single call to call multiple methods on itself.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Solbase/utils/Multicallable.sol\":\"Multicallable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Solbase/utils/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Contract that enables a single call to call multiple methods on itself.\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/Multicallable.sol)\\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)\\n/// @dev WARNING!\\n/// Multicallable is NOT SAFE for use in contracts with checks / requires on `msg.value`\\n/// (e.g. in NFT minting / auction contracts) without a suitable nonce mechanism.\\n/// It WILL open up your contract to double-spend vulnerabilities / exploits.\\n/// See: (https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/)\\nabstract contract Multicallable {\\n    /// @dev Apply `DELEGATECALL` with the current contract to each calldata in `data`,\\n    /// and store the `abi.encode` formatted results of each `DELEGATECALL` into `results`.\\n    /// If any of the `DELEGATECALL`s reverts, the entire transaction is reverted,\\n    /// and the error is bubbled up.\\n    function multicall(bytes[] calldata data) public payable returns (bytes[] memory results) {\\n        assembly {\\n            if data.length {\\n                results := mload(0x40) // Point `results` to start of free memory.\\n                mstore(results, data.length) // Store `data.length` into `results`.\\n                results := add(results, 0x20)\\n\\n                // `shl` 5 is equivalent to multiplying by 0x20.\\n                let end := shl(5, data.length)\\n                // Copy the offsets from calldata into memory.\\n                calldatacopy(results, data.offset, end)\\n                // Pointer to the top of the memory (i.e. start of the free memory).\\n                let memPtr := add(results, end)\\n                end := add(results, end)\\n\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    // The offset of the current bytes in the calldata.\\n                    let o := add(data.offset, mload(results))\\n                    // Copy the current bytes from calldata to the memory.\\n                    calldatacopy(\\n                        memPtr,\\n                        add(o, 0x20), // The offset of the current bytes' bytes.\\n                        calldataload(o) // The length of the current bytes.\\n                    )\\n                    if iszero(delegatecall(gas(), address(), memPtr, calldataload(o), 0x00, 0x00)) {\\n                        // Bubble up the revert if the delegatecall reverts.\\n                        returndatacopy(0x00, 0x00, returndatasize())\\n                        revert(0x00, returndatasize())\\n                    }\\n                    // Append the current `memPtr` into `results`.\\n                    mstore(results, memPtr)\\n                    results := add(results, 0x20)\\n                    // Append the `returndatasize()`, and the return data.\\n                    mstore(memPtr, returndatasize())\\n                    returndatacopy(add(memPtr, 0x20), 0x00, returndatasize())\\n                    // Advance the `memPtr` by `returndatasize() + 0x20`,\\n                    // rounded up to the next multiple of 32.\\n                    memPtr := and(add(add(memPtr, returndatasize()), 0x3f), 0xffffffffffffffe0)\\n                    // prettier-ignore\\n                    if iszero(lt(results, end)) { break }\\n                }\\n                // Restore `results` and allocate memory for it.\\n                results := mload(0x40)\\n                mstore(0x40, memPtr)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc6e78568879c347ea2848fc0d2c0d43eea013d41ef370b8067d4ddc4e8bb8735\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Contract that enables a single call to call multiple methods on itself.",
            "version": 1
          }
        }
      }
    },
    "sources": {
      "contracts/Solbase/utils/Multicallable.sol": {
        "ast": {
          "absolutePath": "contracts/Solbase/utils/Multicallable.sol",
          "exportedSymbols": {
            "Multicallable": [
              15
            ]
          },
          "id": 16,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".4"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:0"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Multicallable",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "57:630:0",
                "text": "@notice Contract that enables a single call to call multiple methods on itself.\n @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/Multicallable.sol)\n @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Multicallable.sol)\n @dev WARNING!\n Multicallable is NOT SAFE for use in contracts with checks / requires on `msg.value`\n (e.g. in NFT minting / auction contracts) without a suitable nonce mechanism.\n It WILL open up your contract to double-spend vulnerabilities / exploits.\n See: (https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/)"
              },
              "fullyImplemented": true,
              "id": 15,
              "linearizedBaseContracts": [
                15
              ],
              "name": "Multicallable",
              "nameLocation": "705:13:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 13,
                    "nodeType": "Block",
                    "src": "1115:2397:0",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1134:2372:0",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1163:2333:0",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1181:22:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1198:4:0",
                                          "type": "",
                                          "value": "0x40"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1192:5:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1192:11:0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "results",
                                        "nodeType": "YulIdentifier",
                                        "src": "1181:7:0"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "results",
                                          "nodeType": "YulIdentifier",
                                          "src": "1271:7:0"
                                        },
                                        {
                                          "name": "data.length",
                                          "nodeType": "YulIdentifier",
                                          "src": "1280:11:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1264:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1264:28:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1264:28:0"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1348:29:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "results",
                                          "nodeType": "YulIdentifier",
                                          "src": "1363:7:0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1372:4:0",
                                          "type": "",
                                          "value": "0x20"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1359:3:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1359:18:0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "results",
                                        "nodeType": "YulIdentifier",
                                        "src": "1348:7:0"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1460:30:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1475:1:0",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "name": "data.length",
                                          "nodeType": "YulIdentifier",
                                          "src": "1478:11:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "1471:3:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1471:19:0"
                                    },
                                    "variables": [
                                      {
                                        "name": "end",
                                        "nodeType": "YulTypedName",
                                        "src": "1464:3:0",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "results",
                                          "nodeType": "YulIdentifier",
                                          "src": "1583:7:0"
                                        },
                                        {
                                          "name": "data.offset",
                                          "nodeType": "YulIdentifier",
                                          "src": "1592:11:0"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "1605:3:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldatacopy",
                                        "nodeType": "YulIdentifier",
                                        "src": "1570:12:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1570:39:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1570:39:0"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1711:31:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "results",
                                          "nodeType": "YulIdentifier",
                                          "src": "1729:7:0"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "1738:3:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1725:3:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1725:17:0"
                                    },
                                    "variables": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "1715:6:0",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1759:24:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "results",
                                          "nodeType": "YulIdentifier",
                                          "src": "1770:7:0"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "1779:3:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1766:3:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1766:17:0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "1759:3:0"
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "1848:1493:0",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "1942:41:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "data.offset",
                                                "nodeType": "YulIdentifier",
                                                "src": "1955:11:0"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "results",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "1974:7:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1968:5:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "1968:14:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "1951:3:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1951:32:0"
                                          },
                                          "variables": [
                                            {
                                              "name": "o",
                                              "nodeType": "YulTypedName",
                                              "src": "1946:1:0",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "memPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2117:6:0"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "o",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2153:1:0"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2156:4:0",
                                                    "type": "",
                                                    "value": "0x20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2149:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2149:12:0"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "o",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2243:1:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "calldataload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2230:12:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2230:15:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "calldatacopy",
                                              "nodeType": "YulIdentifier",
                                              "src": "2079:12:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2079:224:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2079:224:0"
                                        },
                                        {
                                          "body": {
                                            "nodeType": "YulBlock",
                                            "src": "2403:224:0",
                                            "statements": [
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2521:4:0",
                                                      "type": "",
                                                      "value": "0x00"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2527:4:0",
                                                      "type": "",
                                                      "value": "0x00"
                                                    },
                                                    {
                                                      "arguments": [],
                                                      "functionName": {
                                                        "name": "returndatasize",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2533:14:0"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "2533:16:0"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "returndatacopy",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2506:14:0"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2506:44:0"
                                                },
                                                "nodeType": "YulExpressionStatement",
                                                "src": "2506:44:0"
                                              },
                                              {
                                                "expression": {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2582:4:0",
                                                      "type": "",
                                                      "value": "0x00"
                                                    },
                                                    {
                                                      "arguments": [],
                                                      "functionName": {
                                                        "name": "returndatasize",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2588:14:0"
                                                      },
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "2588:16:0"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "revert",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2575:6:0"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2575:30:0"
                                                },
                                                "nodeType": "YulExpressionStatement",
                                                "src": "2575:30:0"
                                              }
                                            ]
                                          },
                                          "condition": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [],
                                                    "functionName": {
                                                      "name": "gas",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2347:3:0"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2347:5:0"
                                                  },
                                                  {
                                                    "arguments": [],
                                                    "functionName": {
                                                      "name": "address",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2354:7:0"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2354:9:0"
                                                  },
                                                  {
                                                    "name": "memPtr",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2365:6:0"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "o",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2386:1:0"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "calldataload",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2373:12:0"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2373:15:0"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2390:4:0",
                                                    "type": "",
                                                    "value": "0x00"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2396:4:0",
                                                    "type": "",
                                                    "value": "0x00"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "delegatecall",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2334:12:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2334:67:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "2327:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2327:75:0"
                                          },
                                          "nodeType": "YulIf",
                                          "src": "2324:303:0"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "results",
                                                "nodeType": "YulIdentifier",
                                                "src": "2722:7:0"
                                              },
                                              {
                                                "name": "memPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2731:6:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2715:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2715:23:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2715:23:0"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2759:29:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "results",
                                                "nodeType": "YulIdentifier",
                                                "src": "2774:7:0"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2783:4:0",
                                                "type": "",
                                                "value": "0x20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2770:3:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2770:18:0"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "results",
                                              "nodeType": "YulIdentifier",
                                              "src": "2759:7:0"
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "memPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2891:6:0"
                                              },
                                              {
                                                "arguments": [],
                                                "functionName": {
                                                  "name": "returndatasize",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2899:14:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2899:16:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2884:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2884:32:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2884:32:0"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "memPtr",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2956:6:0"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2964:4:0",
                                                    "type": "",
                                                    "value": "0x20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2952:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2952:17:0"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2971:4:0",
                                                "type": "",
                                                "value": "0x00"
                                              },
                                              {
                                                "arguments": [],
                                                "functionName": {
                                                  "name": "returndatasize",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2977:14:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2977:16:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "returndatacopy",
                                              "nodeType": "YulIdentifier",
                                              "src": "2937:14:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2937:57:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2937:57:0"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3151:75:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "memPtr",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "3173:6:0"
                                                      },
                                                      {
                                                        "arguments": [],
                                                        "functionName": {
                                                          "name": "returndatasize",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "3181:14:0"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "3181:16:0"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "3169:3:0"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "3169:29:0"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "3200:4:0",
                                                    "type": "",
                                                    "value": "0x3f"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3165:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3165:40:0"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "3207:18:0",
                                                "type": "",
                                                "value": "0xffffffffffffffe0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "and",
                                              "nodeType": "YulIdentifier",
                                              "src": "3161:3:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3161:65:0"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "memPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "3151:6:0"
                                            }
                                          ]
                                        },
                                        {
                                          "body": {
                                            "nodeType": "YulBlock",
                                            "src": "3314:9:0",
                                            "statements": [
                                              {
                                                "nodeType": "YulBreak",
                                                "src": "3316:5:0"
                                              }
                                            ]
                                          },
                                          "condition": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "results",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3299:7:0"
                                                  },
                                                  {
                                                    "name": "end",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3308:3:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "lt",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3296:2:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3296:16:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "3289:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3289:24:0"
                                          },
                                          "nodeType": "YulIf",
                                          "src": "3286:37:0"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1843:1:0",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "1845:2:0",
                                      "statements": []
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "1840:2:0",
                                      "statements": []
                                    },
                                    "src": "1836:1505:0"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3423:22:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3440:4:0",
                                          "type": "",
                                          "value": "0x40"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3434:5:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3434:11:0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "results",
                                        "nodeType": "YulIdentifier",
                                        "src": "3423:7:0"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3469:4:0",
                                          "type": "",
                                          "value": "0x40"
                                        },
                                        {
                                          "name": "memPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "3475:6:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3462:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3462:20:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3462:20:0"
                                  }
                                ]
                              },
                              "condition": {
                                "name": "data.length",
                                "nodeType": "YulIdentifier",
                                "src": "1151:11:0"
                              },
                              "nodeType": "YulIf",
                              "src": "1148:2348:0"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 6,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1151:11:0",
                            "suffix": "length",
                            "valueSize": 1
                          },
                          {
                            "declaration": 6,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1280:11:0",
                            "suffix": "length",
                            "valueSize": 1
                          },
                          {
                            "declaration": 6,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1478:11:0",
                            "suffix": "length",
                            "valueSize": 1
                          },
                          {
                            "declaration": 6,
                            "isOffset": true,
                            "isSlot": false,
                            "src": "1592:11:0",
                            "suffix": "offset",
                            "valueSize": 1
                          },
                          {
                            "declaration": 6,
                            "isOffset": true,
                            "isSlot": false,
                            "src": "1955:11:0",
                            "suffix": "offset",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1181:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1271:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1348:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1363:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1583:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1729:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1770:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1974:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2722:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2759:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2774:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3299:7:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 10,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "3423:7:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 12,
                        "nodeType": "InlineAssembly",
                        "src": "1125:2381:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "725:295:0",
                    "text": "@dev Apply `DELEGATECALL` with the current contract to each calldata in `data`,\n and store the `abi.encode` formatted results of each `DELEGATECALL` into `results`.\n If any of the `DELEGATECALL`s reverts, the entire transaction is reverted,\n and the error is bubbled up."
                  },
                  "functionSelector": "ac9650d8",
                  "id": 14,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "multicall",
                  "nameLocation": "1034:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 7,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 6,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "1061:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 14,
                        "src": "1044:21:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
                          "typeString": "bytes[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 4,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "1044:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "id": 5,
                          "nodeType": "ArrayTypeName",
                          "src": "1044:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            "typeString": "bytes[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1043:23:0"
                  },
                  "returnParameters": {
                    "id": 11,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 10,
                        "mutability": "mutable",
                        "name": "results",
                        "nameLocation": "1106:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 14,
                        "src": "1091:22:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                          "typeString": "bytes[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 8,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "1091:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "id": 9,
                          "nodeType": "ArrayTypeName",
                          "src": "1091:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                            "typeString": "bytes[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1090:24:0"
                  },
                  "scope": 15,
                  "src": "1025:2487:0",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 16,
              "src": "687:2827:0",
              "usedErrors": []
            }
          ],
          "src": "32:3483:0"
        },
        "id": 0
      }
    }
  }
}
