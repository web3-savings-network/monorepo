{
  "id": "1595db8a5ceb21448fbc270f176dfba5",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.15",
  "solcLongVersion": "0.8.15+commit.e14f2714",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/Solbase/utils/ECDSA.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Gas-optimized ECDSA wrapper.\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/ECDSA.sol)\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\nlibrary ECDSA {\n    /// -----------------------------------------------------------------------\n    /// Constants\n    /// -----------------------------------------------------------------------\n\n    /// @dev The number which `s` must not exceed in order for\n    /// the signature to be non-malleable.\n    bytes32 internal constant MALLEABILITY_THRESHOLD =\n        0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0;\n\n    /// -----------------------------------------------------------------------\n    /// Recovery Operations\n    /// -----------------------------------------------------------------------\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the `signature`.\n    ///\n    /// This function does NOT accept EIP-2098 short form signatures.\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\n    /// short form signatures instead.\n    ///\n    /// WARNING!\n    /// The `result` will be the zero address upon recovery failure.\n    /// As such, it is extremely important to ensure that the address which\n    /// the `result` is compared against is never zero.\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address result) {\n        assembly {\n            if eq(signature.length, 65) {\n                // Copy the free memory pointer so that we can restore it later.\n                let m := mload(0x40)\n                // Directly copy `r` and `s` from the calldata.\n                calldatacopy(0x40, signature.offset, 0x40)\n\n                // If `s` in lower half order, such that the signature is not malleable.\n                if iszero(gt(mload(0x60), MALLEABILITY_THRESHOLD)) {\n                    mstore(0x00, hash)\n                    // Compute `v` and store it in the scratch space.\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\n                    pop(\n                        staticcall(\n                            gas(), // Amount of gas left for the transaction.\n                            0x01, // Address of `ecrecover`.\n                            0x00, // Start of input.\n                            0x80, // Size of input.\n                            0x40, // Start of output.\n                            0x20 // Size of output.\n                        )\n                    )\n                    // Restore the zero slot.\n                    mstore(0x60, 0)\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                    result := mload(sub(0x60, returndatasize()))\n                }\n                // Restore the free memory pointer.\n                mstore(0x40, m)\n            }\n        }\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\n    ///\n    /// This function only accepts EIP-2098 short form signatures.\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\n    ///\n    /// To be honest, I do not recommend using EIP-2098 signatures\n    /// for simplicity, performance, and security reasons. Most if not\n    /// all clients support traditional non EIP-2098 signatures by default.\n    /// As such, this method is intentionally not fully inlined.\n    /// It is merely included for completeness.\n    ///\n    /// WARNING!\n    /// The `result` will be the zero address upon recovery failure.\n    /// As such, it is extremely important to ensure that the address which\n    /// the `result` is compared against is never zero.\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal view returns (address result) {\n        uint8 v;\n        bytes32 s;\n        assembly {\n            s := shr(1, shl(1, vs))\n            v := add(shr(255, vs), 27)\n        }\n        result = recover(hash, v, r, s);\n    }\n\n    /// @dev Recovers the signer's address from a message digest `hash`,\n    /// and the signature defined by `v`, `r`, `s`.\n    ///\n    /// WARNING!\n    /// The `result` will be the zero address upon recovery failure.\n    /// As such, it is extremely important to ensure that the address which\n    /// the `result` is compared against is never zero.\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (address result) {\n        assembly {\n            // Copy the free memory pointer so that we can restore it later.\n            let m := mload(0x40)\n\n            // If `s` in lower half order, such that the signature is not malleable.\n            if iszero(gt(s, MALLEABILITY_THRESHOLD)) {\n                mstore(0x00, hash)\n                mstore(0x20, v)\n                mstore(0x40, r)\n                mstore(0x60, s)\n                pop(\n                    staticcall(\n                        gas(), // Amount of gas left for the transaction.\n                        0x01, // Address of `ecrecover`.\n                        0x00, // Start of input.\n                        0x80, // Size of input.\n                        0x40, // Start of output.\n                        0x20 // Size of output.\n                    )\n                )\n                // Restore the zero slot.\n                mstore(0x60, 0)\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\n                result := mload(sub(0x60, returndatasize()))\n            }\n            // Restore the free memory pointer.\n            mstore(0x40, m)\n        }\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Hashing Operations\n    /// -----------------------------------------------------------------------\n\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\n    /// This produces a hash corresponding to the one signed with the\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\n    /// JSON-RPC method as part of EIP-191.\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\n        assembly {\n            // Store into scratch space for keccak256.\n            mstore(0x20, hash)\n            mstore(0x00, \"\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n32\")\n            // 0x40 - 0x04 = 0x3c\n            result := keccak256(0x04, 0x3c)\n        }\n    }\n\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\n    /// This produces a hash corresponding to the one signed with the\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\n    /// JSON-RPC method as part of EIP-191.\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\n        assembly {\n            // We need at most 128 bytes for Ethereum signed message header.\n            // The max length of the ASCII reprenstation of a uint256 is 78 bytes.\n            // The length of \"\\x19Ethereum Signed Message:\\n\" is 26 bytes (i.e. 0x1a).\n            // The next multiple of 32 above 78 + 26 is 128 (i.e. 0x80).\n\n            // Instead of allocating, we temporarily copy the 128 bytes before the\n            // start of `s` data to some variables.\n            let m3 := mload(sub(s, 0x60))\n            let m2 := mload(sub(s, 0x40))\n            let m1 := mload(sub(s, 0x20))\n            // The length of `s` is in bytes.\n            let sLength := mload(s)\n\n            let ptr := add(s, 0x20)\n\n            // `end` marks the end of the memory which we will compute the keccak256 of.\n            let end := add(ptr, sLength)\n\n            // Convert the length of the bytes to ASCII decimal representation\n            // and store it into the memory.\n            // prettier-ignore\n            for { let temp := sLength } 1 {} {\n                ptr := sub(ptr, 1)\n                mstore8(ptr, add(48, mod(temp, 10)))\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            // Copy the header over to the memory.\n            mstore(sub(ptr, 0x20), \"\\x00\\x00\\x00\\x00\\x00\\x00\\x19Ethereum Signed Message:\\n\")\n            // Compute the keccak256 of the memory.\n            result := keccak256(sub(ptr, 0x1a), sub(end, sub(ptr, 0x1a)))\n\n            // Restore the previous memory.\n            mstore(s, sLength)\n            mstore(sub(s, 0x20), m1)\n            mstore(sub(s, 0x40), m2)\n            mstore(sub(s, 0x60), m3)\n        }\n    }\n}\n"
      },
      "contracts/Solbase/utils/SignatureCheckerLib.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ECDSA.sol\";\n\n/// @notice Signature verification helper that supports both ECDSA signatures from EOAs\n/// and ERC1271 signatures from smart contract wallets like Argent and Gnosis safe.\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/SignatureCheckerLib.sol)\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/SignatureCheckerLib.sol)\nlibrary SignatureCheckerLib {\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes calldata signature\n    ) internal view returns (bool isValid) {\n        if (signer == address(0)) return false;\n\n        if (ECDSA.recover(hash, signature) == signer) return true;\n\n        assembly {\n            // Load the free memory pointer.\n            // Simply using the free memory usually costs less if many slots are needed.\n            let m := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(m, 0x1626ba7e) // `bytes4(keccak256(\"isValidSignature(bytes32,bytes)\"))`.\n            mstore(add(m, 0x20), hash)\n            mstore(add(m, 0x40), 0x40) // The offset of the `signature` in the calldata.\n            // Copy the `signature` and its length over.\n            calldatacopy(add(m, 0x60), sub(signature.offset, 0x20), 0x80)\n\n            isValid := and(\n                and(\n                    // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\n                    eq(mload(0x00), shl(224, mload(m))),\n                    // Whether the returndata is exactly 0x20 bytes (1 word) long .\n                    eq(returndatasize(), 0x20)\n                ),\n                // Whether the staticcall does not revert.\n                // This must be placed at the end of the `and` clause,\n                // as the arguments are evaluated from right to left.\n                staticcall(\n                    gas(), // Remaining gas.\n                    signer, // The `signer` address.\n                    add(m, 0x1c), // Offset of calldata in memory.\n                    0xc4, // Length of calldata in memory.\n                    0x00, // Offset of returndata.\n                    0x20 // Length of returndata to write.\n                )\n            )\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "istanbul",
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/Solbase/utils/ECDSA.sol": {
        "ECDSA": {
          "abi": [],
          "devdoc": {
            "author": "SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/ECDSA.sol)Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)",
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "MALLEABILITY_THRESHOLD": {
                "details": "The number which `s` must not exceed in order for the signature to be non-malleable."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d67648f9c8d1fa8fec2d473eb3dfe004bfa855212d892b1f914796e6ba0eeed164736f6c634300080f0033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 PUSH23 0x48F9C8D1FA8FEC2D473EB3DFE004BFA855212D892B1F91 SELFBALANCE SWAP7 0xE6 0xBA 0xE 0xEE 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
              "sourceMap": "286:8409:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;286:8409:0;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d67648f9c8d1fa8fec2d473eb3dfe004bfa855212d892b1f914796e6ba0eeed164736f6c634300080f0033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 PUSH23 0x48F9C8D1FA8FEC2D473EB3DFE004BFA855212D892B1F91 SELFBALANCE SWAP7 0xE6 0xBA 0xE 0xEE 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xF STOP CALLER ",
              "sourceMap": "286:8409:0:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "recover(bytes32,bytes calldata)": "infinite",
                "recover(bytes32,bytes32,bytes32)": "infinite",
                "recover(bytes32,uint8,bytes32,bytes32)": "infinite",
                "toEthSignedMessageHash(bytes memory)": "infinite",
                "toEthSignedMessageHash(bytes32)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/ECDSA.sol)Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MALLEABILITY_THRESHOLD\":{\"details\":\"The number which `s` must not exceed in order for the signature to be non-malleable.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Gas-optimized ECDSA wrapper.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Solbase/utils/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Solbase/utils/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Gas-optimized ECDSA wrapper.\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/ECDSA.sol)\\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\\nlibrary ECDSA {\\n    /// -----------------------------------------------------------------------\\n    /// Constants\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev The number which `s` must not exceed in order for\\n    /// the signature to be non-malleable.\\n    bytes32 internal constant MALLEABILITY_THRESHOLD =\\n        0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Recovery Operations\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Recovers the signer's address from a message digest `hash`,\\n    /// and the `signature`.\\n    ///\\n    /// This function does NOT accept EIP-2098 short form signatures.\\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\\n    /// short form signatures instead.\\n    ///\\n    /// WARNING!\\n    /// The `result` will be the zero address upon recovery failure.\\n    /// As such, it is extremely important to ensure that the address which\\n    /// the `result` is compared against is never zero.\\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address result) {\\n        assembly {\\n            if eq(signature.length, 65) {\\n                // Copy the free memory pointer so that we can restore it later.\\n                let m := mload(0x40)\\n                // Directly copy `r` and `s` from the calldata.\\n                calldatacopy(0x40, signature.offset, 0x40)\\n\\n                // If `s` in lower half order, such that the signature is not malleable.\\n                if iszero(gt(mload(0x60), MALLEABILITY_THRESHOLD)) {\\n                    mstore(0x00, hash)\\n                    // Compute `v` and store it in the scratch space.\\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\\n                    pop(\\n                        staticcall(\\n                            gas(), // Amount of gas left for the transaction.\\n                            0x01, // Address of `ecrecover`.\\n                            0x00, // Start of input.\\n                            0x80, // Size of input.\\n                            0x40, // Start of output.\\n                            0x20 // Size of output.\\n                        )\\n                    )\\n                    // Restore the zero slot.\\n                    mstore(0x60, 0)\\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                    result := mload(sub(0x60, returndatasize()))\\n                }\\n                // Restore the free memory pointer.\\n                mstore(0x40, m)\\n            }\\n        }\\n    }\\n\\n    /// @dev Recovers the signer's address from a message digest `hash`,\\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\\n    ///\\n    /// This function only accepts EIP-2098 short form signatures.\\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\\n    ///\\n    /// To be honest, I do not recommend using EIP-2098 signatures\\n    /// for simplicity, performance, and security reasons. Most if not\\n    /// all clients support traditional non EIP-2098 signatures by default.\\n    /// As such, this method is intentionally not fully inlined.\\n    /// It is merely included for completeness.\\n    ///\\n    /// WARNING!\\n    /// The `result` will be the zero address upon recovery failure.\\n    /// As such, it is extremely important to ensure that the address which\\n    /// the `result` is compared against is never zero.\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (address result) {\\n        uint8 v;\\n        bytes32 s;\\n        assembly {\\n            s := shr(1, shl(1, vs))\\n            v := add(shr(255, vs), 27)\\n        }\\n        result = recover(hash, v, r, s);\\n    }\\n\\n    /// @dev Recovers the signer's address from a message digest `hash`,\\n    /// and the signature defined by `v`, `r`, `s`.\\n    ///\\n    /// WARNING!\\n    /// The `result` will be the zero address upon recovery failure.\\n    /// As such, it is extremely important to ensure that the address which\\n    /// the `result` is compared against is never zero.\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (address result) {\\n        assembly {\\n            // Copy the free memory pointer so that we can restore it later.\\n            let m := mload(0x40)\\n\\n            // If `s` in lower half order, such that the signature is not malleable.\\n            if iszero(gt(s, MALLEABILITY_THRESHOLD)) {\\n                mstore(0x00, hash)\\n                mstore(0x20, v)\\n                mstore(0x40, r)\\n                mstore(0x60, s)\\n                pop(\\n                    staticcall(\\n                        gas(), // Amount of gas left for the transaction.\\n                        0x01, // Address of `ecrecover`.\\n                        0x00, // Start of input.\\n                        0x80, // Size of input.\\n                        0x40, // Start of output.\\n                        0x20 // Size of output.\\n                    )\\n                )\\n                // Restore the zero slot.\\n                mstore(0x60, 0)\\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                result := mload(sub(0x60, returndatasize()))\\n            }\\n            // Restore the free memory pointer.\\n            mstore(0x40, m)\\n        }\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Hashing Operations\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\\n    /// This produces a hash corresponding to the one signed with the\\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\\n    /// JSON-RPC method as part of EIP-191.\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\\n        assembly {\\n            // Store into scratch space for keccak256.\\n            mstore(0x20, hash)\\n            mstore(0x00, \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            // 0x40 - 0x04 = 0x3c\\n            result := keccak256(0x04, 0x3c)\\n        }\\n    }\\n\\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\\n    /// This produces a hash corresponding to the one signed with the\\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\\n    /// JSON-RPC method as part of EIP-191.\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\\n        assembly {\\n            // We need at most 128 bytes for Ethereum signed message header.\\n            // The max length of the ASCII reprenstation of a uint256 is 78 bytes.\\n            // The length of \\\"\\\\x19Ethereum Signed Message:\\\\n\\\" is 26 bytes (i.e. 0x1a).\\n            // The next multiple of 32 above 78 + 26 is 128 (i.e. 0x80).\\n\\n            // Instead of allocating, we temporarily copy the 128 bytes before the\\n            // start of `s` data to some variables.\\n            let m3 := mload(sub(s, 0x60))\\n            let m2 := mload(sub(s, 0x40))\\n            let m1 := mload(sub(s, 0x20))\\n            // The length of `s` is in bytes.\\n            let sLength := mload(s)\\n\\n            let ptr := add(s, 0x20)\\n\\n            // `end` marks the end of the memory which we will compute the keccak256 of.\\n            let end := add(ptr, sLength)\\n\\n            // Convert the length of the bytes to ASCII decimal representation\\n            // and store it into the memory.\\n            // prettier-ignore\\n            for { let temp := sLength } 1 {} {\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            // Copy the header over to the memory.\\n            mstore(sub(ptr, 0x20), \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19Ethereum Signed Message:\\\\n\\\")\\n            // Compute the keccak256 of the memory.\\n            result := keccak256(sub(ptr, 0x1a), sub(end, sub(ptr, 0x1a)))\\n\\n            // Restore the previous memory.\\n            mstore(s, sLength)\\n            mstore(sub(s, 0x20), m1)\\n            mstore(sub(s, 0x40), m2)\\n            mstore(sub(s, 0x60), m3)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe745bb9ccb8d8ab720e938a280f5fe2c43002c30450693f1fd421566cb5f3f44\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Gas-optimized ECDSA wrapper.",
            "version": 1
          }
        }
      },
      "contracts/Solbase/utils/SignatureCheckerLib.sol": {
        "SignatureCheckerLib": {
          "abi": [],
          "devdoc": {
            "author": "SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/SignatureCheckerLib.sol)Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/SignatureCheckerLib.sol)",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ec5e56c7df820f3333d83c2337c548029a776ce11b8bb9c6a39e26bff6a7f38b64736f6c634300080f0033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC 0x5E JUMP 0xC7 0xDF DUP3 0xF CALLER CALLER 0xD8 EXTCODECOPY 0x23 CALLDATACOPY 0xC5 BASEFEE MUL SWAP11 PUSH24 0x6CE11B8BB9C6A39E26BFF6A7F38B64736F6C634300080F00 CALLER ",
              "sourceMap": "468:1903:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;468:1903:1;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ec5e56c7df820f3333d83c2337c548029a776ce11b8bb9c6a39e26bff6a7f38b64736f6c634300080f0033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC 0x5E JUMP 0xC7 0xDF DUP3 0xF CALLER CALLER 0xD8 EXTCODECOPY 0x23 CALLDATACOPY 0xC5 BASEFEE MUL SWAP11 PUSH24 0x6CE11B8BB9C6A39E26BFF6A7F38B64736F6C634300080F00 CALLER ",
              "sourceMap": "468:1903:1:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "17200",
                "executionCost": "103",
                "totalCost": "17303"
              },
              "internal": {
                "isValidSignatureNow(address,bytes32,bytes calldata)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/SignatureCheckerLib.sol)Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/SignatureCheckerLib.sol)\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Signature verification helper that supports both ECDSA signatures from EOAs and ERC1271 signatures from smart contract wallets like Argent and Gnosis safe.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Solbase/utils/SignatureCheckerLib.sol\":\"SignatureCheckerLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Solbase/utils/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Gas-optimized ECDSA wrapper.\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/ECDSA.sol)\\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\\nlibrary ECDSA {\\n    /// -----------------------------------------------------------------------\\n    /// Constants\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev The number which `s` must not exceed in order for\\n    /// the signature to be non-malleable.\\n    bytes32 internal constant MALLEABILITY_THRESHOLD =\\n        0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Recovery Operations\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Recovers the signer's address from a message digest `hash`,\\n    /// and the `signature`.\\n    ///\\n    /// This function does NOT accept EIP-2098 short form signatures.\\n    /// Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\\n    /// short form signatures instead.\\n    ///\\n    /// WARNING!\\n    /// The `result` will be the zero address upon recovery failure.\\n    /// As such, it is extremely important to ensure that the address which\\n    /// the `result` is compared against is never zero.\\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address result) {\\n        assembly {\\n            if eq(signature.length, 65) {\\n                // Copy the free memory pointer so that we can restore it later.\\n                let m := mload(0x40)\\n                // Directly copy `r` and `s` from the calldata.\\n                calldatacopy(0x40, signature.offset, 0x40)\\n\\n                // If `s` in lower half order, such that the signature is not malleable.\\n                if iszero(gt(mload(0x60), MALLEABILITY_THRESHOLD)) {\\n                    mstore(0x00, hash)\\n                    // Compute `v` and store it in the scratch space.\\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\\n                    pop(\\n                        staticcall(\\n                            gas(), // Amount of gas left for the transaction.\\n                            0x01, // Address of `ecrecover`.\\n                            0x00, // Start of input.\\n                            0x80, // Size of input.\\n                            0x40, // Start of output.\\n                            0x20 // Size of output.\\n                        )\\n                    )\\n                    // Restore the zero slot.\\n                    mstore(0x60, 0)\\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                    result := mload(sub(0x60, returndatasize()))\\n                }\\n                // Restore the free memory pointer.\\n                mstore(0x40, m)\\n            }\\n        }\\n    }\\n\\n    /// @dev Recovers the signer's address from a message digest `hash`,\\n    /// and the EIP-2098 short form signature defined by `r` and `vs`.\\n    ///\\n    /// This function only accepts EIP-2098 short form signatures.\\n    /// See: https://eips.ethereum.org/EIPS/eip-2098\\n    ///\\n    /// To be honest, I do not recommend using EIP-2098 signatures\\n    /// for simplicity, performance, and security reasons. Most if not\\n    /// all clients support traditional non EIP-2098 signatures by default.\\n    /// As such, this method is intentionally not fully inlined.\\n    /// It is merely included for completeness.\\n    ///\\n    /// WARNING!\\n    /// The `result` will be the zero address upon recovery failure.\\n    /// As such, it is extremely important to ensure that the address which\\n    /// the `result` is compared against is never zero.\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (address result) {\\n        uint8 v;\\n        bytes32 s;\\n        assembly {\\n            s := shr(1, shl(1, vs))\\n            v := add(shr(255, vs), 27)\\n        }\\n        result = recover(hash, v, r, s);\\n    }\\n\\n    /// @dev Recovers the signer's address from a message digest `hash`,\\n    /// and the signature defined by `v`, `r`, `s`.\\n    ///\\n    /// WARNING!\\n    /// The `result` will be the zero address upon recovery failure.\\n    /// As such, it is extremely important to ensure that the address which\\n    /// the `result` is compared against is never zero.\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (address result) {\\n        assembly {\\n            // Copy the free memory pointer so that we can restore it later.\\n            let m := mload(0x40)\\n\\n            // If `s` in lower half order, such that the signature is not malleable.\\n            if iszero(gt(s, MALLEABILITY_THRESHOLD)) {\\n                mstore(0x00, hash)\\n                mstore(0x20, v)\\n                mstore(0x40, r)\\n                mstore(0x60, s)\\n                pop(\\n                    staticcall(\\n                        gas(), // Amount of gas left for the transaction.\\n                        0x01, // Address of `ecrecover`.\\n                        0x00, // Start of input.\\n                        0x80, // Size of input.\\n                        0x40, // Start of output.\\n                        0x20 // Size of output.\\n                    )\\n                )\\n                // Restore the zero slot.\\n                mstore(0x60, 0)\\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                result := mload(sub(0x60, returndatasize()))\\n            }\\n            // Restore the free memory pointer.\\n            mstore(0x40, m)\\n        }\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Hashing Operations\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\\n    /// This produces a hash corresponding to the one signed with the\\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\\n    /// JSON-RPC method as part of EIP-191.\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\\n        assembly {\\n            // Store into scratch space for keccak256.\\n            mstore(0x20, hash)\\n            mstore(0x00, \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            // 0x40 - 0x04 = 0x3c\\n            result := keccak256(0x04, 0x3c)\\n        }\\n    }\\n\\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\\n    /// This produces a hash corresponding to the one signed with the\\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\\n    /// JSON-RPC method as part of EIP-191.\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\\n        assembly {\\n            // We need at most 128 bytes for Ethereum signed message header.\\n            // The max length of the ASCII reprenstation of a uint256 is 78 bytes.\\n            // The length of \\\"\\\\x19Ethereum Signed Message:\\\\n\\\" is 26 bytes (i.e. 0x1a).\\n            // The next multiple of 32 above 78 + 26 is 128 (i.e. 0x80).\\n\\n            // Instead of allocating, we temporarily copy the 128 bytes before the\\n            // start of `s` data to some variables.\\n            let m3 := mload(sub(s, 0x60))\\n            let m2 := mload(sub(s, 0x40))\\n            let m1 := mload(sub(s, 0x20))\\n            // The length of `s` is in bytes.\\n            let sLength := mload(s)\\n\\n            let ptr := add(s, 0x20)\\n\\n            // `end` marks the end of the memory which we will compute the keccak256 of.\\n            let end := add(ptr, sLength)\\n\\n            // Convert the length of the bytes to ASCII decimal representation\\n            // and store it into the memory.\\n            // prettier-ignore\\n            for { let temp := sLength } 1 {} {\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            // Copy the header over to the memory.\\n            mstore(sub(ptr, 0x20), \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19Ethereum Signed Message:\\\\n\\\")\\n            // Compute the keccak256 of the memory.\\n            result := keccak256(sub(ptr, 0x1a), sub(end, sub(ptr, 0x1a)))\\n\\n            // Restore the previous memory.\\n            mstore(s, sLength)\\n            mstore(sub(s, 0x20), m1)\\n            mstore(sub(s, 0x40), m2)\\n            mstore(sub(s, 0x60), m3)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe745bb9ccb8d8ab720e938a280f5fe2c43002c30450693f1fd421566cb5f3f44\",\"license\":\"MIT\"},\"contracts/Solbase/utils/SignatureCheckerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/// @notice Signature verification helper that supports both ECDSA signatures from EOAs\\n/// and ERC1271 signatures from smart contract wallets like Argent and Gnosis safe.\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/SignatureCheckerLib.sol)\\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/SignatureCheckerLib.sol)\\nlibrary SignatureCheckerLib {\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool isValid) {\\n        if (signer == address(0)) return false;\\n\\n        if (ECDSA.recover(hash, signature) == signer) return true;\\n\\n        assembly {\\n            // Load the free memory pointer.\\n            // Simply using the free memory usually costs less if many slots are needed.\\n            let m := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(m, 0x1626ba7e) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n            mstore(add(m, 0x20), hash)\\n            mstore(add(m, 0x40), 0x40) // The offset of the `signature` in the calldata.\\n            // Copy the `signature` and its length over.\\n            calldatacopy(add(m, 0x60), sub(signature.offset, 0x20), 0x80)\\n\\n            isValid := and(\\n                and(\\n                    // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                    eq(mload(0x00), shl(224, mload(m))),\\n                    // Whether the returndata is exactly 0x20 bytes (1 word) long .\\n                    eq(returndatasize(), 0x20)\\n                ),\\n                // Whether the staticcall does not revert.\\n                // This must be placed at the end of the `and` clause,\\n                // as the arguments are evaluated from right to left.\\n                staticcall(\\n                    gas(), // Remaining gas.\\n                    signer, // The `signer` address.\\n                    add(m, 0x1c), // Offset of calldata in memory.\\n                    0xc4, // Length of calldata in memory.\\n                    0x00, // Offset of returndata.\\n                    0x20 // Length of returndata to write.\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb322ff24f5734cb9ace0b98ee273f32db1152f1193972401a4fdbe758868c97\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [],
            "types": null
          },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Signature verification helper that supports both ECDSA signatures from EOAs and ERC1271 signatures from smart contract wallets like Argent and Gnosis safe.",
            "version": 1
          }
        }
      }
    },
    "sources": {
      "contracts/Solbase/utils/ECDSA.sol": {
        "ast": {
          "absolutePath": "contracts/Solbase/utils/ECDSA.sol",
          "exportedSymbols": {
            "ECDSA": [
              84
            ]
          },
          "id": 85,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".4"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ECDSA",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "57:229:0",
                "text": "@notice Gas-optimized ECDSA wrapper.\n @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/ECDSA.sol)\n @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)"
              },
              "fullyImplemented": true,
              "id": 84,
              "linearizedBaseContracts": [
                84
              ],
              "name": "ECDSA",
              "nameLocation": "294:5:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": true,
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "485:101:0",
                    "text": "@dev The number which `s` must not exceed in order for\n the signature to be non-malleable."
                  },
                  "id": 6,
                  "mutability": "constant",
                  "name": "MALLEABILITY_THRESHOLD",
                  "nameLocation": "617:22:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 84,
                  "src": "591:125:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "591:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": {
                    "hexValue": "307837666666666666666666666666666666666666666666666666666666666666663564353736653733353761343530316464666539326634363638316232306130",
                    "id": 5,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "650:66:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
                      "typeString": "int_const 5789...(69 digits omitted)...7168"
                    },
                    "value": "0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0"
                  },
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 17,
                    "nodeType": "Block",
                    "src": "1525:1487:0",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1544:1462:0",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1586:1410:0",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "1685:20:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1700:4:0",
                                          "type": "",
                                          "value": "0x40"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1694:5:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1694:11:0"
                                    },
                                    "variables": [
                                      {
                                        "name": "m",
                                        "nodeType": "YulTypedName",
                                        "src": "1689:1:0",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1799:4:0",
                                          "type": "",
                                          "value": "0x40"
                                        },
                                        {
                                          "name": "signature.offset",
                                          "nodeType": "YulIdentifier",
                                          "src": "1805:16:0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1823:4:0",
                                          "type": "",
                                          "value": "0x40"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "calldatacopy",
                                        "nodeType": "YulIdentifier",
                                        "src": "1786:12:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1786:42:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1786:42:0"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "1986:912:0",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2015:4:0",
                                                "type": "",
                                                "value": "0x00"
                                              },
                                              {
                                                "name": "hash",
                                                "nodeType": "YulIdentifier",
                                                "src": "2021:4:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2008:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2008:18:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2008:18:0"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2124:4:0",
                                                "type": "",
                                                "value": "0x20"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2135:1:0",
                                                    "type": "",
                                                    "value": "0"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "name": "signature.offset",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "2155:16:0"
                                                          },
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "2173:4:0",
                                                            "type": "",
                                                            "value": "0x40"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "add",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2151:3:0"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2151:27:0"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "calldataload",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2138:12:0"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2138:41:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "byte",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2130:4:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2130:50:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2117:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2117:64:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2117:64:0"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [],
                                                    "functionName": {
                                                      "name": "gas",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2271:3:0"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2271:5:0"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2349:4:0",
                                                    "type": "",
                                                    "value": "0x01"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2410:4:0",
                                                    "type": "",
                                                    "value": "0x00"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2463:4:0",
                                                    "type": "",
                                                    "value": "0x80"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2515:4:0",
                                                    "type": "",
                                                    "value": "0x40"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2569:4:0",
                                                    "type": "",
                                                    "value": "0x20"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "staticcall",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2231:10:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2231:387:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "pop",
                                              "nodeType": "YulIdentifier",
                                              "src": "2202:3:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2202:438:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2202:438:0"
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2714:4:0",
                                                "type": "",
                                                "value": "0x60"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2720:1:0",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2707:6:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2707:15:0"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2707:15:0"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2836:44:0",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2856:4:0",
                                                    "type": "",
                                                    "value": "0x60"
                                                  },
                                                  {
                                                    "arguments": [],
                                                    "functionName": {
                                                      "name": "returndatasize",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2862:14:0"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2862:16:0"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sub",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2852:3:0"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2852:27:0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2846:5:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2846:34:0"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "result",
                                              "nodeType": "YulIdentifier",
                                              "src": "2836:6:0"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "1954:4:0",
                                                  "type": "",
                                                  "value": "0x60"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "1948:5:0"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1948:11:0"
                                            },
                                            {
                                              "name": "MALLEABILITY_THRESHOLD",
                                              "nodeType": "YulIdentifier",
                                              "src": "1961:22:0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "gt",
                                            "nodeType": "YulIdentifier",
                                            "src": "1945:2:0"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1945:39:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "iszero",
                                        "nodeType": "YulIdentifier",
                                        "src": "1938:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1938:47:0"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "1935:963:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2974:4:0",
                                          "type": "",
                                          "value": "0x40"
                                        },
                                        {
                                          "name": "m",
                                          "nodeType": "YulIdentifier",
                                          "src": "2980:1:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2967:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2967:15:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2967:15:0"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "signature.length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1564:16:0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1582:2:0",
                                    "type": "",
                                    "value": "65"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1561:2:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1561:24:0"
                              },
                              "nodeType": "YulIf",
                              "src": "1558:1438:0"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 6,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1961:22:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 9,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2021:4:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 14,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2836:6:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 11,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1564:16:0",
                            "suffix": "length",
                            "valueSize": 1
                          },
                          {
                            "declaration": 11,
                            "isOffset": true,
                            "isSlot": false,
                            "src": "1805:16:0",
                            "suffix": "offset",
                            "valueSize": 1
                          },
                          {
                            "declaration": 11,
                            "isOffset": true,
                            "isSlot": false,
                            "src": "2155:16:0",
                            "suffix": "offset",
                            "valueSize": 1
                          }
                        ],
                        "id": 16,
                        "nodeType": "InlineAssembly",
                        "src": "1535:1471:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 7,
                    "nodeType": "StructuredDocumentation",
                    "src": "912:512:0",
                    "text": "@dev Recovers the signer's address from a message digest `hash`,\n and the `signature`.\n This function does NOT accept EIP-2098 short form signatures.\n Use `recover(bytes32 hash, bytes32 r, bytes32 vs)` for EIP-2098\n short form signatures instead.\n WARNING!\n The `result` will be the zero address upon recovery failure.\n As such, it is extremely important to ensure that the address which\n the `result` is compared against is never zero."
                  },
                  "id": 18,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "recover",
                  "nameLocation": "1438:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 12,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 9,
                        "mutability": "mutable",
                        "name": "hash",
                        "nameLocation": "1454:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 18,
                        "src": "1446:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 8,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1446:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 11,
                        "mutability": "mutable",
                        "name": "signature",
                        "nameLocation": "1475:9:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 18,
                        "src": "1460:24:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 10,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1460:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1445:40:0"
                  },
                  "returnParameters": {
                    "id": 15,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 14,
                        "mutability": "mutable",
                        "name": "result",
                        "nameLocation": "1517:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 18,
                        "src": "1509:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 13,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1509:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1508:16:0"
                  },
                  "scope": 84,
                  "src": "1429:1583:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 46,
                    "nodeType": "Block",
                    "src": "3974:188:0",
                    "statements": [
                      {
                        "assignments": [
                          31
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 31,
                            "mutability": "mutable",
                            "name": "v",
                            "nameLocation": "3990:1:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 46,
                            "src": "3984:7:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 30,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "3984:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 32,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3984:7:0"
                      },
                      {
                        "assignments": [
                          34
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 34,
                            "mutability": "mutable",
                            "name": "s",
                            "nameLocation": "4009:1:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 46,
                            "src": "4001:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 33,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "4001:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 35,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4001:9:0"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "4029:86:0",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4043:23:0",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4052:1:0",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4059:1:0",
                                        "type": "",
                                        "value": "1"
                                      },
                                      {
                                        "name": "vs",
                                        "nodeType": "YulIdentifier",
                                        "src": "4062:2:0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "4055:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4055:10:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "shr",
                                  "nodeType": "YulIdentifier",
                                  "src": "4048:3:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4048:18:0"
                              },
                              "variableNames": [
                                {
                                  "name": "s",
                                  "nodeType": "YulIdentifier",
                                  "src": "4043:1:0"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4079:26:0",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4092:3:0",
                                        "type": "",
                                        "value": "255"
                                      },
                                      {
                                        "name": "vs",
                                        "nodeType": "YulIdentifier",
                                        "src": "4097:2:0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shr",
                                      "nodeType": "YulIdentifier",
                                      "src": "4088:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4088:12:0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4102:2:0",
                                    "type": "",
                                    "value": "27"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4084:3:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4084:21:0"
                              },
                              "variableNames": [
                                {
                                  "name": "v",
                                  "nodeType": "YulIdentifier",
                                  "src": "4079:1:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 34,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4043:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 31,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4079:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 25,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4062:2:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 25,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4097:2:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 36,
                        "nodeType": "InlineAssembly",
                        "src": "4020:95:0"
                      },
                      {
                        "expression": {
                          "id": 44,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 37,
                            "name": "result",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28,
                            "src": "4124:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 39,
                                "name": "hash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 21,
                                "src": "4141:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 40,
                                "name": "v",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 31,
                                "src": "4147:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              {
                                "id": 41,
                                "name": "r",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 23,
                                "src": "4150:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 42,
                                "name": "s",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "4153:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "id": 38,
                              "name": "recover",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                18,
                                47,
                                63
                              ],
                              "referencedDeclaration": 63,
                              "src": "4133:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                                "typeString": "function (bytes32,uint8,bytes32,bytes32) view returns (address)"
                              }
                            },
                            "id": 43,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4133:22:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "4124:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 45,
                        "nodeType": "ExpressionStatement",
                        "src": "4124:31:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 19,
                    "nodeType": "StructuredDocumentation",
                    "src": "3018:828:0",
                    "text": "@dev Recovers the signer's address from a message digest `hash`,\n and the EIP-2098 short form signature defined by `r` and `vs`.\n This function only accepts EIP-2098 short form signatures.\n See: https://eips.ethereum.org/EIPS/eip-2098\n To be honest, I do not recommend using EIP-2098 signatures\n for simplicity, performance, and security reasons. Most if not\n all clients support traditional non EIP-2098 signatures by default.\n As such, this method is intentionally not fully inlined.\n It is merely included for completeness.\n WARNING!\n The `result` will be the zero address upon recovery failure.\n As such, it is extremely important to ensure that the address which\n the `result` is compared against is never zero."
                  },
                  "id": 47,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "recover",
                  "nameLocation": "3860:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 26,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 21,
                        "mutability": "mutable",
                        "name": "hash",
                        "nameLocation": "3885:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 47,
                        "src": "3877:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 20,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3877:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 23,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "3907:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 47,
                        "src": "3899:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 22,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3899:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 25,
                        "mutability": "mutable",
                        "name": "vs",
                        "nameLocation": "3926:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 47,
                        "src": "3918:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 24,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3918:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3867:67:0"
                  },
                  "returnParameters": {
                    "id": 29,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 28,
                        "mutability": "mutable",
                        "name": "result",
                        "nameLocation": "3966:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 47,
                        "src": "3958:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3958:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3957:16:0"
                  },
                  "scope": 84,
                  "src": "3851:311:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 62,
                    "nodeType": "Block",
                    "src": "4658:1151:0",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "4677:1126:0",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4768:20:0",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4783:4:0",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4777:5:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4777:11:0"
                              },
                              "variables": [
                                {
                                  "name": "m",
                                  "nodeType": "YulTypedName",
                                  "src": "4772:1:0",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4928:789:0",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4953:4:0",
                                          "type": "",
                                          "value": "0x00"
                                        },
                                        {
                                          "name": "hash",
                                          "nodeType": "YulIdentifier",
                                          "src": "4959:4:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4946:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4946:18:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4946:18:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4988:4:0",
                                          "type": "",
                                          "value": "0x20"
                                        },
                                        {
                                          "name": "v",
                                          "nodeType": "YulIdentifier",
                                          "src": "4994:1:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4981:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4981:15:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4981:15:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5020:4:0",
                                          "type": "",
                                          "value": "0x40"
                                        },
                                        {
                                          "name": "r",
                                          "nodeType": "YulIdentifier",
                                          "src": "5026:1:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5013:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5013:15:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5013:15:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5052:4:0",
                                          "type": "",
                                          "value": "0x60"
                                        },
                                        {
                                          "name": "s",
                                          "nodeType": "YulIdentifier",
                                          "src": "5058:1:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5045:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5045:15:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5045:15:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [],
                                              "functionName": {
                                                "name": "gas",
                                                "nodeType": "YulIdentifier",
                                                "src": "5138:3:0"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5138:5:0"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "5212:4:0",
                                              "type": "",
                                              "value": "0x01"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "5269:4:0",
                                              "type": "",
                                              "value": "0x00"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "5318:4:0",
                                              "type": "",
                                              "value": "0x80"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "5366:4:0",
                                              "type": "",
                                              "value": "0x40"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "5416:4:0",
                                              "type": "",
                                              "value": "0x20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "staticcall",
                                            "nodeType": "YulIdentifier",
                                            "src": "5102:10:0"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5102:359:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "pop",
                                        "nodeType": "YulIdentifier",
                                        "src": "5077:3:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5077:402:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5077:402:0"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5545:4:0",
                                          "type": "",
                                          "value": "0x60"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5551:1:0",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5538:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5538:15:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5538:15:0"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "5659:44:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "5679:4:0",
                                              "type": "",
                                              "value": "0x60"
                                            },
                                            {
                                              "arguments": [],
                                              "functionName": {
                                                "name": "returndatasize",
                                                "nodeType": "YulIdentifier",
                                                "src": "5685:14:0"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "5685:16:0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "5675:3:0"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "5675:27:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "5669:5:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5669:34:0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "result",
                                        "nodeType": "YulIdentifier",
                                        "src": "5659:6:0"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "s",
                                        "nodeType": "YulIdentifier",
                                        "src": "4900:1:0"
                                      },
                                      {
                                        "name": "MALLEABILITY_THRESHOLD",
                                        "nodeType": "YulIdentifier",
                                        "src": "4903:22:0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nodeType": "YulIdentifier",
                                      "src": "4897:2:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4897:29:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "4890:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4890:37:0"
                              },
                              "nodeType": "YulIf",
                              "src": "4887:830:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5785:4:0",
                                    "type": "",
                                    "value": "0x40"
                                  },
                                  {
                                    "name": "m",
                                    "nodeType": "YulIdentifier",
                                    "src": "5791:1:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5778:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5778:15:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5778:15:0"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 6,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4903:22:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 50,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4959:4:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 54,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "5026:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 59,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "5659:6:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 56,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4900:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 56,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "5058:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 52,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4994:1:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 61,
                        "nodeType": "InlineAssembly",
                        "src": "4668:1135:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 48,
                    "nodeType": "StructuredDocumentation",
                    "src": "4168:346:0",
                    "text": "@dev Recovers the signer's address from a message digest `hash`,\n and the signature defined by `v`, `r`, `s`.\n WARNING!\n The `result` will be the zero address upon recovery failure.\n As such, it is extremely important to ensure that the address which\n the `result` is compared against is never zero."
                  },
                  "id": 63,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "recover",
                  "nameLocation": "4528:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 57,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 50,
                        "mutability": "mutable",
                        "name": "hash",
                        "nameLocation": "4553:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 63,
                        "src": "4545:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 49,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4545:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 52,
                        "mutability": "mutable",
                        "name": "v",
                        "nameLocation": "4573:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 63,
                        "src": "4567:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 51,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "4567:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 54,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "4592:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 63,
                        "src": "4584:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 53,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4584:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 56,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "4611:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 63,
                        "src": "4603:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 55,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4603:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4535:83:0"
                  },
                  "returnParameters": {
                    "id": 60,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 59,
                        "mutability": "mutable",
                        "name": "result",
                        "nameLocation": "4650:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 63,
                        "src": "4642:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 58,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4642:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4641:16:0"
                  },
                  "scope": 84,
                  "src": "4519:1290:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 72,
                    "nodeType": "Block",
                    "src": "6335:277:0",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "6354:252:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6430:4:0",
                                    "type": "",
                                    "value": "0x20"
                                  },
                                  {
                                    "name": "hash",
                                    "nodeType": "YulIdentifier",
                                    "src": "6436:4:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6423:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6423:18:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6423:18:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6461:4:0",
                                    "type": "",
                                    "value": "0x00"
                                  },
                                  {
                                    "hexValue": "0000000019457468657265756d205369676e6564204d6573736167653a0a3332",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6467:50:0",
                                    "type": "",
                                    "value": "\u0000\u0000\u0000\u0000\u0019Ethereum Signed Message:\n32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "6454:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6454:64:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6454:64:0"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6565:31:0",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6585:4:0",
                                    "type": "",
                                    "value": "0x04"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6591:4:0",
                                    "type": "",
                                    "value": "0x3c"
                                  }
                                ],
                                "functionName": {
                                  "name": "keccak256",
                                  "nodeType": "YulIdentifier",
                                  "src": "6575:9:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6575:21:0"
                              },
                              "variableNames": [
                                {
                                  "name": "result",
                                  "nodeType": "YulIdentifier",
                                  "src": "6565:6:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 66,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6436:4:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 69,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6565:6:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 71,
                        "nodeType": "InlineAssembly",
                        "src": "6345:261:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 64,
                    "nodeType": "StructuredDocumentation",
                    "src": "6003:242:0",
                    "text": "@dev Returns an Ethereum Signed Message, created from a `hash`.\n This produces a hash corresponding to the one signed with the\n [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\n JSON-RPC method as part of EIP-191."
                  },
                  "id": 73,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toEthSignedMessageHash",
                  "nameLocation": "6259:22:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 67,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 66,
                        "mutability": "mutable",
                        "name": "hash",
                        "nameLocation": "6290:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 73,
                        "src": "6282:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 65,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6282:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6281:14:0"
                  },
                  "returnParameters": {
                    "id": 70,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 69,
                        "mutability": "mutable",
                        "name": "result",
                        "nameLocation": "6327:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 73,
                        "src": "6319:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 68,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6319:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6318:16:0"
                  },
                  "scope": 84,
                  "src": "6250:362:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 82,
                    "nodeType": "Block",
                    "src": "6947:1746:0",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "6966:1721:0",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7436:29:0",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "s",
                                        "nodeType": "YulIdentifier",
                                        "src": "7456:1:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7459:4:0",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "7452:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7452:12:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7446:5:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7446:19:0"
                              },
                              "variables": [
                                {
                                  "name": "m3",
                                  "nodeType": "YulTypedName",
                                  "src": "7440:2:0",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7478:29:0",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "s",
                                        "nodeType": "YulIdentifier",
                                        "src": "7498:1:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7501:4:0",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "7494:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7494:12:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7488:5:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7488:19:0"
                              },
                              "variables": [
                                {
                                  "name": "m2",
                                  "nodeType": "YulTypedName",
                                  "src": "7482:2:0",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7520:29:0",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "s",
                                        "nodeType": "YulIdentifier",
                                        "src": "7540:1:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7543:4:0",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "7536:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7536:12:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7530:5:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7530:19:0"
                              },
                              "variables": [
                                {
                                  "name": "m1",
                                  "nodeType": "YulTypedName",
                                  "src": "7524:2:0",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7608:23:0",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "s",
                                    "nodeType": "YulIdentifier",
                                    "src": "7629:1:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7623:5:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7623:8:0"
                              },
                              "variables": [
                                {
                                  "name": "sLength",
                                  "nodeType": "YulTypedName",
                                  "src": "7612:7:0",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7645:23:0",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "s",
                                    "nodeType": "YulIdentifier",
                                    "src": "7660:1:0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7663:4:0",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7656:3:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7656:12:0"
                              },
                              "variables": [
                                {
                                  "name": "ptr",
                                  "nodeType": "YulTypedName",
                                  "src": "7649:3:0",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7771:28:0",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "7786:3:0"
                                  },
                                  {
                                    "name": "sLength",
                                    "nodeType": "YulIdentifier",
                                    "src": "7791:7:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7782:3:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7782:17:0"
                              },
                              "variables": [
                                {
                                  "name": "end",
                                  "nodeType": "YulTypedName",
                                  "src": "7775:3:0",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8001:218:0",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8019:18:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "ptr",
                                          "nodeType": "YulIdentifier",
                                          "src": "8030:3:0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8035:1:0",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "8026:3:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8026:11:0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ptr",
                                        "nodeType": "YulIdentifier",
                                        "src": "8019:3:0"
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "ptr",
                                          "nodeType": "YulIdentifier",
                                          "src": "8062:3:0"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "8071:2:0",
                                              "type": "",
                                              "value": "48"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "name": "temp",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "8079:4:0"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "8085:2:0",
                                                  "type": "",
                                                  "value": "10"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mod",
                                                "nodeType": "YulIdentifier",
                                                "src": "8075:3:0"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "8075:13:0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8067:3:0"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8067:22:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore8",
                                        "nodeType": "YulIdentifier",
                                        "src": "8054:7:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8054:36:0"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8054:36:0"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8107:21:0",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "temp",
                                          "nodeType": "YulIdentifier",
                                          "src": "8119:4:0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8125:2:0",
                                          "type": "",
                                          "value": "10"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "8115:3:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8115:13:0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "temp",
                                        "nodeType": "YulIdentifier",
                                        "src": "8107:4:0"
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "8196:9:0",
                                      "statements": [
                                        {
                                          "nodeType": "YulBreak",
                                          "src": "8198:5:0"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "temp",
                                          "nodeType": "YulIdentifier",
                                          "src": "8190:4:0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "iszero",
                                        "nodeType": "YulIdentifier",
                                        "src": "8183:6:0"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8183:12:0"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "8180:25:0"
                                  }
                                ]
                              },
                              "condition": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7996:1:0",
                                "type": "",
                                "value": "1"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "7998:2:0",
                                "statements": []
                              },
                              "pre": {
                                "nodeType": "YulBlock",
                                "src": "7972:23:0",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "7974:19:0",
                                    "value": {
                                      "name": "sLength",
                                      "nodeType": "YulIdentifier",
                                      "src": "7986:7:0"
                                    },
                                    "variables": [
                                      {
                                        "name": "temp",
                                        "nodeType": "YulTypedName",
                                        "src": "7978:4:0",
                                        "type": ""
                                      }
                                    ]
                                  }
                                ]
                              },
                              "src": "7968:251:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "ptr",
                                        "nodeType": "YulIdentifier",
                                        "src": "8295:3:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8300:4:0",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8291:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8291:14:0"
                                  },
                                  {
                                    "hexValue": "00000000000019457468657265756d205369676e6564204d6573736167653a0a",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8307:56:0",
                                    "type": "",
                                    "value": "\u0000\u0000\u0000\u0000\u0000\u0000\u0019Ethereum Signed Message:\n"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8284:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8284:80:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8284:80:0"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8429:61:0",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "ptr",
                                        "nodeType": "YulIdentifier",
                                        "src": "8453:3:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8458:4:0",
                                        "type": "",
                                        "value": "0x1a"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8449:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8449:14:0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "8469:3:0"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "ptr",
                                            "nodeType": "YulIdentifier",
                                            "src": "8478:3:0"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8483:4:0",
                                            "type": "",
                                            "value": "0x1a"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "8474:3:0"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8474:14:0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8465:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8465:24:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "keccak256",
                                  "nodeType": "YulIdentifier",
                                  "src": "8439:9:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8439:51:0"
                              },
                              "variableNames": [
                                {
                                  "name": "result",
                                  "nodeType": "YulIdentifier",
                                  "src": "8429:6:0"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "s",
                                    "nodeType": "YulIdentifier",
                                    "src": "8555:1:0"
                                  },
                                  {
                                    "name": "sLength",
                                    "nodeType": "YulIdentifier",
                                    "src": "8558:7:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8548:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8548:18:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8548:18:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "s",
                                        "nodeType": "YulIdentifier",
                                        "src": "8590:1:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8593:4:0",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8586:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8586:12:0"
                                  },
                                  {
                                    "name": "m1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8600:2:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8579:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8579:24:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8579:24:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "s",
                                        "nodeType": "YulIdentifier",
                                        "src": "8627:1:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8630:4:0",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8623:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8623:12:0"
                                  },
                                  {
                                    "name": "m2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8637:2:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8616:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8616:24:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8616:24:0"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "s",
                                        "nodeType": "YulIdentifier",
                                        "src": "8664:1:0"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8667:4:0",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "8660:3:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8660:12:0"
                                  },
                                  {
                                    "name": "m3",
                                    "nodeType": "YulIdentifier",
                                    "src": "8674:2:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "8653:6:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8653:24:0"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8653:24:0"
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 79,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "8429:6:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "7456:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "7498:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "7540:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "7629:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "7660:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "8555:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "8590:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "8627:1:0",
                            "valueSize": 1
                          },
                          {
                            "declaration": 76,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "8664:1:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 81,
                        "nodeType": "InlineAssembly",
                        "src": "6957:1730:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 74,
                    "nodeType": "StructuredDocumentation",
                    "src": "6618:237:0",
                    "text": "@dev Returns an Ethereum Signed Message, created from `s`.\n This produces a hash corresponding to the one signed with the\n [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\n JSON-RPC method as part of EIP-191."
                  },
                  "id": 83,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "toEthSignedMessageHash",
                  "nameLocation": "6869:22:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 77,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 76,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "6905:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 83,
                        "src": "6892:14:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 75,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6892:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6891:16:0"
                  },
                  "returnParameters": {
                    "id": 80,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 79,
                        "mutability": "mutable",
                        "name": "result",
                        "nameLocation": "6939:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 83,
                        "src": "6931:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 78,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6931:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6930:16:0"
                  },
                  "scope": 84,
                  "src": "6860:1833:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 85,
              "src": "286:8409:0",
              "usedErrors": []
            }
          ],
          "src": "32:8664:0"
        },
        "id": 0
      },
      "contracts/Solbase/utils/SignatureCheckerLib.sol": {
        "ast": {
          "absolutePath": "contracts/Solbase/utils/SignatureCheckerLib.sol",
          "exportedSymbols": {
            "ECDSA": [
              84
            ],
            "SignatureCheckerLib": [
              121
            ]
          },
          "id": 122,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 86,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".4"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:23:1"
            },
            {
              "absolutePath": "contracts/Solbase/utils/ECDSA.sol",
              "file": "./ECDSA.sol",
              "id": 87,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 122,
              "sourceUnit": 85,
              "src": "57:21:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "SignatureCheckerLib",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 88,
                "nodeType": "StructuredDocumentation",
                "src": "80:388:1",
                "text": "@notice Signature verification helper that supports both ECDSA signatures from EOAs\n and ERC1271 signatures from smart contract wallets like Argent and Gnosis safe.\n @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/utils/SignatureCheckerLib.sol)\n @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/SignatureCheckerLib.sol)"
              },
              "fullyImplemented": true,
              "id": 121,
              "linearizedBaseContracts": [
                121
              ],
              "name": "SignatureCheckerLib",
              "nameLocation": "476:19:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 119,
                    "nodeType": "Block",
                    "src": "654:1715:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 104,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 99,
                            "name": "signer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 90,
                            "src": "668:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 102,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "686:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 101,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "678:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 100,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "678:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 103,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "678:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "668:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 107,
                        "nodeType": "IfStatement",
                        "src": "664:38:1",
                        "trueBody": {
                          "expression": {
                            "hexValue": "66616c7365",
                            "id": 105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "697:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "functionReturnParameters": 98,
                          "id": 106,
                          "nodeType": "Return",
                          "src": "690:12:1"
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "id": 110,
                                "name": "hash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 92,
                                "src": "731:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 111,
                                "name": "signature",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 94,
                                "src": "737:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                  "typeString": "bytes calldata"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes_calldata_ptr",
                                  "typeString": "bytes calldata"
                                }
                              ],
                              "expression": {
                                "id": 108,
                                "name": "ECDSA",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 84,
                                "src": "717:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ECDSA_$84_$",
                                  "typeString": "type(library ECDSA)"
                                }
                              },
                              "id": 109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "recover",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 18,
                              "src": "717:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes_calldata_ptr_$returns$_t_address_$",
                                "typeString": "function (bytes32,bytes calldata) view returns (address)"
                              }
                            },
                            "id": 112,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "717:30:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 113,
                            "name": "signer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 90,
                            "src": "751:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "717:40:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 117,
                        "nodeType": "IfStatement",
                        "src": "713:57:1",
                        "trueBody": {
                          "expression": {
                            "hexValue": "74727565",
                            "id": 115,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "766:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "functionReturnParameters": 98,
                          "id": 116,
                          "nodeType": "Return",
                          "src": "759:11:1"
                        }
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "790:1573:1",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "938:20:1",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "953:4:1",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "947:5:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "947:11:1"
                              },
                              "variables": [
                                {
                                  "name": "m",
                                  "nodeType": "YulTypedName",
                                  "src": "942:1:1",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "m",
                                    "nodeType": "YulIdentifier",
                                    "src": "1076:1:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1079:10:1",
                                    "type": "",
                                    "value": "0x1626ba7e"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1069:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1069:21:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1069:21:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "m",
                                        "nodeType": "YulIdentifier",
                                        "src": "1173:1:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1176:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1169:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1169:12:1"
                                  },
                                  {
                                    "name": "hash",
                                    "nodeType": "YulIdentifier",
                                    "src": "1183:4:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1162:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1162:26:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1162:26:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "m",
                                        "nodeType": "YulIdentifier",
                                        "src": "1212:1:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1215:4:1",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1208:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1208:12:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1222:4:1",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "1201:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1201:26:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1201:26:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "m",
                                        "nodeType": "YulIdentifier",
                                        "src": "1364:1:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1367:4:1",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1360:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1360:12:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "signature.offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1378:16:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1396:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1374:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1374:27:1"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1403:4:1",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "1347:12:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1347:61:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1347:61:1"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1422:931:1",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1582:4:1",
                                                "type": "",
                                                "value": "0x00"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "1576:5:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1576:11:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1593:3:1",
                                                "type": "",
                                                "value": "224"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "m",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "1604:1:1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1598:5:1"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "1598:8:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1589:3:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1589:18:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "eq",
                                          "nodeType": "YulIdentifier",
                                          "src": "1573:2:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1573:35:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "returndatasize",
                                              "nodeType": "YulIdentifier",
                                              "src": "1717:14:1"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1717:16:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1735:4:1",
                                            "type": "",
                                            "value": "0x20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "eq",
                                          "nodeType": "YulIdentifier",
                                          "src": "1714:2:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1714:26:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1454:3:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1454:304:1"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "gas",
                                          "nodeType": "YulIdentifier",
                                          "src": "2008:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2008:5:1"
                                      },
                                      {
                                        "name": "signer",
                                        "nodeType": "YulIdentifier",
                                        "src": "2053:6:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "m",
                                            "nodeType": "YulIdentifier",
                                            "src": "2110:1:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2113:4:1",
                                            "type": "",
                                            "value": "0x1c"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2106:3:1"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2106:12:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2173:4:1",
                                        "type": "",
                                        "value": "0xc4"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2232:4:1",
                                        "type": "",
                                        "value": "0x00"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2283:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "staticcall",
                                      "nodeType": "YulIdentifier",
                                      "src": "1976:10:1"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1976:363:1"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1433:3:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1433:920:1"
                              },
                              "variableNames": [
                                {
                                  "name": "isValid",
                                  "nodeType": "YulIdentifier",
                                  "src": "1422:7:1"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 92,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1183:4:1",
                            "valueSize": 1
                          },
                          {
                            "declaration": 97,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1422:7:1",
                            "valueSize": 1
                          },
                          {
                            "declaration": 94,
                            "isOffset": true,
                            "isSlot": false,
                            "src": "1378:16:1",
                            "suffix": "offset",
                            "valueSize": 1
                          },
                          {
                            "declaration": 90,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2053:6:1",
                            "valueSize": 1
                          }
                        ],
                        "id": 118,
                        "nodeType": "InlineAssembly",
                        "src": "781:1582:1"
                      }
                    ]
                  },
                  "id": 120,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isValidSignatureNow",
                  "nameLocation": "511:19:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 95,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 90,
                        "mutability": "mutable",
                        "name": "signer",
                        "nameLocation": "548:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 120,
                        "src": "540:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 89,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "540:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 92,
                        "mutability": "mutable",
                        "name": "hash",
                        "nameLocation": "572:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 120,
                        "src": "564:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 91,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "564:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 94,
                        "mutability": "mutable",
                        "name": "signature",
                        "nameLocation": "601:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 120,
                        "src": "586:24:1",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 93,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "586:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "530:86:1"
                  },
                  "returnParameters": {
                    "id": 98,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 97,
                        "mutability": "mutable",
                        "name": "isValid",
                        "nameLocation": "645:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 120,
                        "src": "640:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 96,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "640:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "639:14:1"
                  },
                  "scope": 121,
                  "src": "502:1867:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 122,
              "src": "468:1903:1",
              "usedErrors": []
            }
          ],
          "src": "32:2340:1"
        },
        "id": 1
      }
    }
  }
}
