/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SafeCastLib, SafeCastLibInterface } from "../SafeCastLib";

const _abi = [
  {
    inputs: [],
    name: "OverFlow",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f5b8a26a61d65746ad919ef8c444b3bcc5f930a976332093744462e02806f77d64736f6c634300080f0033";

type SafeCastLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeCastLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeCastLib__factory extends ContractFactory {
  constructor(...args: SafeCastLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SafeCastLib";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SafeCastLib> {
    return super.deploy(overrides || {}) as Promise<SafeCastLib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SafeCastLib {
    return super.attach(address) as SafeCastLib;
  }
  connect(signer: Signer): SafeCastLib__factory {
    return super.connect(signer) as SafeCastLib__factory;
  }
  static readonly contractName: "SafeCastLib";
  public readonly contractName: "SafeCastLib";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeCastLibInterface {
    return new utils.Interface(_abi) as SafeCastLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeCastLib {
    return new Contract(address, _abi, signerOrProvider) as SafeCastLib;
  }
}
