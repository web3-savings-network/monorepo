/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ObservationLib,
  ObservationLibInterface,
} from "../ObservationLib";

const _abi = [
  {
    inputs: [],
    name: "MAX_CARDINALITY",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c4610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80638200d873146038575b600080fd5b603e6052565b604051604991906075565b60405180910390f35b62ffffff81565b600062ffffff82169050919050565b606f816059565b82525050565b6000602082019050608860008301846068565b9291505056fea264697066735822122086b076e0329827da7fc43b42485cb8b5ddebce5c1b1e308e4a554dcd67d947a464736f6c634300080f0033";

type ObservationLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ObservationLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ObservationLib__factory extends ContractFactory {
  constructor(...args: ObservationLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ObservationLib";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ObservationLib> {
    return super.deploy(overrides || {}) as Promise<ObservationLib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ObservationLib {
    return super.attach(address) as ObservationLib;
  }
  connect(signer: Signer): ObservationLib__factory {
    return super.connect(signer) as ObservationLib__factory;
  }
  static readonly contractName: "ObservationLib";
  public readonly contractName: "ObservationLib";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ObservationLibInterface {
    return new utils.Interface(_abi) as ObservationLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ObservationLib {
    return new Contract(address, _abi, signerOrProvider) as ObservationLib;
  }
}
