/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface Web3CardDesignInterface extends utils.Interface {
  contractName: "Web3CardDesign";
  functions: {
    "confirmOwner()": FunctionFragment;
    "erc721KMinterInstance()": FunctionFragment;
    "getColor(uint256)": FunctionFragment;
    "getColorFromMap(uint8)": FunctionFragment;
    "getEmoji(uint256)": FunctionFragment;
    "getEmojiFromMap(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwner()": FunctionFragment;
    "setColor(uint256,uint8)": FunctionFragment;
    "setDuringMint(uint256,uint8,uint8)": FunctionFragment;
    "setERC721KMinterInstance(address)": FunctionFragment;
    "setEmoji(uint256,uint8)": FunctionFragment;
    "setStyleUpgradeCost(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "confirmOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc721KMinterInstance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getColor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getColorFromMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmoji",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmojiFromMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setColor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDuringMint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC721KMinterInstance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmoji",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStyleUpgradeCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc721KMinterInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getColor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getColorFromMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEmoji", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEmojiFromMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setColor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDuringMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC721KMinterInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEmoji", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStyleUpgradeCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdateInitiated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdateInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnerUpdateInitiatedEvent = TypedEvent<
  [string, string],
  { user: string; ownerCandidate: string }
>;

export type OwnerUpdateInitiatedEventFilter =
  TypedEventFilter<OwnerUpdateInitiatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { user: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Web3CardDesign extends BaseContract {
  contractName: "Web3CardDesign";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Web3CardDesignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmOwner(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc721KMinterInstance(overrides?: CallOverrides): Promise<[string]>;

    getColor(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getColorFromMap(
      colorId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEmoji(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEmojiFromMap(
      emojiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwner(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setColor(
      tokenId: BigNumberish,
      color: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDuringMint(
      tokenId: BigNumberish,
      color: BigNumberish,
      emoji: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setERC721KMinterInstance(
      _erc721KMinterInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmoji(
      tokenId: BigNumberish,
      emoji: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStyleUpgradeCost(
      _styleUpgradeCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  confirmOwner(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc721KMinterInstance(overrides?: CallOverrides): Promise<string>;

  getColor(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getColorFromMap(
    colorId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEmoji(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getEmojiFromMap(
    emojiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwner(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setColor(
    tokenId: BigNumberish,
    color: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDuringMint(
    tokenId: BigNumberish,
    color: BigNumberish,
    emoji: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setERC721KMinterInstance(
    _erc721KMinterInstance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmoji(
    tokenId: BigNumberish,
    emoji: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStyleUpgradeCost(
    _styleUpgradeCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    confirmOwner(overrides?: CallOverrides): Promise<void>;

    erc721KMinterInstance(overrides?: CallOverrides): Promise<string>;

    getColor(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getColorFromMap(
      colorId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEmoji(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getEmojiFromMap(
      emojiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwner(overrides?: CallOverrides): Promise<void>;

    setColor(
      tokenId: BigNumberish,
      color: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDuringMint(
      tokenId: BigNumberish,
      color: BigNumberish,
      emoji: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC721KMinterInstance(
      _erc721KMinterInstance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmoji(
      tokenId: BigNumberish,
      emoji: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStyleUpgradeCost(
      _styleUpgradeCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerUpdateInitiated(address,address)"(
      user?: string | null,
      ownerCandidate?: string | null
    ): OwnerUpdateInitiatedEventFilter;
    OwnerUpdateInitiated(
      user?: string | null,
      ownerCandidate?: string | null
    ): OwnerUpdateInitiatedEventFilter;

    "OwnershipTransferred(address,address)"(
      user?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      user?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    confirmOwner(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc721KMinterInstance(overrides?: CallOverrides): Promise<BigNumber>;

    getColor(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getColorFromMap(
      colorId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmoji(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEmojiFromMap(
      emojiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwner(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setColor(
      tokenId: BigNumberish,
      color: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDuringMint(
      tokenId: BigNumberish,
      color: BigNumberish,
      emoji: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setERC721KMinterInstance(
      _erc721KMinterInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmoji(
      tokenId: BigNumberish,
      emoji: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStyleUpgradeCost(
      _styleUpgradeCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmOwner(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc721KMinterInstance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getColor(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getColorFromMap(
      colorId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmoji(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEmojiFromMap(
      emojiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwner(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setColor(
      tokenId: BigNumberish,
      color: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDuringMint(
      tokenId: BigNumberish,
      color: BigNumberish,
      emoji: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setERC721KMinterInstance(
      _erc721KMinterInstance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmoji(
      tokenId: BigNumberish,
      emoji: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStyleUpgradeCost(
      _styleUpgradeCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
