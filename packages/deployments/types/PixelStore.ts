/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PixelStoreInterface extends utils.Interface {
  contractName: "PixelStore";
  functions: {
    "add(uint8,uint8,string,string,uint8,uint256)": FunctionFragment;
    "cancelOwnershipHandover()": FunctionFragment;
    "completeOwnershipHandover(address)": FunctionFragment;
    "grantRoles(address,uint256)": FunctionFragment;
    "hasAllRoles(address,uint256)": FunctionFragment;
    "hasAnyRole(address,uint256)": FunctionFragment;
    "isUnlocked(address,uint256,uint8,uint8)": FunctionFragment;
    "ordinalsFromRoles(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownershipHandoverExpiresAt(address)": FunctionFragment;
    "ownershipHandoverValidFor()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRoles(uint256)": FunctionFragment;
    "requestOwnershipHandover()": FunctionFragment;
    "revokeRoles(address,uint256)": FunctionFragment;
    "rolesFromOrdinals(uint8[])": FunctionFragment;
    "rolesOf(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlock(uint8[],uint8[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeOwnershipHandover",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAllRoles",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAnyRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnlocked",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ordinalsFromRoles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverExpiresAt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownershipHandoverValidFor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRoles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestOwnershipHandover",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesFromOrdinals",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "rolesOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAllRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAnyRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUnlocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ordinalsFromRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverExpiresAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownershipHandoverValidFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestOwnershipHandover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rolesFromOrdinals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rolesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "OwnershipHandoverCanceled(address)": EventFragment;
    "OwnershipHandoverRequested(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RolesUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipHandoverRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RolesUpdated"): EventFragment;
}

export type OwnershipHandoverCanceledEvent = TypedEvent<
  [string],
  { pendingOwner: string }
>;

export type OwnershipHandoverCanceledEventFilter =
  TypedEventFilter<OwnershipHandoverCanceledEvent>;

export type OwnershipHandoverRequestedEvent = TypedEvent<
  [string],
  { pendingOwner: string }
>;

export type OwnershipHandoverRequestedEventFilter =
  TypedEventFilter<OwnershipHandoverRequestedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RolesUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; roles: BigNumber }
>;

export type RolesUpdatedEventFilter = TypedEventFilter<RolesUpdatedEvent>;

export interface PixelStore extends BaseContract {
  contractName: "PixelStore";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PixelStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      position: BigNumberish,
      slot: BigNumberish,
      traitName: string,
      traitValue: string,
      tier: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeOwnershipHandover(
      pendingOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRoles(
      user: string,
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasAllRoles(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    hasAnyRole(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    isUnlocked(
      token: string,
      tokenId: BigNumberish,
      position: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { unlocked: boolean }>;

    ordinalsFromRoles(
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]] & { ordinals: number[] }>;

    owner(overrides?: CallOverrides): Promise<[string] & { result: string }>;

    ownershipHandoverExpiresAt(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRoles(
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      user: string,
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rolesFromOrdinals(
      ordinals: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { roles: BigNumber }>;

    rolesOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { roles: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      position: BigNumberish[],
      slot: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    position: BigNumberish,
    slot: BigNumberish,
    traitName: string,
    traitValue: string,
    tier: BigNumberish,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOwnershipHandover(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeOwnershipHandover(
    pendingOwner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRoles(
    user: string,
    roles: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasAllRoles(
    user: string,
    roles: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAnyRole(
    user: string,
    roles: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUnlocked(
    token: string,
    tokenId: BigNumberish,
    position: BigNumberish,
    slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ordinalsFromRoles(
    roles: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownershipHandoverExpiresAt(
    pendingOwner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRoles(
    roles: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestOwnershipHandover(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    user: string,
    roles: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rolesFromOrdinals(
    ordinals: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rolesOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    position: BigNumberish[],
    slot: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      position: BigNumberish,
      slot: BigNumberish,
      traitName: string,
      traitValue: string,
      tier: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    completeOwnershipHandover(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAllRoles(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAnyRole(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUnlocked(
      token: string,
      tokenId: BigNumberish,
      position: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ordinalsFromRoles(
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownershipHandoverExpiresAt(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRoles(
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestOwnershipHandover(overrides?: CallOverrides): Promise<void>;

    revokeRoles(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rolesFromOrdinals(
      ordinals: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rolesOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(
      position: BigNumberish[],
      slot: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipHandoverCanceled(address)"(
      pendingOwner?: string | null
    ): OwnershipHandoverCanceledEventFilter;
    OwnershipHandoverCanceled(
      pendingOwner?: string | null
    ): OwnershipHandoverCanceledEventFilter;

    "OwnershipHandoverRequested(address)"(
      pendingOwner?: string | null
    ): OwnershipHandoverRequestedEventFilter;
    OwnershipHandoverRequested(
      pendingOwner?: string | null
    ): OwnershipHandoverRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RolesUpdated(address,uint256)"(
      user?: string | null,
      roles?: BigNumberish | null
    ): RolesUpdatedEventFilter;
    RolesUpdated(
      user?: string | null,
      roles?: BigNumberish | null
    ): RolesUpdatedEventFilter;
  };

  estimateGas: {
    add(
      position: BigNumberish,
      slot: BigNumberish,
      traitName: string,
      traitValue: string,
      tier: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeOwnershipHandover(
      pendingOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRoles(
      user: string,
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasAllRoles(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAnyRole(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnlocked(
      token: string,
      tokenId: BigNumberish,
      position: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ordinalsFromRoles(
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownershipHandoverExpiresAt(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownershipHandoverValidFor(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRoles(
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      user: string,
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rolesFromOrdinals(
      ordinals: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rolesOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      position: BigNumberish[],
      slot: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      position: BigNumberish,
      slot: BigNumberish,
      traitName: string,
      traitValue: string,
      tier: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOwnershipHandover(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeOwnershipHandover(
      pendingOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRoles(
      user: string,
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasAllRoles(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAnyRole(
      user: string,
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnlocked(
      token: string,
      tokenId: BigNumberish,
      position: BigNumberish,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ordinalsFromRoles(
      roles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownershipHandoverExpiresAt(
      pendingOwner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownershipHandoverValidFor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRoles(
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestOwnershipHandover(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      user: string,
      roles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rolesFromOrdinals(
      ordinals: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rolesOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      position: BigNumberish[],
      slot: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
