{
  "address": "0x728f6e35C3ECE2fD121A0cEB54AeB71774316c2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "byte2uint8",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_len",
          "type": "uint256"
        }
      ],
      "name": "stringifyIntSet",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x00d93d349a58abc1f346cc4e8fff44df62112025d2438913e4102b0b1373b2f6",
  "receipt": {
    "to": null,
    "from": "0x2258A593F8C35C3634dE17Fd5E9320e00d699264",
    "contractAddress": "0x728f6e35C3ECE2fD121A0cEB54AeB71774316c2E",
    "transactionIndex": 55,
    "gasUsed": "596936",
    "logsBloom": "0x
    "blockHash": "0xcf889587a3faae4d0e3c4066d1975c1f6df406debf114477d43300f073af4218",
    "transactionHash": "0x00d93d349a58abc1f346cc4e8fff44df62112025d2438913e4102b0b1373b2f6",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 35677552,
        "transactionHash": "0x00d93d349a58abc1f346cc4e8fff44df62112025d2438913e4102b0b1373b2f6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002258a593f8c35c3634de17fd5e9320e00d699264",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003fe9bbd40499b80000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000001a8e582f935f2cb3ff5970000000000000000000000000000000000000000000000000da0ccf7d35f664800000000000000000000000000000000000000000001a8e583391fae9f448f4f",
        "logIndex": 194,
        "blockHash": "0xcf889587a3faae4d0e3c4066d1975c1f6df406debf114477d43300f073af4218"
      }
    ],
    "blockNumber": 35677552,
    "cumulativeGasUsed": "9398310",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "50fb5faa89f27731405ff5ea78d39337",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"byte2uint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"stringifyIntSet\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"details\":\"Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"svg\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"SVG construction library using web-like API.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@web3-savings-cards/core-sol/contracts/svg/svg.sol\":\"svg\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@web3-savings-cards/core-sol/contracts/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n    {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint8)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xe41fde66b1af92a5e131493ac16af2e4799e447dd8808608a4da024e340a826a\",\"license\":\"Unlicense\"},\"@web3-savings-cards/core-sol/contracts/svg/svg.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./svgUtils.sol\\\";\\n\\n/**\\n * @title svg\\n * @author Kames Geraghty\\n * @notice SVG construction library using web-like API.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svg {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n    return el(\\\"g\\\", _props, _children);\\n  }\\n\\n  function path(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"path\\\", _props, _children);\\n  }\\n\\n  function text(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"text\\\", _props, _children);\\n  }\\n\\n  function line(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"line\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"circle\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"circle\\\", _props);\\n  }\\n\\n  function rect(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"rect\\\", _props, _children);\\n  }\\n\\n  function rect(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"rect\\\", _props);\\n  }\\n\\n  function stop(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"stop\\\", _props);\\n  }\\n\\n  function filter(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"filter\\\", _props, _children);\\n  }\\n\\n  function defs(string memory _children) internal pure returns (string memory) {\\n    return el(\\\"defs\\\", \\\"\\\", _children);\\n  }\\n\\n  function cdata(string memory _content) internal pure returns (string memory) {\\n    return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n  }\\n\\n  /* GRADIENTS */\\n  function radialGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"radialGradient\\\", _props, _children);\\n  }\\n\\n  function linearGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"linearGradient\\\", _props, _children);\\n  }\\n\\n  function gradientStop(\\n    uint256 offset,\\n    string memory stopColor,\\n    string memory _props\\n  ) internal pure returns (string memory) {\\n    return\\n      el(\\n        \\\"stop\\\",\\n        string.concat(\\n          prop(\\\"stop-color\\\", stopColor),\\n          \\\" \\\",\\n          prop(\\\"offset\\\", string.concat(svgUtils.uint2str(offset), \\\"%\\\")),\\n          \\\" \\\",\\n          _props\\n        )\\n      );\\n  }\\n\\n  function animateTransform(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"animateTransform\\\", _props);\\n  }\\n\\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n    return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n  }\\n\\n  /* COMMON */\\n  // A generic element, can be used to construct any SVG (or HTML) element\\n  function el(\\n    string memory _tag,\\n    string memory _props,\\n    string memory _children\\n  ) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\", _children, \\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // A generic element, can be used to construct any SVG (or HTML) element without children\\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n  }\\n\\n  function start(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\");\\n  }\\n\\n  function end(string memory _tag) internal pure returns (string memory) {\\n    return string.concat(\\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // an SVG attribute\\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n  }\\n\\n  function stringifyIntSet(\\n    bytes memory _data,\\n    uint256 _offset,\\n    uint256 _len\\n  ) public pure returns (bytes memory) {\\n    bytes memory res;\\n    require(_data.length >= _offset + _len, \\\"Out of range\\\");\\n    for (uint256 i = _offset; i < _offset + _len; i++) {\\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \\\" \\\");\\n    }\\n    return res;\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0x723df26596b09c5fce920de00fc73dbf178bc5ee79f3700d372b8a05ae7f1763\",\"license\":\"MIT\"},\"@web3-savings-cards/core-sol/contracts/svg/svgUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { BytesLib } from \\\"../libraries/BytesLib.sol\\\";\\n\\n/**\\n * @title  SVG Utilities\\n * @author Kames Geraghty\\n * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svgUtils {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  /// @notice Empty SVG element\\n  string internal constant NULL = \\\"\\\";\\n\\n  /**\\n   * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\n   * @param _key User for which to calculate prize amount.\\n   * @param _val User for which to calculate prize amount.\\n   * @return string Generated CSS variable.\\n   */\\n  function setCssVar(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n  }\\n\\n  /**\\n   * @notice Formats getting a css variable\\n   * @param _key User for which to calculate prize amount.\\n   * @return string Generated CSS variable.\\n   */\\n  function getCssVar(string memory _key) internal pure returns (string memory) {\\n    return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n  }\\n\\n  // formats getting a def URL\\n  function getDefURL(string memory _id) internal pure returns (string memory) {\\n    return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n  }\\n\\n  // checks if two strings are equal\\n  function stringsEqual(string memory _a, string memory _b) internal pure returns (bool) {\\n    return keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n  }\\n\\n  // returns the length of a string in characters\\n  function utfStringLength(string memory _str) internal pure returns (uint256 length) {\\n    uint256 i = 0;\\n    bytes memory string_rep = bytes(_str);\\n\\n    while (i < string_rep.length) {\\n      if (string_rep[i] >> 7 == 0) i += 1;\\n      else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n      else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n      else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n        i += 4;\\n        //For safety\\n      else i += 1;\\n\\n      length++;\\n    }\\n  }\\n\\n  function round2Txt(\\n    uint256 _value,\\n    uint8 _decimals,\\n    uint8 _prec\\n  ) internal pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        (_value / 10**_decimals).toString(),\\n        \\\".\\\",\\n        (_value / 10**(_decimals - _prec) - (_value / 10**(_decimals)) * 10**_prec).toString()\\n      );\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n\\n  function splitAddress(address account) internal pure returns (string memory) {\\n    string memory addy = Strings.toHexString(uint256(uint160(account)), 20);\\n    bytes memory start = BytesLib.slice(abi.encodePacked(addy), 0, 6);\\n    bytes memory end = BytesLib.slice(abi.encodePacked(addy), 37, 4);\\n    return string.concat(string(abi.encodePacked(start)), \\\"...\\\", string(abi.encodePacked(end)));\\n  }\\n\\n  function toString(address account) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(account));\\n  }\\n\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(value));\\n  }\\n\\n  function toString(bytes32 value) internal pure returns (string memory) {\\n    return toString(abi.encodePacked(value));\\n  }\\n\\n  function toString(bytes memory data) internal pure returns (string memory) {\\n    bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n    bytes memory str = new bytes(2 + data.length * 2);\\n    str[0] = \\\"0\\\";\\n    str[1] = \\\"x\\\";\\n    for (uint256 i = 0; i < data.length; i++) {\\n      str[2 + i * 2] = alphabet[uint256(uint8(data[i] >> 4))];\\n      str[3 + i * 2] = alphabet[uint256(uint8(data[i] & 0x0f))];\\n    }\\n    return string(str);\\n  }\\n\\n  function getColor(bytes memory _colorHex) internal view returns (bytes memory) {\\n    require(_colorHex.length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(_colorHex, hex\\\"64\\\");\\n  }\\n\\n  function getColor(bytes memory _colorHex, uint8 _alpha) internal view returns (bytes memory) {\\n    require(_colorHex.length == 3, \\\"Unknown color\\\");\\n    return abi.encodePacked(_colorHex, _alpha);\\n  }\\n\\n  function getRgba(bytes memory _colorHex) internal view returns (string memory) {\\n    return string(toRgba(getColor(_colorHex), 0));\\n  }\\n\\n  function toRgba(bytes memory _rgba, uint256 offset) internal pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        \\\"rgba(\\\",\\n        byte2uint8(_rgba, offset).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 1).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 2).toString(),\\n        \\\",\\\",\\n        byte2uint8(_rgba, offset + 3).toString(),\\n        \\\"%)\\\"\\n      );\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) internal pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0xa7c705323fc2811b925d6e8c9806f1ffd58a5a25820b80f7eb0586e2cc41f3d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6109e3610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80635119ce4b14610045578063c821f2ef14610075575b600080fd5b61005f600480360381019061005a91906104c5565b6100a5565b60405161006c919061053d565b60405180910390f35b61008f600480360381019061008a9190610558565b610113565b60405161009c919061064f565b60405180910390f35b6000818351116100ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e1906106ce565b60405180910390fd5b8282815181106100fd576100fc6106ee565b5b602001015160f81c60f81b60f81c905092915050565b6060808284610122919061074c565b85511015610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c906106ce565b60405180910390fd5b60008490505b8385610177919061074c565b8110156101c9578161019461018c88846100a5565b60ff166101d5565b6040516020016101a5929190610871565b604051602081830303815290604052915080806101c1906108a0565b91505061016b565b50809150509392505050565b60606000820361021c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610330565b600082905060005b6000821461024e578080610237906108a0565b915050600a826102479190610917565b9150610224565b60008167ffffffffffffffff81111561026a57610269610364565b5b6040519080825280601f01601f19166020018201604052801561029c5781602001600182028036833780820191505090505b5090505b60008514610329576001826102b59190610948565b9150600a856102c4919061097c565b60306102d0919061074c565b60f81b8183815181106102e6576102e56106ee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856103229190610917565b94506102a0565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61039c82610353565b810181811067ffffffffffffffff821117156103bb576103ba610364565b5b80604052505050565b60006103ce610335565b90506103da8282610393565b919050565b600067ffffffffffffffff8211156103fa576103f9610364565b5b61040382610353565b9050602081019050919050565b82818337600083830152505050565b600061043261042d846103df565b6103c4565b90508281526020810184848401111561044e5761044d61034e565b5b610459848285610410565b509392505050565b600082601f83011261047657610475610349565b5b813561048684826020860161041f565b91505092915050565b6000819050919050565b6104a28161048f565b81146104ad57600080fd5b50565b6000813590506104bf81610499565b92915050565b600080604083850312156104dc576104db61033f565b5b600083013567ffffffffffffffff8111156104fa576104f9610344565b5b61050685828601610461565b9250506020610517858286016104b0565b9150509250929050565b600060ff82169050919050565b61053781610521565b82525050565b6000602082019050610552600083018461052e565b92915050565b6000806000606084860312156105715761057061033f565b5b600084013567ffffffffffffffff81111561058f5761058e610344565b5b61059b86828701610461565b93505060206105ac868287016104b0565b92505060406105bd868287016104b0565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156106015780820151818401526020810190506105e6565b83811115610610576000848401525b50505050565b6000610621826105c7565b61062b81856105d2565b935061063b8185602086016105e3565b61064481610353565b840191505092915050565b600060208201905081810360008301526106698184610616565b905092915050565b600082825260208201905092915050565b7f4f7574206f662072616e67650000000000000000000000000000000000000000600082015250565b60006106b8600c83610671565b91506106c382610682565b602082019050919050565b600060208201905081810360008301526106e7816106ab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107578261048f565b91506107628361048f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107975761079661071d565b5b828201905092915050565b600081905092915050565b60006107b8826105c7565b6107c281856107a2565b93506107d28185602086016105e3565b80840191505092915050565b600081519050919050565b600081905092915050565b60006107ff826107de565b61080981856107e9565b93506108198185602086016105e3565b80840191505092915050565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b600061085b6001836107e9565b915061086682610825565b600182019050919050565b600061087d82856107ad565b915061088982846107f4565b91506108948261084e565b91508190509392505050565b60006108ab8261048f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108dd576108dc61071d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109228261048f565b915061092d8361048f565b92508261093d5761093c6108e8565b5b828204905092915050565b60006109538261048f565b915061095e8361048f565b9250828210156109715761097061071d565b5b828203905092915050565b60006109878261048f565b91506109928361048f565b9250826109a2576109a16108e8565b5b82820690509291505056fea264697066735822122032616fa613eaf8ac060902eb550ca3576258d84db7b2077d531d540e120bb9f264736f6c634300080f0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80635119ce4b14610045578063c821f2ef14610075575b600080fd5b61005f600480360381019061005a91906104c5565b6100a5565b60405161006c919061053d565b60405180910390f35b61008f600480360381019061008a9190610558565b610113565b60405161009c919061064f565b60405180910390f35b6000818351116100ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e1906106ce565b60405180910390fd5b8282815181106100fd576100fc6106ee565b5b602001015160f81c60f81b60f81c905092915050565b6060808284610122919061074c565b85511015610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015c906106ce565b60405180910390fd5b60008490505b8385610177919061074c565b8110156101c9578161019461018c88846100a5565b60ff166101d5565b6040516020016101a5929190610871565b604051602081830303815290604052915080806101c1906108a0565b91505061016b565b50809150509392505050565b60606000820361021c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610330565b600082905060005b6000821461024e578080610237906108a0565b915050600a826102479190610917565b9150610224565b60008167ffffffffffffffff81111561026a57610269610364565b5b6040519080825280601f01601f19166020018201604052801561029c5781602001600182028036833780820191505090505b5090505b60008514610329576001826102b59190610948565b9150600a856102c4919061097c565b60306102d0919061074c565b60f81b8183815181106102e6576102e56106ee565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856103229190610917565b94506102a0565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61039c82610353565b810181811067ffffffffffffffff821117156103bb576103ba610364565b5b80604052505050565b60006103ce610335565b90506103da8282610393565b919050565b600067ffffffffffffffff8211156103fa576103f9610364565b5b61040382610353565b9050602081019050919050565b82818337600083830152505050565b600061043261042d846103df565b6103c4565b90508281526020810184848401111561044e5761044d61034e565b5b610459848285610410565b509392505050565b600082601f83011261047657610475610349565b5b813561048684826020860161041f565b91505092915050565b6000819050919050565b6104a28161048f565b81146104ad57600080fd5b50565b6000813590506104bf81610499565b92915050565b600080604083850312156104dc576104db61033f565b5b600083013567ffffffffffffffff8111156104fa576104f9610344565b5b61050685828601610461565b9250506020610517858286016104b0565b9150509250929050565b600060ff82169050919050565b61053781610521565b82525050565b6000602082019050610552600083018461052e565b92915050565b6000806000606084860312156105715761057061033f565b5b600084013567ffffffffffffffff81111561058f5761058e610344565b5b61059b86828701610461565b93505060206105ac868287016104b0565b92505060406105bd868287016104b0565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156106015780820151818401526020810190506105e6565b83811115610610576000848401525b50505050565b6000610621826105c7565b61062b81856105d2565b935061063b8185602086016105e3565b61064481610353565b840191505092915050565b600060208201905081810360008301526106698184610616565b905092915050565b600082825260208201905092915050565b7f4f7574206f662072616e67650000000000000000000000000000000000000000600082015250565b60006106b8600c83610671565b91506106c382610682565b602082019050919050565b600060208201905081810360008301526106e7816106ab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107578261048f565b91506107628361048f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107975761079661071d565b5b828201905092915050565b600081905092915050565b60006107b8826105c7565b6107c281856107a2565b93506107d28185602086016105e3565b80840191505092915050565b600081519050919050565b600081905092915050565b60006107ff826107de565b61080981856107e9565b93506108198185602086016105e3565b80840191505092915050565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b600061085b6001836107e9565b915061086682610825565b600182019050919050565b600061087d82856107ad565b915061088982846107f4565b91506108948261084e565b91508190509392505050565b60006108ab8261048f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108dd576108dc61071d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109228261048f565b915061092d8361048f565b92508261093d5761093c6108e8565b5b828204905092915050565b60006109538261048f565b915061095e8361048f565b9250828210156109715761097061071d565b5b828203905092915050565b60006109878261048f565b91506109928361048f565b9250826109a2576109a16108e8565b5b82820690509291505056fea264697066735822122032616fa613eaf8ac060902eb550ca3576258d84db7b2077d531d540e120bb9f264736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "details": "Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)",
    "kind": "dev",
    "methods": {},
    "title": "svg",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "SVG construction library using web-like API.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}