{
  "address": "0x1D006bf51E1C032F4f754EE38786450ba0f78e29",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "fetch",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a3868cca705d31cda8d9ec4c008e6149bedfb104bb945fbbf6271221a99879d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1D006bf51E1C032F4f754EE38786450ba0f78e29",
    "transactionIndex": 0,
    "gasUsed": "1257084",
    "logsBloom": "0x
    "blockHash": "0xac092b4add1ce5af0a6d544b89d58d6ed42946412105b2b7d195ca0fce292d84",
    "transactionHash": "0x1a3868cca705d31cda8d9ec4c008e6149bedfb104bb945fbbf6271221a99879d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 35670902,
        "transactionHash": "0x1a3868cca705d31cda8d9ec4c008e6149bedfb104bb945fbbf6271221a99879d",
        "address": "0x1D006bf51E1C032F4f754EE38786450ba0f78e29",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xac092b4add1ce5af0a6d544b89d58d6ed42946412105b2b7d195ca0fce292d84"
      }
    ],
    "blockNumber": 35670902,
    "cumulativeGasUsed": "1257084",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "375f6b9fd4ca73acc232dd6b4a8e4b8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"fetch\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Web3CardTraits\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@web3-savings-cards/core-sol/contracts/Web3CardTraits.sol\":\"Web3CardTraits\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@web3-savings-cards/core-sol/contracts/Web3CardTraits.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { IStream } from \\\"./interfaces/IStream.sol\\\";\\nimport { ITraitsFetch } from \\\"./interfaces/ITraitsFetch.sol\\\";\\n\\n/**\\n * @title Web3CardTraits\\n * @author Kames Geraghty\\n */\\ncontract Web3CardTraits is ITraitsFetch, Ownable {\\n  constructor() {}\\n\\n  /* ===================================================================================== */\\n  /* External Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function fetch(bytes memory input) external view returns (string memory) {\\n    (\\n      address account,\\n      address asset,\\n      uint256 balance,\\n      uint256 chance,\\n      uint256 avgBalance2Weeks,\\n      uint256 avgBalance8Weeks,\\n      uint256 avgBalance26Weeks,\\n      uint256 avgBalance52Weeks,\\n      string memory emoji,\\n      bytes32 color\\n    ) = abi.decode(\\n        input,\\n        (address, address, uint256, uint256, uint256, uint256, uint256, uint256, string, bytes32)\\n      );\\n\\n    string memory _account = Strings.toHexString(uint256(uint160(account)), 20);\\n    string memory _asset = Strings.toHexString(uint256(uint160(asset)), 20);\\n\\n    return\\n      string.concat(\\n        _generateTrait(\\\"owner\\\", _account),\\n        \\\",\\\",\\n        _generateTrait(\\\"asset\\\", _asset),\\n        \\\",\\\",\\n        _generateTrait(\\\"balance\\\", Strings.toString(balance)),\\n        \\\",\\\",\\n        _generateTrait(\\\"chance\\\", Strings.toString(chance)),\\n        \\\",\\\",\\n        _generateTrait(\\\"avgBalance2Weeks\\\", Strings.toString(avgBalance2Weeks)),\\n        \\\",\\\",\\n        _generateTrait(\\\"avgBalance8Weeks\\\", Strings.toString(avgBalance8Weeks)),\\n        \\\",\\\",\\n        _generateTrait(\\\"avgBalance26Weeks\\\", Strings.toString(avgBalance26Weeks)),\\n        \\\",\\\",\\n        _generateTrait(\\\"avgBalance52Weeks\\\", Strings.toString(avgBalance52Weeks)),\\n        \\\",\\\",\\n        _generateTrait(\\\"emoji\\\", emoji)\\n      );\\n  }\\n\\n  /* ===================================================================================== */\\n  /* Internal Functions                                                                    */\\n  /* ===================================================================================== */\\n\\n  function _generateTrait(string memory _key, string memory _value)\\n    internal\\n    pure\\n    returns (string memory __traits)\\n  {\\n    return string.concat('{\\\"trait_type\\\":' '\\\"', _key, '\\\",', '\\\"value\\\":', '\\\"', _value, '\\\"}');\\n  }\\n\\n  function _generateTraits(string[] memory _keys, string[] memory _values)\\n    internal\\n    pure\\n    returns (string memory __traits)\\n  {\\n    string memory _traits = \\\"\\\";\\n    for (uint256 i = 0; i < _keys.length; i++) {\\n      if (bytes(_values[i]).length > 0) {\\n        _traits = string.concat(_traits, _generateTrait(_keys[i], _values[i]), \\\",\\\");\\n      }\\n    }\\n    return _traits;\\n  }\\n}\\n\",\"keccak256\":\"0x2834c81cb77c04a6a53ac7cd90a7c9b2dea59e45c424ca5e2fb13abaa0b0433e\",\"license\":\"GPL-3.0\"},\"@web3-savings-cards/core-sol/contracts/interfaces/IStream.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IStream {\\n  function count(address _address) external view returns (uint256);\\n\\n  function getData(address _address)\\n    external\\n    view\\n    returns (string[] memory keys, string[] memory values);\\n\\n  function getValue(address _address, string memory _key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0b5b0ba6414345934de73e26b35cbe1d69b82a0623fd52ebf81376dd3bb9b3a\",\"license\":\"MIT\"},\"@web3-savings-cards/core-sol/contracts/interfaces/ITraitsFetch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ITraitsFetch {\\n  function fetch(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8454d6dcf4c798032b7459026b6fa23f586b76400175a27c9b100c1aca36c5a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61156d8061010d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b14610079578063f6559a6b14610095575b600080fd5b6100596100c5565b005b6100636100d9565b60405161007091906109fc565b60405180910390f35b610093600480360381019061008e9190610a57565b610102565b005b6100af60048036038101906100aa9190610bca565b610185565b6040516100bc9190610c9b565b60405180910390f35b6100cd6104a9565b6100d76000610527565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61010a6104a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017090610d2f565b60405180910390fd5b61018281610527565b50565b60606000806000806000806000806000808b8060200190518101906101aa9190610e9a565b995099509950995099509950995099509950995060006101e18b73ffffffffffffffffffffffffffffffffffffffff1660146105eb565b905060006102068b73ffffffffffffffffffffffffffffffffffffffff1660146105eb565b90506102476040518060400160405280600581526020017f6f776e657200000000000000000000000000000000000000000000000000000081525083610827565b6102866040518060400160405280600581526020017f617373657400000000000000000000000000000000000000000000000000000081525083610827565b6102cd6040518060400160405280600781526020017f62616c616e6365000000000000000000000000000000000000000000000000008152506102c88e610853565b610827565b6103146040518060400160405280600681526020017f6368616e6365000000000000000000000000000000000000000000000000000081525061030f8e610853565b610827565b61035b6040518060400160405280601081526020017f61766742616c616e6365325765656b73000000000000000000000000000000008152506103568e610853565b610827565b6103a26040518060400160405280601081526020017f61766742616c616e6365385765656b730000000000000000000000000000000081525061039d8e610853565b610827565b6103e96040518060400160405280601181526020017f61766742616c616e636532365765656b730000000000000000000000000000008152506103e48e610853565b610827565b6104306040518060400160405280601181526020017f61766742616c616e636535325765656b7300000000000000000000000000000081525061042b8e610853565b610827565b61046f6040518060400160405280600581526020017f656d6f6a690000000000000000000000000000000000000000000000000000008152508d610827565b60405160200161048799989796959493929190610ff7565b6040516020818303038152906040529c50505050505050505050505050919050565b6104b16109b3565b73ffffffffffffffffffffffffffffffffffffffff166104cf6100d9565b73ffffffffffffffffffffffffffffffffffffffff1614610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051c9061113a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060600060028360026105fe9190611189565b61060891906111e3565b67ffffffffffffffff81111561062157610620610a9f565b5b6040519080825280601f01601f1916602001820160405280156106535781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061068b5761068a611239565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106106ef576106ee611239565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261072f9190611189565b61073991906111e3565b90505b60018111156107d9577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061077b5761077a611239565b5b1a60f81b82828151811061079257610791611239565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806107d290611268565b905061073c565b506000841461081d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610814906112dd565b60405180910390fd5b8091505092915050565b6060828260405160200161083c9291906113bb565b604051602081830303815290604052905092915050565b60606000820361089a576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506109ae565b600082905060005b600082146108cc5780806108b59061142a565b915050600a826108c591906114a1565b91506108a2565b60008167ffffffffffffffff8111156108e8576108e7610a9f565b5b6040519080825280601f01601f19166020018201604052801561091a5781602001600182028036833780820191505090505b5090505b600085146109a75760018261093391906114d2565b9150600a856109429190611506565b603061094e91906111e3565b60f81b81838151811061096457610963611239565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856109a091906114a1565b945061091e565b8093505050505b919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109e6826109bb565b9050919050565b6109f6816109db565b82525050565b6000602082019050610a1160008301846109ed565b92915050565b6000604051905090565b600080fd5b600080fd5b610a34816109db565b8114610a3f57600080fd5b50565b600081359050610a5181610a2b565b92915050565b600060208284031215610a6d57610a6c610a21565b5b6000610a7b84828501610a42565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ad782610a8e565b810181811067ffffffffffffffff82111715610af657610af5610a9f565b5b80604052505050565b6000610b09610a17565b9050610b158282610ace565b919050565b600067ffffffffffffffff821115610b3557610b34610a9f565b5b610b3e82610a8e565b9050602081019050919050565b82818337600083830152505050565b6000610b6d610b6884610b1a565b610aff565b905082815260208101848484011115610b8957610b88610a89565b5b610b94848285610b4b565b509392505050565b600082601f830112610bb157610bb0610a84565b5b8135610bc1848260208601610b5a565b91505092915050565b600060208284031215610be057610bdf610a21565b5b600082013567ffffffffffffffff811115610bfe57610bfd610a26565b5b610c0a84828501610b9c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c4d578082015181840152602081019050610c32565b83811115610c5c576000848401525b50505050565b6000610c6d82610c13565b610c778185610c1e565b9350610c87818560208601610c2f565b610c9081610a8e565b840191505092915050565b60006020820190508181036000830152610cb58184610c62565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d19602683610c1e565b9150610d2482610cbd565b604082019050919050565b60006020820190508181036000830152610d4881610d0c565b9050919050565b6000610d5a826109bb565b9050919050565b610d6a81610d4f565b8114610d7557600080fd5b50565b600081519050610d8781610d61565b92915050565b6000819050919050565b610da081610d8d565b8114610dab57600080fd5b50565b600081519050610dbd81610d97565b92915050565b600067ffffffffffffffff821115610dde57610ddd610a9f565b5b610de782610a8e565b9050602081019050919050565b6000610e07610e0284610dc3565b610aff565b905082815260208101848484011115610e2357610e22610a89565b5b610e2e848285610c2f565b509392505050565b600082601f830112610e4b57610e4a610a84565b5b8151610e5b848260208601610df4565b91505092915050565b6000819050919050565b610e7781610e64565b8114610e8257600080fd5b50565b600081519050610e9481610e6e565b92915050565b6000806000806000806000806000806101408b8d031215610ebe57610ebd610a21565b5b6000610ecc8d828e01610d78565b9a50506020610edd8d828e01610d78565b9950506040610eee8d828e01610dae565b9850506060610eff8d828e01610dae565b9750506080610f108d828e01610dae565b96505060a0610f218d828e01610dae565b95505060c0610f328d828e01610dae565b94505060e0610f438d828e01610dae565b9350506101008b015167ffffffffffffffff811115610f6557610f64610a26565b5b610f718d828e01610e36565b925050610120610f838d828e01610e85565b9150509295989b9194979a5092959850565b600081905092915050565b6000610fab82610c13565b610fb58185610f95565b9350610fc5818560208601610c2f565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b6000611003828c610fa0565b915061100e82610fd1565b60018201915061101e828b610fa0565b915061102982610fd1565b600182019150611039828a610fa0565b915061104482610fd1565b6001820191506110548289610fa0565b915061105f82610fd1565b60018201915061106f8288610fa0565b915061107a82610fd1565b60018201915061108a8287610fa0565b915061109582610fd1565b6001820191506110a58286610fa0565b91506110b082610fd1565b6001820191506110c08285610fa0565b91506110cb82610fd1565b6001820191506110db8284610fa0565b91508190509a9950505050505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611124602083610c1e565b915061112f826110ee565b602082019050919050565b6000602082019050818103600083015261115381611117565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061119482610d8d565b915061119f83610d8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111d8576111d761115a565b5b828202905092915050565b60006111ee82610d8d565b91506111f983610d8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561122e5761122d61115a565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061127382610d8d565b9150600082036112865761128561115a565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006112c7602083610c1e565b91506112d282611291565b602082019050919050565b600060208201905081810360008301526112f6816112ba565b9050919050565b7f7b2274726169745f74797065223a220000000000000000000000000000000000815250565b7f222c000000000000000000000000000000000000000000000000000000000000815250565b7f2276616c7565223a000000000000000000000000000000000000000000000000815250565b7f2200000000000000000000000000000000000000000000000000000000000000815250565b7f227d000000000000000000000000000000000000000000000000000000000000815250565b60006113c6826112fd565b600f820191506113d68285610fa0565b91506113e182611323565b6002820191506113f082611349565b6008820191506113ff8261136f565b60018201915061140f8284610fa0565b915061141a82611395565b6002820191508190509392505050565b600061143582610d8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114675761146661115a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ac82610d8d565b91506114b783610d8d565b9250826114c7576114c6611472565b5b828204905092915050565b60006114dd82610d8d565b91506114e883610d8d565b9250828210156114fb576114fa61115a565b5b828203905092915050565b600061151182610d8d565b915061151c83610d8d565b92508261152c5761152b611472565b5b82820690509291505056fea26469706673582212202c89efb74394d66854a484b1579073b1dc08a08fbdac379f52344bb5612fa86864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063f2fde38b14610079578063f6559a6b14610095575b600080fd5b6100596100c5565b005b6100636100d9565b60405161007091906109fc565b60405180910390f35b610093600480360381019061008e9190610a57565b610102565b005b6100af60048036038101906100aa9190610bca565b610185565b6040516100bc9190610c9b565b60405180910390f35b6100cd6104a9565b6100d76000610527565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61010a6104a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017090610d2f565b60405180910390fd5b61018281610527565b50565b60606000806000806000806000806000808b8060200190518101906101aa9190610e9a565b995099509950995099509950995099509950995060006101e18b73ffffffffffffffffffffffffffffffffffffffff1660146105eb565b905060006102068b73ffffffffffffffffffffffffffffffffffffffff1660146105eb565b90506102476040518060400160405280600581526020017f6f776e657200000000000000000000000000000000000000000000000000000081525083610827565b6102866040518060400160405280600581526020017f617373657400000000000000000000000000000000000000000000000000000081525083610827565b6102cd6040518060400160405280600781526020017f62616c616e6365000000000000000000000000000000000000000000000000008152506102c88e610853565b610827565b6103146040518060400160405280600681526020017f6368616e6365000000000000000000000000000000000000000000000000000081525061030f8e610853565b610827565b61035b6040518060400160405280601081526020017f61766742616c616e6365325765656b73000000000000000000000000000000008152506103568e610853565b610827565b6103a26040518060400160405280601081526020017f61766742616c616e6365385765656b730000000000000000000000000000000081525061039d8e610853565b610827565b6103e96040518060400160405280601181526020017f61766742616c616e636532365765656b730000000000000000000000000000008152506103e48e610853565b610827565b6104306040518060400160405280601181526020017f61766742616c616e636535325765656b7300000000000000000000000000000081525061042b8e610853565b610827565b61046f6040518060400160405280600581526020017f656d6f6a690000000000000000000000000000000000000000000000000000008152508d610827565b60405160200161048799989796959493929190610ff7565b6040516020818303038152906040529c50505050505050505050505050919050565b6104b16109b3565b73ffffffffffffffffffffffffffffffffffffffff166104cf6100d9565b73ffffffffffffffffffffffffffffffffffffffff1614610525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051c9061113a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060600060028360026105fe9190611189565b61060891906111e3565b67ffffffffffffffff81111561062157610620610a9f565b5b6040519080825280601f01601f1916602001820160405280156106535781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061068b5761068a611239565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106106ef576106ee611239565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261072f9190611189565b61073991906111e3565b90505b60018111156107d9577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061077b5761077a611239565b5b1a60f81b82828151811061079257610791611239565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806107d290611268565b905061073c565b506000841461081d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610814906112dd565b60405180910390fd5b8091505092915050565b6060828260405160200161083c9291906113bb565b604051602081830303815290604052905092915050565b60606000820361089a576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506109ae565b600082905060005b600082146108cc5780806108b59061142a565b915050600a826108c591906114a1565b91506108a2565b60008167ffffffffffffffff8111156108e8576108e7610a9f565b5b6040519080825280601f01601f19166020018201604052801561091a5781602001600182028036833780820191505090505b5090505b600085146109a75760018261093391906114d2565b9150600a856109429190611506565b603061094e91906111e3565b60f81b81838151811061096457610963611239565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856109a091906114a1565b945061091e565b8093505050505b919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109e6826109bb565b9050919050565b6109f6816109db565b82525050565b6000602082019050610a1160008301846109ed565b92915050565b6000604051905090565b600080fd5b600080fd5b610a34816109db565b8114610a3f57600080fd5b50565b600081359050610a5181610a2b565b92915050565b600060208284031215610a6d57610a6c610a21565b5b6000610a7b84828501610a42565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ad782610a8e565b810181811067ffffffffffffffff82111715610af657610af5610a9f565b5b80604052505050565b6000610b09610a17565b9050610b158282610ace565b919050565b600067ffffffffffffffff821115610b3557610b34610a9f565b5b610b3e82610a8e565b9050602081019050919050565b82818337600083830152505050565b6000610b6d610b6884610b1a565b610aff565b905082815260208101848484011115610b8957610b88610a89565b5b610b94848285610b4b565b509392505050565b600082601f830112610bb157610bb0610a84565b5b8135610bc1848260208601610b5a565b91505092915050565b600060208284031215610be057610bdf610a21565b5b600082013567ffffffffffffffff811115610bfe57610bfd610a26565b5b610c0a84828501610b9c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c4d578082015181840152602081019050610c32565b83811115610c5c576000848401525b50505050565b6000610c6d82610c13565b610c778185610c1e565b9350610c87818560208601610c2f565b610c9081610a8e565b840191505092915050565b60006020820190508181036000830152610cb58184610c62565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d19602683610c1e565b9150610d2482610cbd565b604082019050919050565b60006020820190508181036000830152610d4881610d0c565b9050919050565b6000610d5a826109bb565b9050919050565b610d6a81610d4f565b8114610d7557600080fd5b50565b600081519050610d8781610d61565b92915050565b6000819050919050565b610da081610d8d565b8114610dab57600080fd5b50565b600081519050610dbd81610d97565b92915050565b600067ffffffffffffffff821115610dde57610ddd610a9f565b5b610de782610a8e565b9050602081019050919050565b6000610e07610e0284610dc3565b610aff565b905082815260208101848484011115610e2357610e22610a89565b5b610e2e848285610c2f565b509392505050565b600082601f830112610e4b57610e4a610a84565b5b8151610e5b848260208601610df4565b91505092915050565b6000819050919050565b610e7781610e64565b8114610e8257600080fd5b50565b600081519050610e9481610e6e565b92915050565b6000806000806000806000806000806101408b8d031215610ebe57610ebd610a21565b5b6000610ecc8d828e01610d78565b9a50506020610edd8d828e01610d78565b9950506040610eee8d828e01610dae565b9850506060610eff8d828e01610dae565b9750506080610f108d828e01610dae565b96505060a0610f218d828e01610dae565b95505060c0610f328d828e01610dae565b94505060e0610f438d828e01610dae565b9350506101008b015167ffffffffffffffff811115610f6557610f64610a26565b5b610f718d828e01610e36565b925050610120610f838d828e01610e85565b9150509295989b9194979a5092959850565b600081905092915050565b6000610fab82610c13565b610fb58185610f95565b9350610fc5818560208601610c2f565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b6000611003828c610fa0565b915061100e82610fd1565b60018201915061101e828b610fa0565b915061102982610fd1565b600182019150611039828a610fa0565b915061104482610fd1565b6001820191506110548289610fa0565b915061105f82610fd1565b60018201915061106f8288610fa0565b915061107a82610fd1565b60018201915061108a8287610fa0565b915061109582610fd1565b6001820191506110a58286610fa0565b91506110b082610fd1565b6001820191506110c08285610fa0565b91506110cb82610fd1565b6001820191506110db8284610fa0565b91508190509a9950505050505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611124602083610c1e565b915061112f826110ee565b602082019050919050565b6000602082019050818103600083015261115381611117565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061119482610d8d565b915061119f83610d8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111d8576111d761115a565b5b828202905092915050565b60006111ee82610d8d565b91506111f983610d8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561122e5761122d61115a565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061127382610d8d565b9150600082036112865761128561115a565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006112c7602083610c1e565b91506112d282611291565b602082019050919050565b600060208201905081810360008301526112f6816112ba565b9050919050565b7f7b2274726169745f74797065223a220000000000000000000000000000000000815250565b7f222c000000000000000000000000000000000000000000000000000000000000815250565b7f2276616c7565223a000000000000000000000000000000000000000000000000815250565b7f2200000000000000000000000000000000000000000000000000000000000000815250565b7f227d000000000000000000000000000000000000000000000000000000000000815250565b60006113c6826112fd565b600f820191506113d68285610fa0565b91506113e182611323565b6002820191506113f082611349565b6008820191506113ff8261136f565b60018201915061140f8284610fa0565b915061141a82611395565b6002820191508190509392505050565b600061143582610d8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114675761146661115a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ac82610d8d565b91506114b783610d8d565b9250826114c7576114c6611472565b5b828204905092915050565b60006114dd82610d8d565b91506114e883610d8d565b9250828210156114fb576114fa61115a565b5b828203905092915050565b600061151182610d8d565b915061151c83610d8d565b92508261152c5761152b611472565b5b82820690509291505056fea26469706673582212202c89efb74394d66854a484b1579073b1dc08a08fbdac379f52344bb5612fa86864736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Web3CardTraits",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1691,
        "contract": "@web3-savings-cards/core-sol/contracts/Web3CardTraits.sol:Web3CardTraits",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}