{
  "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_svgRender_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_traitsFetch_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "_contractURI_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "contractURI",
          "type": "tuple"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "svgRender",
          "type": "address"
        }
      ],
      "name": "SvgRenderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "traitsFetch",
          "type": "address"
        }
      ],
      "name": "TraitsFetchUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "constructContractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "input0",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "input1",
          "type": "bytes"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721ImageSignal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc721Instance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCharacter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "background",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "head",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "body",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "headAcc",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "bodyAcc",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "leftAcc",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "rightAcc",
              "type": "uint8"
            }
          ],
          "internalType": "struct PixelPoolyStorage.Character",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractDescription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getImageBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPreview",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSvgRender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTraitsBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraitsFetch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "position",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "isItemSlotActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pixelStoreInstance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "externalLink",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "sellerFeeBasisPoints",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "feeRecipient",
              "type": "string"
            }
          ],
          "internalType": "struct ERC721Storage.ContractURI",
          "name": "contractURI",
          "type": "tuple"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721Instance",
          "type": "address"
        }
      ],
      "name": "setERC721KInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pixelStoreInstance",
          "type": "address"
        }
      ],
      "name": "setPixelStoreInstance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "position",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "slot",
          "type": "uint8"
        }
      ],
      "name": "setPositionSlot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "svgRender",
          "type": "address"
        }
      ],
      "name": "setSvgRender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "traitsFetch",
          "type": "address"
        }
      ],
      "name": "setTraitsFetch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e81955ca4bc2d697caa3a3a6ea44655d1acccb5cc54cf0b6bf4064a976bbd44",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
    "transactionIndex": 0,
    "gasUsed": "2182978",
    "logsBloom": "0x
    "blockHash": "0xb922ff809a1afd75b3678d0d0129e9d614adc8dd3f5f5b7ebf05b26a0f3a16f9",
    "transactionHash": "0x2e81955ca4bc2d697caa3a3a6ea44655d1acccb5cc54cf0b6bf4064a976bbd44",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14,
        "transactionHash": "0x2e81955ca4bc2d697caa3a3a6ea44655d1acccb5cc54cf0b6bf4064a976bbd44",
        "address": "0x0DCd1Bf9A1b36cE34237eEaFef220932846BCD82",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb922ff809a1afd75b3678d0d0129e9d614adc8dd3f5f5b7ebf05b26a0f3a16f9"
      }
    ],
    "blockNumber": 14,
    "cumulativeGasUsed": "2182978",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e",
    "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    {
      "name": "PoolyPixel",
      "description": "PoolyDefender.",
      "image": "",
      "externalLink": "https://PoolyPixel.art",
      "sellerFeeBasisPoints": "0",
      "feeRecipient": "0x0000000000000000000000000000000000000000"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "4ef37faf7dd3b7fa520c15f0e8cdad15",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_svgRender_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traitsFetch_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"_contractURI_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"contractURI\",\"type\":\"tuple\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"svgRender\",\"type\":\"address\"}],\"name\":\"SvgRenderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"traitsFetch\",\"type\":\"address\"}],\"name\":\"TraitsFetchUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"constructContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"input0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"input1\",\"type\":\"bytes\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721ImageSignal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721Instance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCharacter\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"background\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headAcc\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bodyAcc\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"leftAcc\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rightAcc\",\"type\":\"uint8\"}],\"internalType\":\"struct PixelPoolyStorage.Character\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractDescription\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getImageBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPreview\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSvgRender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTraitsBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraitsFetch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"isItemSlotActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixelStoreInstance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalLink\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellerFeeBasisPoints\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"feeRecipient\",\"type\":\"string\"}],\"internalType\":\"struct ERC721Storage.ContractURI\",\"name\":\"contractURI\",\"type\":\"tuple\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721Instance\",\"type\":\"address\"}],\"name\":\"setERC721KInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pixelStoreInstance\",\"type\":\"address\"}],\"name\":\"setPixelStoreInstance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"position\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"slot\",\"type\":\"uint8\"}],\"name\":\"setPositionSlot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"svgRender\",\"type\":\"address\"}],\"name\":\"setSvgRender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"traitsFetch\",\"type\":\"address\"}],\"name\":\"setTraitsFetch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"kind\":\"dev\",\"methods\":{\"getImageBytes(uint256)\":{\"params\":{\"tokenId\":\"uint256 - The token ID to query\"},\"returns\":{\"_0\":\"bytes - Packed bytes of the active item slots\"}},\"getPreview(uint256,address)\":{\"params\":{\"tokenId\":\"uint256 - The token ID to query\"},\"returns\":{\"_0\":\"bytes - Packed bytes of the active item slots\"}},\"getTraitsBytes(uint256)\":{\"params\":{\"tokenId\":\"uint256 - The token ID to query.\"},\"returns\":{\"_0\":\"bytes - Packed instructions for traits PixelPoolyTraits\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PixelPoolyStorage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructTokenURI(uint256,bytes,bytes)\":{\"notice\":\"----------------------------------------------------------------------- Overrides & EIP Functions -----------------------------------------------------------------------\"},\"constructor\":{\"notice\":\"----------------------------------------------------------------------- Constructor -----------------------------------------------------------------------\"},\"getCharacter(uint256)\":{\"notice\":\"----------------------------------------------------------------------- External Functions -----------------------------------------------------------------------\"},\"getImageBytes(uint256)\":{\"notice\":\"Get the active item slots for a Pixel Pooly character\"},\"getPreview(uint256,address)\":{\"notice\":\"Get the active item slots for a Pixel Pooly character\"},\"getSvgRender()\":{\"notice\":\"----------------------------------------------------------------------- External Functions -----------------------------------------------------------------------\"},\"getTraitsBytes(uint256)\":{\"notice\":\"Get the trait bytes for a Pixel Pooly character\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol\":\"PixelPoolyStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc721k/core-sol/contracts/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC721KImage } from \\\"./interfaces/IERC721KImage.sol\\\";\\nimport { IERC721KTraits } from \\\"./interfaces/IERC721KTraits.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721Storage\\n * @author Kames Geraghty\\n */\\nabstract contract ERC721Storage is Ownable {\\n  address internal _svgRender;\\n  address internal _traitsFetch;\\n  ContractURI internal _contractURI;\\n\\n  struct ContractURI {\\n    string name;\\n    string description;\\n    string image;\\n    string externalLink;\\n    string sellerFeeBasisPoints;\\n    string feeRecipient;\\n  }\\n\\n  event SvgRenderUpdated(address svgRender);\\n\\n  event TraitsFetchUpdated(address traitsFetch);\\n\\n  event ContractURIUpdated(ContractURI contractURI);\\n\\n  constructor(\\n    address _svgRender_,\\n    address _traitsFetch_,\\n    ContractURI memory _contractURI_\\n  ) {\\n    _svgRender = _svgRender_;\\n    _traitsFetch = _traitsFetch_;\\n    _contractURI = _contractURI_;\\n  }\\n\\n  /// -----------------------------------------------------------------------\\n  /* Virtual Functions                                                                     */\\n  /// -----------------------------------------------------------------------\\n\\n  function _parseName(uint256 _tokenId) internal view virtual returns (string memory);\\n\\n  function _parseDescription(uint256 _tokenId) internal view virtual returns (string memory);\\n\\n  /// -----------------------------------------------------------------------\\n  /// External Functions\\n  /// -----------------------------------------------------------------------\\n  function getSvgRender() external view returns (address) {\\n    return _svgRender;\\n  }\\n\\n  function getTraitsFetch() external view returns (address) {\\n    return _traitsFetch;\\n  }\\n\\n  function getContractDescription() external view returns (ContractURI memory) {\\n    return _contractURI;\\n  }\\n\\n  function render(bytes memory input) external view returns (string memory) {\\n    return IERC721KImage(_svgRender).render(input);\\n  }\\n\\n  function constructTokenURI(\\n    uint256 tokenId,\\n    bytes memory input0,\\n    bytes memory input1\\n  ) external view virtual returns (string memory uri) {\\n    string memory image_ = IERC721KImage(_svgRender).render(input0);\\n    string memory traits_ = IERC721KTraits(_traitsFetch).fetch(input1);\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _parseName(tokenId),\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _parseDescription(tokenId),\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                image_,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                traits_,\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function constructContractURI() external view virtual returns (string memory uri) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _contractURI.name,\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _contractURI.description,\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                _contractURI.image,\\n                '\\\",',\\n                '\\\"externalLink\\\":',\\n                '\\\"',\\n                _contractURI.externalLink,\\n                '\\\",',\\n                '\\\"sellerFeeBasisPoints\\\":',\\n                '\\\"',\\n                _contractURI.sellerFeeBasisPoints,\\n                '\\\",',\\n                '\\\"feeRecipient\\\":',\\n                '\\\"',\\n                _contractURI.feeRecipient,\\n                '\\\"',\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function setSvgRender(address svgRender) external onlyOwner {\\n    _svgRender = svgRender;\\n    emit SvgRenderUpdated(svgRender);\\n  }\\n\\n  function setTraitsFetch(address traitsFetch) external onlyOwner {\\n    _traitsFetch = traitsFetch;\\n    emit TraitsFetchUpdated(traitsFetch);\\n  }\\n\\n  function setContractURI(ContractURI memory contractURI) external onlyOwner {\\n    _contractURI = contractURI;\\n    emit ContractURIUpdated(contractURI);\\n  }\\n}\\n\",\"keccak256\":\"0x69ff2cbefa318f8b099201aba64ef2114339df933cb6487cacf2f88b1d1a37a3\",\"license\":\"GPL-3.0\"},\"@erc721k/core-sol/contracts/interfaces/IERC721KImage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IERC721KImage {\\n  function render(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8474249915bfc50221f4431b8853338ae27e8847ac3ef563dda437dd809a8846\",\"license\":\"MIT\"},\"@erc721k/core-sol/contracts/interfaces/IERC721KTraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IERC721KTraits {\\n  function fetch(bytes memory input) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0e4ebc534cc1453dd57592eec64a3dc44377a30b98b6f33c780354a126481b5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { ERC721Storage } from \\\"@erc721k/core-sol/contracts/ERC721Storage.sol\\\";\\nimport { IERC721KImage } from \\\"@erc721k/core-sol/contracts/interfaces/IERC721KImage.sol\\\";\\nimport { IERC721KTraits } from \\\"@erc721k/core-sol/contracts/interfaces/IERC721KTraits.sol\\\";\\nimport { IPixelCharacter } from \\\"./interfaces/IPixelCharacter.sol\\\";\\nimport { PixelStore } from \\\"./PixelStore.sol\\\";\\n\\n/**\\n * @title PixelPoolyStorage\\n * @author Kames Geraghty\\n */\\ncontract PixelPoolyStorage is ERC721Storage {\\n  address public erc721Instance;\\n  address public pixelStoreInstance;\\n  address public erc721ImageSignal;\\n  bool private isSignalActive;\\n\\n  /// @notice The active item slots for a Pixel Pooly character.\\n  mapping(uint256 => Character) private _characters;\\n\\n  /// @notice Track unlocked item slots using a bytes32 (hash of item type and slot)\\n  mapping(uint256 => mapping(bytes32 => bool)) private _items;\\n\\n  struct Character {\\n    uint8 background;\\n    uint8 head;\\n    uint8 body;\\n    uint8 headAcc;\\n    uint8 bodyAcc;\\n    uint8 leftAcc;\\n    uint8 rightAcc;\\n  }\\n\\n  /// -----------------------------------------------------------------------\\n  /// Constructor\\n  /// -----------------------------------------------------------------------\\n\\n  constructor(\\n    address _svgRender_,\\n    address _traitsFetch_,\\n    ContractURI memory _contractURI_\\n  ) ERC721Storage(_svgRender_, _traitsFetch_, _contractURI_) {}\\n\\n  /// -----------------------------------------------------------------------\\n  /// Overrides & EIP Functions\\n  /// -----------------------------------------------------------------------\\n  function constructTokenURI(\\n    uint256 tokenId,\\n    bytes memory input0,\\n    bytes memory input1\\n  ) external view override returns (string memory uri) {\\n    if (isSignalActive) {\\n      return _signalRender(tokenId);\\n    } else {\\n      string memory image_ = IERC721KImage(_svgRender).render(input0);\\n      string memory traits_ = IERC721KTraits(_traitsFetch).fetch(input1);\\n      return\\n        string(\\n          abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(\\n              bytes(\\n                string.concat(\\n                  '{\\\"name\\\":',\\n                  '\\\"',\\n                  _parseName(tokenId),\\n                  '\\\",',\\n                  '\\\"description\\\":',\\n                  '\\\"',\\n                  _parseDescription(tokenId),\\n                  '\\\",',\\n                  '\\\"image\\\":',\\n                  '\\\"',\\n                  image_,\\n                  '\\\",',\\n                  '\\\"attributes\\\": [',\\n                  traits_,\\n                  \\\"]\\\",\\n                  \\\"}\\\"\\n                )\\n              )\\n            )\\n          )\\n        );\\n    }\\n  }\\n\\n  /// -----------------------------------------------------------------------\\n  /// External Functions\\n  /// -----------------------------------------------------------------------\\n\\n  // ========================\\n  // READS\\n  // ========================\\n\\n  function getCharacter(uint256 tokenId) external view returns (Character memory) {\\n    return _characters[tokenId];\\n  }\\n\\n  function getStore() external view returns (address) {\\n    return pixelStoreInstance;\\n  }\\n\\n  /**\\n   * @notice Get the active item slots for a Pixel Pooly character\\n   * @param tokenId uint256 - The token ID to query\\n   * @return bytes - Packed bytes of the active item slots\\n   */\\n  function getPreview(uint256 tokenId, address account) external view returns (bytes memory) {\\n    return _imageBytes(tokenId, account);\\n  }\\n\\n  /**\\n   * @notice Get the active item slots for a Pixel Pooly character\\n   * @param tokenId uint256 - The token ID to query\\n   * @return bytes - Packed bytes of the active item slots\\n   */\\n  function getImageBytes(uint256 tokenId) external view returns (bytes memory) {\\n    address account = IERC721(erc721Instance).ownerOf(tokenId);\\n    return _imageBytes(tokenId, account);\\n  }\\n\\n  function _imageBytes(uint256 tokenId, address account) internal view returns (bytes memory) {\\n    Character memory character = _characters[tokenId];\\n    return\\n      bytes(\\n        abi.encode(\\n          character.background,\\n          character.head,\\n          character.body,\\n          character.headAcc,\\n          character.bodyAcc,\\n          character.leftAcc,\\n          character.rightAcc\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Get the trait bytes for a Pixel Pooly character\\n   * @param tokenId uint256 - The token ID to query.\\n   * @return bytes - Packed instructions for traits PixelPoolyTraits\\n   */\\n  function getTraitsBytes(uint256 tokenId) external view returns (bytes memory) {\\n    return bytes(abi.encode(IERC721(erc721Instance).ownerOf(tokenId)));\\n  }\\n\\n  function isItemSlotActive(\\n    uint256 tokenId,\\n    uint8 position,\\n    uint8 slot\\n  ) external view returns (bool) {\\n    bytes32 slotHash = keccak256(abi.encodePacked(position, slot));\\n    return _items[tokenId][slotHash];\\n  }\\n\\n  // ========================\\n  // WRITES\\n  // ========================\\n\\n  function setERC721KInstance(address _erc721Instance) external onlyOwner {\\n    erc721Instance = _erc721Instance;\\n  }\\n\\n  function setPixelStoreInstance(address _pixelStoreInstance) external onlyOwner {\\n    pixelStoreInstance = _pixelStoreInstance;\\n  }\\n\\n  function setPositionSlot(\\n    uint256 tokenId,\\n    uint8 position,\\n    uint8 slot\\n  ) external {\\n    require(_msgSender() == erc721Instance, \\\"PixelPoolyStorage:only-erc721\\\");\\n    bytes32 slotHash = keccak256(abi.encodePacked(position, slot));\\n    require(_items[tokenId][slotHash], \\\"PixelPoolyStorage:slot-inactive\\\");\\n    if (position == 0) {\\n      _characters[tokenId].background = slot;\\n    } else if (position == 1) {\\n      _characters[tokenId].head = slot;\\n    } else if (position == 2) {\\n      _characters[tokenId].body = slot;\\n    } else if (position == 3) {\\n      _characters[tokenId].headAcc = slot;\\n    } else if (position == 4) {\\n      _characters[tokenId].bodyAcc = slot;\\n    } else if (position == 5) {\\n      _characters[tokenId].leftAcc = slot;\\n    } else if (position == 6) {\\n      _characters[tokenId].rightAcc = slot;\\n    }\\n  }\\n\\n  /// -----------------------------------------------------------------------\\n  /// Internal Functions\\n  /// -----------------------------------------------------------------------\\n\\n  function _parseName(uint256 _tokenId) internal view override returns (string memory) {\\n    return string.concat(\\\"PixelPooly #\\\", Strings.toString(_tokenId));\\n  }\\n\\n  function _parseDescription(uint256 _tokenId) internal view override returns (string memory) {\\n    return string.concat(\\\"Member #\\\", Strings.toString(_tokenId), \\\" of PixelPooly.\\\");\\n  }\\n\\n  function _signalRender(uint256 tokenId) internal view returns (string memory uri) {\\n    bytes memory _empty = bytes(\\\"\\\");\\n    string memory image_ = IERC721KImage(erc721ImageSignal).render(_empty);\\n    return\\n      string(\\n        abi.encodePacked(\\n          \\\"data:application/json;base64,\\\",\\n          Base64.encode(\\n            bytes(\\n              string.concat(\\n                '{\\\"name\\\":',\\n                '\\\"',\\n                _parseName(tokenId),\\n                '\\\",',\\n                '\\\"description\\\":',\\n                '\\\"',\\n                _parseDescription(tokenId),\\n                '\\\",',\\n                '\\\"image\\\":',\\n                '\\\"',\\n                image_,\\n                '\\\",',\\n                '\\\"attributes\\\": [',\\n                \\\"]\\\",\\n                \\\"}\\\"\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x19ea7e754ce299ae627b628d67926bd8b006cd1cd3ae82490f97415f66b71fc5\",\"license\":\"MIT\"},\"@pixel-pals/pooly-sol/contracts/PixelStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport { OwnedRoles } from \\\"@turbo-eth/solbase-sol/src/auth/OwnedRoles.sol\\\";\\n\\ncontract PixelStore is OwnedRoles {\\n  enum Tiers {\\n    COMMON,\\n    RARE,\\n    EPIC,\\n    LEGENDARY\\n  }\\n\\n  struct Trait {\\n    bytes32 id;\\n    uint8 position;\\n    uint8 slot;\\n    string traitName;\\n    string traitValue;\\n    Tiers tier;\\n    uint256 expiry;\\n  }\\n\\n  /// -----------------------------------------------------------------------\\n  /// Storage\\n  /// -----------------------------------------------------------------------\\n  address internal erc721K;\\n  address internal erc721Storage;\\n  mapping(Tiers => uint256) internal tierPrices;\\n  mapping(bytes32 => bool) internal _isUnlocked;\\n  mapping(bytes32 => Trait) internal pixels;\\n\\n  /// -----------------------------------------------------------------------\\n  /// Constructor & Modifiers\\n  /// -----------------------------------------------------------------------\\n\\n  constructor(address _owner) OwnedRoles() {\\n    _initializeOwner(_owner);\\n  }\\n\\n  /// -----------------------------------------------------------------------\\n  /// Internal Functions\\n  /// -----------------------------------------------------------------------\\n\\n  /// -----------------------------------------------------------------------\\n  /// External Functions\\n  /// -----------------------------------------------------------------------\\n\\n  // ========================\\n  // READS\\n  // ========================\\n  function isUnlocked(\\n    address token,\\n    uint256 tokenId,\\n    uint8 position,\\n    uint8 slot\\n  ) external view returns (bool unlocked) {\\n    bytes32 id = keccak256(abi.encodePacked(token, position, slot));\\n    return _isUnlocked[id];\\n  }\\n\\n  // ========================\\n  // WRITES\\n  // ========================\\n  function add(\\n    uint8 position,\\n    uint8 slot,\\n    string memory traitName,\\n    string memory traitValue,\\n    Tiers tier,\\n    uint256 expiry\\n  ) external onlyOwner {\\n    bytes32 id = keccak256(abi.encodePacked(msg.sender, position, slot));\\n    Trait memory trait = Trait(id, position, slot, traitName, traitValue, tier, expiry);\\n    pixels[id] = trait;\\n  }\\n\\n  function unlock(uint8[] calldata position, uint8[] calldata slot) external payable {\\n    require(position.length == slot.length, \\\"PixelStore:invalid-length\\\");\\n    uint256 cost;\\n    for (uint256 index = 0; index < position.length; index++) {\\n      bytes32 id = keccak256(abi.encodePacked(msg.sender, position[index], slot[index]));\\n      Trait memory trait = pixels[id];\\n      require(!_isUnlocked[id], \\\"PixelStore:pixel-unlocked\\\");\\n      cost += tierPrices[trait.tier];\\n    }\\n    require(msg.value >= cost, \\\"PixelStore:insufficient-amount\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xc4abf831563d4412e6106d3537cc321a797363ba2c2c4168e0ad0b3eb5f29114\",\"license\":\"MIT\"},\"@pixel-pals/pooly-sol/contracts/interfaces/IPixelCharacter.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.15;\\n\\ninterface IPixelCharacter {\\n  struct Character {\\n    uint8 background;\\n    uint8 head;\\n    uint8 body;\\n    uint8 headAcc;\\n    uint8 bodyAcc;\\n    uint8 leftAcc;\\n    uint8 rightAcc;\\n  }\\n}\\n\",\"keccak256\":\"0xbfb57feb79bf682dfa2cbc03c48df3cfe69661d3c7d60607b26524ad327852e0\",\"license\":\"GPL-3.0\"},\"@turbo-eth/solbase-sol/src/auth/OwnedRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner and multiroles authorization mixin.\\n/// @author SolDAO (https://github.com/Sol-DAO/solbase/blob/main/src/auth/OwnedRoles.sol)\\n/// @author Modified from Solady (https://github.com/vectorized/solady/blob/main/src/auth/OwnableRoles.sol)\\n/// @dev While the ownable portion follows EIP-173 (https://eips.ethereum.org/EIPS/eip-173)\\n/// for compatibility, the nomenclature for the 2-step ownership handover and roles\\n/// may be unique to this codebase.\\nabstract contract OwnedRoles {\\n    /// -----------------------------------------------------------------------\\n    /// Events\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev The `user`'s roles is updated to `roles`.\\n    /// Each bit of `roles` represents whether the role is set.\\n    event RolesUpdated(address indexed user, uint256 indexed roles);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /// @dev `keccak256(bytes(\\\"RolesUpdated(address,uint256)\\\"))`.\\n    uint256 private constant _ROLES_UPDATED_EVENT_SIGNATURE =\\n        0x715ad5ce61fc9595c7b415289d59cf203f23a94fa06f04af7e489a0a76e1fe26;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Custom Errors\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"Unauthorized()\\\")))`.\\n    uint256 private constant _UNAUTHORIZED_ERROR_SELECTOR = 0x82b42900;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"NewOwnerIsZeroAddress()\\\")))`.\\n    uint256 private constant _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR = 0x7448fbae;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"NoHandoverRequest()\\\")))`.\\n    uint256 private constant _NO_HANDOVER_REQUEST_ERROR_SELECTOR = 0x6f5e8818;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Storage\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\\n    /// It is intentionally choosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    ///\\n    /// The role slot of `user` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _OWNER_SLOT_NOT))\\n    ///     let roleSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// This automatically ignores the upper bits of the `user` in case\\n    /// they are not clean, as well as keep the `keccak256` under 32-bytes.\\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Internal Functions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        assembly {\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        assembly {\\n            let ownerSlot := not(_OWNER_SLOT_NOT)\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n            // Store the new value.\\n            sstore(ownerSlot, newOwner)\\n        }\\n    }\\n\\n    /// @dev Grants the roles directly without authorization guard.\\n    /// Each bit of `roles` represents the role to turn on.\\n    function _grantRoles(address user, uint256 roles) internal virtual {\\n        assembly {\\n            // Compute the role slot.\\n            mstore(0x00, or(shl(96, user), _OWNER_SLOT_NOT))\\n            let roleSlot := keccak256(0x00, 0x20)\\n            // Load the current value and `or` it with `roles`.\\n            let newRoles := or(sload(roleSlot), roles)\\n            // Store the new value.\\n            sstore(roleSlot, newRoles)\\n            // Emit the {RolesUpdated} event.\\n            log3(0, 0, _ROLES_UPDATED_EVENT_SIGNATURE, shr(96, shl(96, user)), newRoles)\\n        }\\n    }\\n\\n    /// @dev Removes the roles directly without authorization guard.\\n    /// Each bit of `roles` represents the role to turn off.\\n    function _removeRoles(address user, uint256 roles) internal virtual {\\n        assembly {\\n            // Compute the role slot.\\n            mstore(0x00, or(shl(96, user), _OWNER_SLOT_NOT))\\n            let roleSlot := keccak256(0x00, 0x20)\\n            // Load the current value.\\n            let currentRoles := sload(roleSlot)\\n            // Use `and` to compute the intersection of `currentRoles` and `roles`,\\n            // `xor` it with `currentRoles` to flip the bits in the intersection.\\n            let newRoles := xor(currentRoles, and(currentRoles, roles))\\n            // Then, store the new value.\\n            sstore(roleSlot, newRoles)\\n            // Emit the {RolesUpdated} event.\\n            log3(0, 0, _ROLES_UPDATED_EVENT_SIGNATURE, shr(96, shl(96, user)), newRoles)\\n        }\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Public Update Functions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        assembly {\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Reverts if the `newOwner` is the zero address.\\n            if iszero(newOwner) {\\n                mstore(0x00, _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, caller(), newOwner)\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\\n        }\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        assembly {\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, caller(), 0)\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), 0)\\n        }\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will be automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + ownershipHandoverValidFor();\\n            assembly {\\n                // Compute and set the handover slot to 1.\\n                mstore(0x00, or(shl(96, caller()), _HANDOVER_SLOT_SEED))\\n                sstore(keccak256(0x00, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x00, or(shl(96, caller()), _HANDOVER_SLOT_SEED))\\n            sstore(keccak256(0x00, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        assembly {\\n            // Clean the upper 96 bits.\\n            pendingOwner := shr(96, shl(96, pendingOwner))\\n            // Compute and set the handover slot to 0.\\n            mstore(0x00, or(shl(96, pendingOwner), _HANDOVER_SLOT_SEED))\\n            let handoverSlot := keccak256(0x00, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, _NO_HANDOVER_REQUEST_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, caller(), pendingOwner)\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), pendingOwner)\\n        }\\n    }\\n\\n    /// @dev Allows the owner to grant `user` `roles`.\\n    /// If the `user` already has a role, then it will be an no-op for the role.\\n    function grantRoles(address user, uint256 roles) public payable virtual onlyOwner {\\n        _grantRoles(user, roles);\\n    }\\n\\n    /// @dev Allows the owner to remove `user` `roles`.\\n    /// If the `user` does not have a role, then it will be an no-op for the role.\\n    function revokeRoles(address user, uint256 roles) public payable virtual onlyOwner {\\n        _removeRoles(user, roles);\\n    }\\n\\n    /// @dev Allow the caller to remove their own roles.\\n    /// If the caller does not have a role, then it will be an no-op for the role.\\n    function renounceRoles(uint256 roles) public payable virtual {\\n        _removeRoles(msg.sender, roles);\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Public Read Functions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        assembly {\\n            result := sload(not(_OWNER_SLOT_NOT))\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner) public view virtual returns (uint256 result) {\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x00, or(shl(96, pendingOwner), _HANDOVER_SLOT_SEED))\\n            // Load the handover slot.\\n            result := sload(keccak256(0x00, 0x20))\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    function ownershipHandoverValidFor() public view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /// @dev Returns whether `user` has any of `roles`.\\n    function hasAnyRole(address user, uint256 roles) public view virtual returns (bool result) {\\n        assembly {\\n            // Compute the role slot.\\n            mstore(0x00, or(shl(96, user), _OWNER_SLOT_NOT))\\n            // Load the stored value, and set the result to whether the\\n            // `and` intersection of the value and `roles` is not zero.\\n            result := iszero(iszero(and(sload(keccak256(0x00, 0x20)), roles)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `user` has all of `roles`.\\n    function hasAllRoles(address user, uint256 roles) public view virtual returns (bool result) {\\n        assembly {\\n            // Compute the role slot.\\n            mstore(0x00, or(shl(96, user), _OWNER_SLOT_NOT))\\n            // Whether the stored value is contains all the set bits in `roles`.\\n            result := eq(and(sload(keccak256(0x00, 0x20)), roles), roles)\\n        }\\n    }\\n\\n    /// @dev Returns the roles of `user`.\\n    function rolesOf(address user) public view virtual returns (uint256 roles) {\\n        assembly {\\n            // Compute the role slot.\\n            mstore(0x00, or(shl(96, user), _OWNER_SLOT_NOT))\\n            // Load the stored value.\\n            roles := sload(keccak256(0x00, 0x20))\\n        }\\n    }\\n\\n    /// @dev Convenience function to return a `roles` bitmap from an array of `ordinals`.\\n    /// This is meant for frontends like Etherscan, and is therefore not fully optimized.\\n    /// Not recommended to be called on-chain.\\n    function rolesFromOrdinals(uint8[] memory ordinals) public pure returns (uint256 roles) {\\n        assembly {\\n            // Skip the length slot.\\n            let o := add(ordinals, 0x20)\\n            // `shl` 5 is equivalent to multiplying by 0x20.\\n            let end := add(o, shl(5, mload(ordinals)))\\n            // prettier-ignore\\n            for {} iszero(eq(o, end)) { o := add(o, 0x20) } {\\n                roles := or(roles, shl(and(mload(o), 0xff), 1))\\n            }\\n        }\\n    }\\n\\n    /// @dev Convenience function to return an array of `ordinals` from the `roles` bitmap.\\n    /// This is meant for frontends like Etherscan, and is therefore not fully optimized.\\n    /// Not recommended to be called on-chain.\\n    function ordinalsFromRoles(uint256 roles) public pure returns (uint8[] memory ordinals) {\\n        assembly {\\n            // Grab the pointer to the free memory.\\n            let ptr := add(mload(0x40), 0x20)\\n            // The absence of lookup tables, De Bruijn, etc., here is intentional for\\n            // smaller bytecode, as this function is not meant to be called on-chain.\\n            // prettier-ignore\\n            for { let i := 0 } 1 { i := add(i, 1) } {\\n                mstore(ptr, i)\\n                // `shr` 5 is equivalent to multiplying by 0x20.\\n                // Push back into the ordinals array if the bit is set.\\n                ptr := add(ptr, shl(5, and(roles, 1)))\\n                roles := shr(1, roles)\\n                // prettier-ignore\\n                if iszero(roles) { break }\\n            }\\n            // Set `ordinals` to the start of the free memory.\\n            ordinals := mload(0x40)\\n            // Allocate the memory.\\n            mstore(0x40, ptr)\\n            // Store the length of `ordinals`.\\n            mstore(ordinals, shr(5, sub(ptr, add(ordinals, 0x20))))\\n        }\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Modifiers\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @dev Marks a function as only callable by an account with `roles`.\\n    modifier onlyRoles(uint256 roles) virtual {\\n        assembly {\\n            // Compute the role slot.\\n            mstore(0x00, or(shl(96, caller()), _OWNER_SLOT_NOT))\\n            // Load the stored value, and if the `and` intersection\\n            // of the value and `roles` is zero, revert.\\n            if iszero(and(sload(keccak256(0x00, 0x20)), roles)) {\\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @dev Marks a function as only callable by the owner or by an account\\n    /// with `roles`. Checks for ownership first, then lazily checks for roles.\\n    modifier onlyOwnerOrRoles(uint256 roles) virtual {\\n        assembly {\\n            // If the caller is not the stored owner.\\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\\n                // Compute the role slot.\\n                mstore(0x00, or(shl(96, caller()), _OWNER_SLOT_NOT))\\n                // Load the stored value, and if the `and` intersection\\n                // of the value and `roles` is zero, revert.\\n                if iszero(and(sload(keccak256(0x00, 0x20)), roles)) {\\n                    mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @dev Marks a function as only callable by an account with `roles`\\n    /// or the owner. Checks for roles first, then lazily checks for ownership.\\n    modifier onlyRolesOrOwner(uint256 roles) virtual {\\n        assembly {\\n            // Compute the role slot.\\n            mstore(0x00, or(shl(96, caller()), _OWNER_SLOT_NOT))\\n            // Load the stored value, and if the `and` intersection\\n            // of the value and `roles` is zero, revert.\\n            if iszero(and(sload(keccak256(0x00, 0x20)), roles)) {\\n                // If the caller is not the stored owner.\\n                if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\\n                    mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Role Constants\\n    /// -----------------------------------------------------------------------\\n\\n    uint256 internal constant _ROLE_0 = 1 << 0;\\n    uint256 internal constant _ROLE_1 = 1 << 1;\\n    uint256 internal constant _ROLE_2 = 1 << 2;\\n    uint256 internal constant _ROLE_3 = 1 << 3;\\n    uint256 internal constant _ROLE_4 = 1 << 4;\\n    uint256 internal constant _ROLE_5 = 1 << 5;\\n    uint256 internal constant _ROLE_6 = 1 << 6;\\n    uint256 internal constant _ROLE_7 = 1 << 7;\\n    uint256 internal constant _ROLE_8 = 1 << 8;\\n    uint256 internal constant _ROLE_9 = 1 << 9;\\n    uint256 internal constant _ROLE_10 = 1 << 10;\\n    uint256 internal constant _ROLE_11 = 1 << 11;\\n    uint256 internal constant _ROLE_12 = 1 << 12;\\n    uint256 internal constant _ROLE_13 = 1 << 13;\\n    uint256 internal constant _ROLE_14 = 1 << 14;\\n    uint256 internal constant _ROLE_15 = 1 << 15;\\n    uint256 internal constant _ROLE_16 = 1 << 16;\\n    uint256 internal constant _ROLE_17 = 1 << 17;\\n    uint256 internal constant _ROLE_18 = 1 << 18;\\n    uint256 internal constant _ROLE_19 = 1 << 19;\\n    uint256 internal constant _ROLE_20 = 1 << 20;\\n    uint256 internal constant _ROLE_21 = 1 << 21;\\n    uint256 internal constant _ROLE_22 = 1 << 22;\\n    uint256 internal constant _ROLE_23 = 1 << 23;\\n    uint256 internal constant _ROLE_24 = 1 << 24;\\n    uint256 internal constant _ROLE_25 = 1 << 25;\\n    uint256 internal constant _ROLE_26 = 1 << 26;\\n    uint256 internal constant _ROLE_27 = 1 << 27;\\n    uint256 internal constant _ROLE_28 = 1 << 28;\\n    uint256 internal constant _ROLE_29 = 1 << 29;\\n    uint256 internal constant _ROLE_30 = 1 << 30;\\n    uint256 internal constant _ROLE_31 = 1 << 31;\\n    uint256 internal constant _ROLE_32 = 1 << 32;\\n    uint256 internal constant _ROLE_33 = 1 << 33;\\n    uint256 internal constant _ROLE_34 = 1 << 34;\\n    uint256 internal constant _ROLE_35 = 1 << 35;\\n    uint256 internal constant _ROLE_36 = 1 << 36;\\n    uint256 internal constant _ROLE_37 = 1 << 37;\\n    uint256 internal constant _ROLE_38 = 1 << 38;\\n    uint256 internal constant _ROLE_39 = 1 << 39;\\n    uint256 internal constant _ROLE_40 = 1 << 40;\\n    uint256 internal constant _ROLE_41 = 1 << 41;\\n    uint256 internal constant _ROLE_42 = 1 << 42;\\n    uint256 internal constant _ROLE_43 = 1 << 43;\\n    uint256 internal constant _ROLE_44 = 1 << 44;\\n    uint256 internal constant _ROLE_45 = 1 << 45;\\n    uint256 internal constant _ROLE_46 = 1 << 46;\\n    uint256 internal constant _ROLE_47 = 1 << 47;\\n    uint256 internal constant _ROLE_48 = 1 << 48;\\n    uint256 internal constant _ROLE_49 = 1 << 49;\\n    uint256 internal constant _ROLE_50 = 1 << 50;\\n    uint256 internal constant _ROLE_51 = 1 << 51;\\n    uint256 internal constant _ROLE_52 = 1 << 52;\\n    uint256 internal constant _ROLE_53 = 1 << 53;\\n    uint256 internal constant _ROLE_54 = 1 << 54;\\n    uint256 internal constant _ROLE_55 = 1 << 55;\\n    uint256 internal constant _ROLE_56 = 1 << 56;\\n    uint256 internal constant _ROLE_57 = 1 << 57;\\n    uint256 internal constant _ROLE_58 = 1 << 58;\\n    uint256 internal constant _ROLE_59 = 1 << 59;\\n    uint256 internal constant _ROLE_60 = 1 << 60;\\n    uint256 internal constant _ROLE_61 = 1 << 61;\\n    uint256 internal constant _ROLE_62 = 1 << 62;\\n    uint256 internal constant _ROLE_63 = 1 << 63;\\n    uint256 internal constant _ROLE_64 = 1 << 64;\\n    uint256 internal constant _ROLE_65 = 1 << 65;\\n    uint256 internal constant _ROLE_66 = 1 << 66;\\n    uint256 internal constant _ROLE_67 = 1 << 67;\\n    uint256 internal constant _ROLE_68 = 1 << 68;\\n    uint256 internal constant _ROLE_69 = 1 << 69;\\n    uint256 internal constant _ROLE_70 = 1 << 70;\\n    uint256 internal constant _ROLE_71 = 1 << 71;\\n    uint256 internal constant _ROLE_72 = 1 << 72;\\n    uint256 internal constant _ROLE_73 = 1 << 73;\\n    uint256 internal constant _ROLE_74 = 1 << 74;\\n    uint256 internal constant _ROLE_75 = 1 << 75;\\n    uint256 internal constant _ROLE_76 = 1 << 76;\\n    uint256 internal constant _ROLE_77 = 1 << 77;\\n    uint256 internal constant _ROLE_78 = 1 << 78;\\n    uint256 internal constant _ROLE_79 = 1 << 79;\\n    uint256 internal constant _ROLE_80 = 1 << 80;\\n    uint256 internal constant _ROLE_81 = 1 << 81;\\n    uint256 internal constant _ROLE_82 = 1 << 82;\\n    uint256 internal constant _ROLE_83 = 1 << 83;\\n    uint256 internal constant _ROLE_84 = 1 << 84;\\n    uint256 internal constant _ROLE_85 = 1 << 85;\\n    uint256 internal constant _ROLE_86 = 1 << 86;\\n    uint256 internal constant _ROLE_87 = 1 << 87;\\n    uint256 internal constant _ROLE_88 = 1 << 88;\\n    uint256 internal constant _ROLE_89 = 1 << 89;\\n    uint256 internal constant _ROLE_90 = 1 << 90;\\n    uint256 internal constant _ROLE_91 = 1 << 91;\\n    uint256 internal constant _ROLE_92 = 1 << 92;\\n    uint256 internal constant _ROLE_93 = 1 << 93;\\n    uint256 internal constant _ROLE_94 = 1 << 94;\\n    uint256 internal constant _ROLE_95 = 1 << 95;\\n    uint256 internal constant _ROLE_96 = 1 << 96;\\n    uint256 internal constant _ROLE_97 = 1 << 97;\\n    uint256 internal constant _ROLE_98 = 1 << 98;\\n    uint256 internal constant _ROLE_99 = 1 << 99;\\n    uint256 internal constant _ROLE_100 = 1 << 100;\\n    uint256 internal constant _ROLE_101 = 1 << 101;\\n    uint256 internal constant _ROLE_102 = 1 << 102;\\n    uint256 internal constant _ROLE_103 = 1 << 103;\\n    uint256 internal constant _ROLE_104 = 1 << 104;\\n    uint256 internal constant _ROLE_105 = 1 << 105;\\n    uint256 internal constant _ROLE_106 = 1 << 106;\\n    uint256 internal constant _ROLE_107 = 1 << 107;\\n    uint256 internal constant _ROLE_108 = 1 << 108;\\n    uint256 internal constant _ROLE_109 = 1 << 109;\\n    uint256 internal constant _ROLE_110 = 1 << 110;\\n    uint256 internal constant _ROLE_111 = 1 << 111;\\n    uint256 internal constant _ROLE_112 = 1 << 112;\\n    uint256 internal constant _ROLE_113 = 1 << 113;\\n    uint256 internal constant _ROLE_114 = 1 << 114;\\n    uint256 internal constant _ROLE_115 = 1 << 115;\\n    uint256 internal constant _ROLE_116 = 1 << 116;\\n    uint256 internal constant _ROLE_117 = 1 << 117;\\n    uint256 internal constant _ROLE_118 = 1 << 118;\\n    uint256 internal constant _ROLE_119 = 1 << 119;\\n    uint256 internal constant _ROLE_120 = 1 << 120;\\n    uint256 internal constant _ROLE_121 = 1 << 121;\\n    uint256 internal constant _ROLE_122 = 1 << 122;\\n    uint256 internal constant _ROLE_123 = 1 << 123;\\n    uint256 internal constant _ROLE_124 = 1 << 124;\\n    uint256 internal constant _ROLE_125 = 1 << 125;\\n    uint256 internal constant _ROLE_126 = 1 << 126;\\n    uint256 internal constant _ROLE_127 = 1 << 127;\\n    uint256 internal constant _ROLE_128 = 1 << 128;\\n    uint256 internal constant _ROLE_129 = 1 << 129;\\n    uint256 internal constant _ROLE_130 = 1 << 130;\\n    uint256 internal constant _ROLE_131 = 1 << 131;\\n    uint256 internal constant _ROLE_132 = 1 << 132;\\n    uint256 internal constant _ROLE_133 = 1 << 133;\\n    uint256 internal constant _ROLE_134 = 1 << 134;\\n    uint256 internal constant _ROLE_135 = 1 << 135;\\n    uint256 internal constant _ROLE_136 = 1 << 136;\\n    uint256 internal constant _ROLE_137 = 1 << 137;\\n    uint256 internal constant _ROLE_138 = 1 << 138;\\n    uint256 internal constant _ROLE_139 = 1 << 139;\\n    uint256 internal constant _ROLE_140 = 1 << 140;\\n    uint256 internal constant _ROLE_141 = 1 << 141;\\n    uint256 internal constant _ROLE_142 = 1 << 142;\\n    uint256 internal constant _ROLE_143 = 1 << 143;\\n    uint256 internal constant _ROLE_144 = 1 << 144;\\n    uint256 internal constant _ROLE_145 = 1 << 145;\\n    uint256 internal constant _ROLE_146 = 1 << 146;\\n    uint256 internal constant _ROLE_147 = 1 << 147;\\n    uint256 internal constant _ROLE_148 = 1 << 148;\\n    uint256 internal constant _ROLE_149 = 1 << 149;\\n    uint256 internal constant _ROLE_150 = 1 << 150;\\n    uint256 internal constant _ROLE_151 = 1 << 151;\\n    uint256 internal constant _ROLE_152 = 1 << 152;\\n    uint256 internal constant _ROLE_153 = 1 << 153;\\n    uint256 internal constant _ROLE_154 = 1 << 154;\\n    uint256 internal constant _ROLE_155 = 1 << 155;\\n    uint256 internal constant _ROLE_156 = 1 << 156;\\n    uint256 internal constant _ROLE_157 = 1 << 157;\\n    uint256 internal constant _ROLE_158 = 1 << 158;\\n    uint256 internal constant _ROLE_159 = 1 << 159;\\n    uint256 internal constant _ROLE_160 = 1 << 160;\\n    uint256 internal constant _ROLE_161 = 1 << 161;\\n    uint256 internal constant _ROLE_162 = 1 << 162;\\n    uint256 internal constant _ROLE_163 = 1 << 163;\\n    uint256 internal constant _ROLE_164 = 1 << 164;\\n    uint256 internal constant _ROLE_165 = 1 << 165;\\n    uint256 internal constant _ROLE_166 = 1 << 166;\\n    uint256 internal constant _ROLE_167 = 1 << 167;\\n    uint256 internal constant _ROLE_168 = 1 << 168;\\n    uint256 internal constant _ROLE_169 = 1 << 169;\\n    uint256 internal constant _ROLE_170 = 1 << 170;\\n    uint256 internal constant _ROLE_171 = 1 << 171;\\n    uint256 internal constant _ROLE_172 = 1 << 172;\\n    uint256 internal constant _ROLE_173 = 1 << 173;\\n    uint256 internal constant _ROLE_174 = 1 << 174;\\n    uint256 internal constant _ROLE_175 = 1 << 175;\\n    uint256 internal constant _ROLE_176 = 1 << 176;\\n    uint256 internal constant _ROLE_177 = 1 << 177;\\n    uint256 internal constant _ROLE_178 = 1 << 178;\\n    uint256 internal constant _ROLE_179 = 1 << 179;\\n    uint256 internal constant _ROLE_180 = 1 << 180;\\n    uint256 internal constant _ROLE_181 = 1 << 181;\\n    uint256 internal constant _ROLE_182 = 1 << 182;\\n    uint256 internal constant _ROLE_183 = 1 << 183;\\n    uint256 internal constant _ROLE_184 = 1 << 184;\\n    uint256 internal constant _ROLE_185 = 1 << 185;\\n    uint256 internal constant _ROLE_186 = 1 << 186;\\n    uint256 internal constant _ROLE_187 = 1 << 187;\\n    uint256 internal constant _ROLE_188 = 1 << 188;\\n    uint256 internal constant _ROLE_189 = 1 << 189;\\n    uint256 internal constant _ROLE_190 = 1 << 190;\\n    uint256 internal constant _ROLE_191 = 1 << 191;\\n    uint256 internal constant _ROLE_192 = 1 << 192;\\n    uint256 internal constant _ROLE_193 = 1 << 193;\\n    uint256 internal constant _ROLE_194 = 1 << 194;\\n    uint256 internal constant _ROLE_195 = 1 << 195;\\n    uint256 internal constant _ROLE_196 = 1 << 196;\\n    uint256 internal constant _ROLE_197 = 1 << 197;\\n    uint256 internal constant _ROLE_198 = 1 << 198;\\n    uint256 internal constant _ROLE_199 = 1 << 199;\\n    uint256 internal constant _ROLE_200 = 1 << 200;\\n    uint256 internal constant _ROLE_201 = 1 << 201;\\n    uint256 internal constant _ROLE_202 = 1 << 202;\\n    uint256 internal constant _ROLE_203 = 1 << 203;\\n    uint256 internal constant _ROLE_204 = 1 << 204;\\n    uint256 internal constant _ROLE_205 = 1 << 205;\\n    uint256 internal constant _ROLE_206 = 1 << 206;\\n    uint256 internal constant _ROLE_207 = 1 << 207;\\n    uint256 internal constant _ROLE_208 = 1 << 208;\\n    uint256 internal constant _ROLE_209 = 1 << 209;\\n    uint256 internal constant _ROLE_210 = 1 << 210;\\n    uint256 internal constant _ROLE_211 = 1 << 211;\\n    uint256 internal constant _ROLE_212 = 1 << 212;\\n    uint256 internal constant _ROLE_213 = 1 << 213;\\n    uint256 internal constant _ROLE_214 = 1 << 214;\\n    uint256 internal constant _ROLE_215 = 1 << 215;\\n    uint256 internal constant _ROLE_216 = 1 << 216;\\n    uint256 internal constant _ROLE_217 = 1 << 217;\\n    uint256 internal constant _ROLE_218 = 1 << 218;\\n    uint256 internal constant _ROLE_219 = 1 << 219;\\n    uint256 internal constant _ROLE_220 = 1 << 220;\\n    uint256 internal constant _ROLE_221 = 1 << 221;\\n    uint256 internal constant _ROLE_222 = 1 << 222;\\n    uint256 internal constant _ROLE_223 = 1 << 223;\\n    uint256 internal constant _ROLE_224 = 1 << 224;\\n    uint256 internal constant _ROLE_225 = 1 << 225;\\n    uint256 internal constant _ROLE_226 = 1 << 226;\\n    uint256 internal constant _ROLE_227 = 1 << 227;\\n    uint256 internal constant _ROLE_228 = 1 << 228;\\n    uint256 internal constant _ROLE_229 = 1 << 229;\\n    uint256 internal constant _ROLE_230 = 1 << 230;\\n    uint256 internal constant _ROLE_231 = 1 << 231;\\n    uint256 internal constant _ROLE_232 = 1 << 232;\\n    uint256 internal constant _ROLE_233 = 1 << 233;\\n    uint256 internal constant _ROLE_234 = 1 << 234;\\n    uint256 internal constant _ROLE_235 = 1 << 235;\\n    uint256 internal constant _ROLE_236 = 1 << 236;\\n    uint256 internal constant _ROLE_237 = 1 << 237;\\n    uint256 internal constant _ROLE_238 = 1 << 238;\\n    uint256 internal constant _ROLE_239 = 1 << 239;\\n    uint256 internal constant _ROLE_240 = 1 << 240;\\n    uint256 internal constant _ROLE_241 = 1 << 241;\\n    uint256 internal constant _ROLE_242 = 1 << 242;\\n    uint256 internal constant _ROLE_243 = 1 << 243;\\n    uint256 internal constant _ROLE_244 = 1 << 244;\\n    uint256 internal constant _ROLE_245 = 1 << 245;\\n    uint256 internal constant _ROLE_246 = 1 << 246;\\n    uint256 internal constant _ROLE_247 = 1 << 247;\\n    uint256 internal constant _ROLE_248 = 1 << 248;\\n    uint256 internal constant _ROLE_249 = 1 << 249;\\n    uint256 internal constant _ROLE_250 = 1 << 250;\\n    uint256 internal constant _ROLE_251 = 1 << 251;\\n    uint256 internal constant _ROLE_252 = 1 << 252;\\n    uint256 internal constant _ROLE_253 = 1 << 253;\\n    uint256 internal constant _ROLE_254 = 1 << 254;\\n    uint256 internal constant _ROLE_255 = 1 << 255;\\n}\\n\",\"keccak256\":\"0x27a1c151d748174587f74b79b7c42274ecaa722d100e473d750a8b4704addcfd\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638e236af2116100c3578063d12bcb121161007c578063d12bcb1214610332578063dabb053114610347578063dd0bfe4214610474578063e82b146214610487578063f06796161461049a578063f2fde38b146104ad57600080fd5b80638e236af2146102c65780639a17092a146102d95780639eda5e76146102ea578063a3f22a20146102fd578063ae70ed131461030e578063c2722ecc1461032157600080fd5b806336f337c61161011557806336f337c61461026a5780633ee6fa921461027f57806357e30f4414610292578063715018a6146102a5578063725fa09c146102ad5780638da5cb5b146102b557600080fd5b80630976c5171461015d5780630f34c166146101865780631958897f146101b15780631afc4a6b146101c45780632d08d6b714610244578063316df61e14610257575b600080fd5b61017061016b36600461159d565b6104c0565b60405161017d919061160e565b60405180910390f35b600a54610199906001600160a01b031681565b6040516001600160a01b03909116815260200161017d565b600b54610199906001600160a01b031681565b6102346101d2366004611637565b6040516001600160f81b031960f884811b8216602084015283901b166021820152600090819060220160408051601f1981840301815291815281516020928301206000888152600d8452828120918152925290205460ff169150509392505050565b604051901515815260200161017d565b61017061025236600461159d565b610546565b610170610265366004611761565b6105e0565b61027d6102783660046117ab565b61065c565b005b61027d61028d3660046117ab565b610686565b61027d6102a03660046117c8565b6106e3565b61027d61079a565b6101706107ae565b6000546001600160a01b0316610199565b61027d6102d4366004611637565b61080e565b6001546001600160a01b0316610199565b61027d6102f83660046117ab565b610a84565b6002546001600160a01b0316610199565b61027d61031c3660046117ab565b610aae565b600a546001600160a01b0316610199565b61033a610b04565b60405161017d91906118e9565b61040d61035536600461159d565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506000908152600c6020908152604091829020825160e081018452905460ff808216835261010082048116938301939093526201000081048316938201939093526301000000830482166060820152640100000000830482166080820152650100000000008304821660a0820152600160301b9092041660c082015290565b60405161017d9190600060e08201905060ff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401528060c08501511660c08401525092915050565b600954610199906001600160a01b031681565b6101706104953660046119a1565b610ebb565b6101706104a83660046119d1565b610ec7565b61027d6104bb3660046117ab565b611031565b6009546040516331a9108f60e11b8152600481018390526060916000916001600160a01b0390911690636352211e90602401602060405180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190611a3e565b905061053f83826110aa565b9392505050565b6009546040516331a9108f60e11b8152600481018390526060916001600160a01b031690636352211e90602401602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190611a3e565b604080516001600160a01b039092166020830152015b6040516020818303038152906040529050919050565b6001546040516318b6fb0f60e11b81526060916001600160a01b03169063316df61e9061061190859060040161160e565b600060405180830381865afa15801561062e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106569190810190611a5b565b92915050565b610664611179565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61068e611179565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f10c0817f42b2182992d55b707430b153f12e59d7e54a975bfec790497dd7f63f906020015b60405180910390a150565b6106eb611179565b8051819060039081906106fe9082611b52565b50602082015160018201906107139082611b52565b50604082015160028201906107289082611b52565b506060820151600382019061073d9082611b52565b50608082015160048201906107529082611b52565b5060a082015160058201906107679082611b52565b509050507f03a10335d532669eac03b3b7e4ce44aff7f8cb14b7aa397c653fdcb40ae06bec816040516106d891906118e9565b6107a2611179565b6107ac60006111d3565b565b6040516060906107ea906107d690600390600490600590600690600790600890602001611c85565b604051602081830303815290604052611223565b6040516020016107fa9190611e0b565b604051602081830303815290604052905090565b6009546001600160a01b0316336001600160a01b0316146108765760405162461bcd60e51b815260206004820152601d60248201527f506978656c506f6f6c7953746f726167653a6f6e6c792d65726337323100000060448201526064015b60405180910390fd5b6040516001600160f81b031960f884811b8216602084015283901b16602182015260009060220160408051601f1981840301815291815281516020928301206000878152600d845282812082825290935291205490915060ff1661091c5760405162461bcd60e51b815260206004820152601f60248201527f506978656c506f6f6c7953746f726167653a736c6f742d696e61637469766500604482015260640161086d565b8260ff16600003610947576000848152600c60205260409020805460ff191660ff8416179055610a7e565b8260ff16600103610977576000848152600c60205260409020805461ff00191661010060ff851602179055610a7e565b8260ff166002036109a9576000848152600c60205260409020805462ff000019166201000060ff851602179055610a7e565b8260ff166003036109dd576000848152600c60205260409020805463ff0000001916630100000060ff851602179055610a7e565b8260ff16600403610a13576000848152600c60205260409020805464ff00000000191664010000000060ff851602179055610a7e565b8260ff16600503610a4b576000848152600c60205260409020805465ff000000000019166501000000000060ff851602179055610a7e565b8260ff16600603610a7e576000848152600c60205260409020805466ff0000000000001916600160301b60ff8516021790555b50505050565b610a8c611179565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b610ab6611179565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f3c2715cb5e4b39dd4af38ac12bb292a030fb6a063dbd5467ed49da665bcaa973906020016106d8565b610b3d6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b60036040518060c0016040529081600082018054610b5a90611ac9565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8690611ac9565b8015610bd35780601f10610ba857610100808354040283529160200191610bd3565b820191906000526020600020905b815481529060010190602001808311610bb657829003601f168201915b50505050508152602001600182018054610bec90611ac9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1890611ac9565b8015610c655780601f10610c3a57610100808354040283529160200191610c65565b820191906000526020600020905b815481529060010190602001808311610c4857829003601f168201915b50505050508152602001600282018054610c7e90611ac9565b80601f0160208091040260200160405190810160405280929190818152602001828054610caa90611ac9565b8015610cf75780601f10610ccc57610100808354040283529160200191610cf7565b820191906000526020600020905b815481529060010190602001808311610cda57829003601f168201915b50505050508152602001600382018054610d1090611ac9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3c90611ac9565b8015610d895780601f10610d5e57610100808354040283529160200191610d89565b820191906000526020600020905b815481529060010190602001808311610d6c57829003601f168201915b50505050508152602001600482018054610da290611ac9565b80601f0160208091040260200160405190810160405280929190818152602001828054610dce90611ac9565b8015610e1b5780601f10610df057610100808354040283529160200191610e1b565b820191906000526020600020905b815481529060010190602001808311610dfe57829003601f168201915b50505050508152602001600582018054610e3490611ac9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6090611ac9565b8015610ead5780601f10610e8257610100808354040283529160200191610ead565b820191906000526020600020905b815481529060010190602001808311610e9057829003601f168201915b505050505081525050905090565b606061053f83836110aa565b600b54606090600160a01b900460ff1615610eec57610ee584611388565b905061053f565b6001546040516318b6fb0f60e11b81526000916001600160a01b03169063316df61e90610f1d90879060040161160e565b600060405180830381865afa158015610f3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f629190810190611a5b565b60025460405163f6559a6b60e01b81529192506000916001600160a01b039091169063f6559a6b90610f9890879060040161160e565b600060405180830381865afa158015610fb5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fdd9190810190611a5b565b9050611009610feb8761145e565b610ff488611479565b84846040516020016107d69493929190611e50565b6040516020016110199190611e0b565b6040516020818303038152906040529250505061053f565b611039611179565b6001600160a01b03811661109e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161086d565b6110a7816111d3565b50565b506000908152600c6020908152604091829020825160e08082018552915460ff80821680845261010080840483168588018190526201000085048416868a018190526301000000860485166060808901829052640100000000880487166080808b01829052650100000000008a04891660a0808d01829052600160301b909b0490991660c09b8c018190528e519d8e01989098528c8e0195909552908b019290925291890191909152938701939093529285015283830191909152835180840390920182529190910190915290565b6000546001600160a01b031633146107ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161086d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060815160000361124257505060408051602081019091526000815290565b600060405180606001604052806040815260200161217460409139905060006003845160026112719190611f57565b61127b9190611f85565b611286906004611f99565b90506000611295826020611f57565b67ffffffffffffffff8111156112ad576112ad611673565b6040519080825280601f01601f1916602001820160405280156112d7576020820181803683370190505b509050818152600183018586518101602084015b81831015611343576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253506001016112eb565b60038951066001811461135d576002811461136e5761137a565b613d3d60f01b60011983015261137a565b603d60f81b6000198301525b509398975050505050505050565b604080516020810182526000808252600b5492516318b6fb0f60e11b81526060936001600160a01b03169063316df61e906113c790859060040161160e565b600060405180830381865afa1580156113e4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261140c9190810190611a5b565b905061143661141a8561145e565b61142386611479565b836040516020016107d693929190611fb8565b6040516020016114469190611e0b565b60405160208183030381529060405292505050919050565b606061146982611494565b6040516020016105ca919061209c565b606061148482611494565b6040516020016105ca91906120d0565b6060816000036114bb5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156114e557806114cf81612119565b91506114de9050600a83611f85565b91506114bf565b60008167ffffffffffffffff81111561150057611500611673565b6040519080825280601f01601f19166020018201604052801561152a576020820181803683370190505b5090505b84156115955761153f600183612132565b915061154c600a86612149565b611557906030611f57565b60f81b81838151811061156c5761156c61215d565b60200101906001600160f81b031916908160001a90535061158e600a86611f85565b945061152e565b949350505050565b6000602082840312156115af57600080fd5b5035919050565b60005b838110156115d15781810151838201526020016115b9565b83811115610a7e5750506000910152565b600081518084526115fa8160208601602086016115b6565b601f01601f19169290920160200192915050565b60208152600061053f60208301846115e2565b803560ff8116811461163257600080fd5b919050565b60008060006060848603121561164c57600080fd5b8335925061165c60208501611621565b915061166a60408501611621565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156116ac576116ac611673565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116db576116db611673565b604052919050565b600067ffffffffffffffff8211156116fd576116fd611673565b50601f01601f191660200190565b600082601f83011261171c57600080fd5b813561172f61172a826116e3565b6116b2565b81815284602083860101111561174457600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561177357600080fd5b813567ffffffffffffffff81111561178a57600080fd5b6115958482850161170b565b6001600160a01b03811681146110a757600080fd5b6000602082840312156117bd57600080fd5b813561053f81611796565b6000602082840312156117da57600080fd5b813567ffffffffffffffff808211156117f257600080fd5b9083019060c0828603121561180657600080fd5b61180e611689565b82358281111561181d57600080fd5b6118298782860161170b565b82525060208301358281111561183e57600080fd5b61184a8782860161170b565b60208301525060408301358281111561186257600080fd5b61186e8782860161170b565b60408301525060608301358281111561188657600080fd5b6118928782860161170b565b6060830152506080830135828111156118aa57600080fd5b6118b68782860161170b565b60808301525060a0830135828111156118ce57600080fd5b6118da8782860161170b565b60a08301525095945050505050565b602081526000825160c0602084015261190560e08401826115e2565b90506020840151601f198085840301604086015261192383836115e2565b9250604086015191508085840301606086015261194083836115e2565b9250606086015191508085840301608086015261195d83836115e2565b925060808601519150808584030160a086015261197a83836115e2565b925060a08601519150808584030160c08601525061199882826115e2565b95945050505050565b600080604083850312156119b457600080fd5b8235915060208301356119c681611796565b809150509250929050565b6000806000606084860312156119e657600080fd5b83359250602084013567ffffffffffffffff80821115611a0557600080fd5b611a118783880161170b565b93506040860135915080821115611a2757600080fd5b50611a348682870161170b565b9150509250925092565b600060208284031215611a5057600080fd5b815161053f81611796565b600060208284031215611a6d57600080fd5b815167ffffffffffffffff811115611a8457600080fd5b8201601f81018413611a9557600080fd5b8051611aa361172a826116e3565b818152856020838501011115611ab857600080fd5b6119988260208301602086016115b6565b600181811c90821680611add57607f821691505b602082108103611afd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611b4d57600081815260208120601f850160051c81016020861015611b2a5750805b601f850160051c820191505b81811015611b4957828155600101611b36565b5050505b505050565b815167ffffffffffffffff811115611b6c57611b6c611673565b611b8081611b7a8454611ac9565b84611b03565b602080601f831160018114611bb55760008415611b9d5750858301515b600019600386901b1c1916600185901b178555611b49565b600085815260208120601f198616915b82811015611be457888601518255948401946001909101908401611bc5565b5085821015611c025787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008154611c1f81611ac9565b60018281168015611c375760018114611c4c57611c7b565b60ff1984168752821515830287019450611c7b565b8560005260208060002060005b85811015611c725781548a820152908401908201611c59565b50505082870194505b5050505092915050565b673d913730b6b2911d60c11b8152601160f91b60088201526000611cac6009830189611c12565b61088b60f21b81526002611cd28183016d113232b9b1b934b83a34b7b7111d60911b9052565b601160f91b6010830152611ce9601183018a611c12565b61088b60f21b81529150671134b6b0b3b2911d60c11b82820152601160f91b600a830152611d1a600b830189611c12565b61088b60f21b815291506e1132bc3a32b93730b62634b735911d60891b82820152601160f91b6011830152611d526012830188611c12565b61088b60f21b815291507f2273656c6c65724665654261736973506f696e7473223a00000000000000000082820152601160f91b6019830152611d98601a830187611c12565b61088b60f21b815291506e113332b2a932b1b4b834b2b73a111d60891b82820152601160f91b6011830152611dd06012830186611c12565b601160f91b8152607d60f81b6001820152019998505050505050505050565b60008151611e018185602086016115b6565b9290920192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611e4381601d8501602087016115b6565b91909101601d0192915050565b673d913730b6b2911d60c11b8152601160f91b60088201528451600090611e7e816009850160208a016115b6565b61088b60f21b6009918401918201526d113232b9b1b934b83a34b7b7111d60911b600b820152611eb460198201601160f91b9052565b611ec1601a820187611def565b61088b60f21b81529050671134b6b0b3b2911d60c11b6002820152601160f91b600a820152611ef3600b820186611def565b61088b60f21b815290506e2261747472696275746573223a205b60881b6002820152611f226011820185611def565b605d60f81b8152607d60f81b6001820152600201979650505050505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f6a57611f6a611f41565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611f9457611f94611f6f565b500490565b6000816000190483118215151615611fb357611fb3611f41565b500290565b673d913730b6b2911d60c11b8152601160f91b60088201528351600090611fe68160098501602089016115b6565b61088b60f21b6009918401918201526d113232b9b1b934b83a34b7b7111d60911b600b82015261201c60198201601160f91b9052565b612029601a820186611def565b61088b60f21b81529050671134b6b0b3b2911d60c11b6002820152601160f91b600a82015261205b600b820185611def565b61088b60f21b81526e2261747472696275746573223a205b60881b6002820152605d60f81b6011820152607d60f81b60128201526013019695505050505050565b6b506978656c506f6f6c79202360a01b8152600082516120c381600c8501602087016115b6565b91909101600c0192915050565b674d656d626572202360c01b8152600082516120f38160088501602087016115b6565b6e1037b3102834bc32b62837b7b63c9760891b6008939091019283015250601701919050565b60006001820161212b5761212b611f41565b5060010190565b60008282101561214457612144611f41565b500390565b60008261215857612158611f6f565b500690565b634e487b7160e01b600052603260045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122001c6ea0735a496b6ae13607607b3d99690cac4188ef572c1b22baa818976a0cf64736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "kind": "dev",
    "methods": {
      "getImageBytes(uint256)": {
        "params": {
          "tokenId": "uint256 - The token ID to query"
        },
        "returns": {
          "_0": "bytes - Packed bytes of the active item slots"
        }
      },
      "getPreview(uint256,address)": {
        "params": {
          "tokenId": "uint256 - The token ID to query"
        },
        "returns": {
          "_0": "bytes - Packed bytes of the active item slots"
        }
      },
      "getTraitsBytes(uint256)": {
        "params": {
          "tokenId": "uint256 - The token ID to query."
        },
        "returns": {
          "_0": "bytes - Packed instructions for traits PixelPoolyTraits"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PixelPoolyStorage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructTokenURI(uint256,bytes,bytes)": {
        "notice": "----------------------------------------------------------------------- Overrides & EIP Functions -----------------------------------------------------------------------"
      },
      "constructor": {
        "notice": "----------------------------------------------------------------------- Constructor -----------------------------------------------------------------------"
      },
      "getCharacter(uint256)": {
        "notice": "----------------------------------------------------------------------- External Functions -----------------------------------------------------------------------"
      },
      "getImageBytes(uint256)": {
        "notice": "Get the active item slots for a Pixel Pooly character"
      },
      "getPreview(uint256,address)": {
        "notice": "Get the active item slots for a Pixel Pooly character"
      },
      "getSvgRender()": {
        "notice": "----------------------------------------------------------------------- External Functions -----------------------------------------------------------------------"
      },
      "getTraitsBytes(uint256)": {
        "notice": "Get the trait bytes for a Pixel Pooly character"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2753,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 315,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "_svgRender",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 317,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "_traitsFetch",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 320,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "_contractURI",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(ContractURI)333_storage"
      },
      {
        "astId": 3945,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "erc721Instance",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3947,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "pixelStoreInstance",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3949,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "erc721ImageSignal",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3951,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "isSignalActive",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 3957,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "_characters",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Character)3979_storage)"
      },
      {
        "astId": 3964,
        "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
        "label": "_items",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Character)3979_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PixelPoolyStorage.Character)",
        "numberOfBytes": "32",
        "value": "t_struct(Character)3979_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Character)3979_storage": {
        "encoding": "inplace",
        "label": "struct PixelPoolyStorage.Character",
        "members": [
          {
            "astId": 3966,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "background",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3968,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "head",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3970,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "body",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3972,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "headAcc",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3974,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "bodyAcc",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3976,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "leftAcc",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3978,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "rightAcc",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ContractURI)333_storage": {
        "encoding": "inplace",
        "label": "struct ERC721Storage.ContractURI",
        "members": [
          {
            "astId": 322,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 324,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 326,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 328,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "externalLink",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 330,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "sellerFeeBasisPoints",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 332,
            "contract": "@pixel-pals/pooly-sol/contracts/PixelPoolyStorage.sol:PixelPoolyStorage",
            "label": "feeRecipient",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}