{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "byte2uint8",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_len",
          "type": "uint256"
        }
      ],
      "name": "stringifyIntSet",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x826f3d6bae750ed1941f0111d4638798d1b00906df101f2b172d4ede76e84f1d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "353779",
    "logsBloom": "0x
    "blockHash": "0xba46d05e43e33062ff6fcd8950783b28aa0f32a7014eb6c239b52d906895bd3f",
    "transactionHash": "0x826f3d6bae750ed1941f0111d4638798d1b00906df101f2b172d4ede76e84f1d",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "353779",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ef37faf7dd3b7fa520c15f0e8cdad15",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"byte2uint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"stringifyIntSet\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kames Geraghty\",\"details\":\"Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"svg\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"SVG construction library using web-like API.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@erc721k/periphery-sol/contracts/svg/svg.sol\":\"svg\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc721k/periphery-sol/contracts/svg/svg.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./svgUtils.sol\\\";\\n\\n/**\\n * @title svg\\n * @author Kames Geraghty\\n * @notice SVG construction library using web-like API.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svg {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  function g(string memory _props, string memory _children) internal pure returns (string memory) {\\n    return el(\\\"g\\\", _props, _children);\\n  }\\n\\n  function path(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"path\\\", _props, _children);\\n  }\\n\\n  function text(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"text\\\", _props, _children);\\n  }\\n\\n  function line(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"line\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"circle\\\", _props, _children);\\n  }\\n\\n  function circle(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"circle\\\", _props);\\n  }\\n\\n  function rect(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"rect\\\", _props, _children);\\n  }\\n\\n  function rect(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"rect\\\", _props);\\n  }\\n\\n  function stop(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"stop\\\", _props);\\n  }\\n\\n  function filter(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"filter\\\", _props, _children);\\n  }\\n\\n  function defs(string memory _children) internal pure returns (string memory) {\\n    return el(\\\"defs\\\", \\\"\\\", _children);\\n  }\\n\\n  function cdata(string memory _content) internal pure returns (string memory) {\\n    return string.concat(\\\"<![CDATA[\\\", _content, \\\"]]>\\\");\\n  }\\n\\n  /* GRADIENTS */\\n  function radialGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"radialGradient\\\", _props, _children);\\n  }\\n\\n  function linearGradient(string memory _props, string memory _children)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return el(\\\"linearGradient\\\", _props, _children);\\n  }\\n\\n  function gradientStop(\\n    uint256 offset,\\n    string memory stopColor,\\n    string memory _props\\n  ) internal pure returns (string memory) {\\n    return\\n      el(\\n        \\\"stop\\\",\\n        string.concat(\\n          prop(\\\"stop-color\\\", stopColor),\\n          \\\" \\\",\\n          prop(\\\"offset\\\", string.concat(svgUtils.uint2str(offset), \\\"%\\\")),\\n          \\\" \\\",\\n          _props\\n        )\\n      );\\n  }\\n\\n  function animateTransform(string memory _props) internal pure returns (string memory) {\\n    return el(\\\"animateTransform\\\", _props);\\n  }\\n\\n  function image(string memory _href, string memory _props) internal pure returns (string memory) {\\n    return el(\\\"image\\\", string.concat(prop(\\\"href\\\", _href), \\\" \\\", _props));\\n  }\\n\\n  function start() internal pure returns (string memory) {\\n    return\\n      string.concat(\\n        '<svg width=\\\"320\\\" height=\\\"320\\\" style=\\\"background:#FFF\\\" ',\\n        'viewBox=\\\"0 0 320 320\\\" ',\\n        'xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n        \\\">\\\"\\n      );\\n  }\\n\\n  function end() internal pure returns (bytes memory) {\\n    return (\\\"</svg>\\\");\\n  }\\n\\n  /* COMMON */\\n  // A generic element, can be used to construct any SVG (or HTML) element\\n  function el(\\n    string memory _tag,\\n    string memory _props,\\n    string memory _children\\n  ) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\">\\\", _children, \\\"</\\\", _tag, \\\">\\\");\\n  }\\n\\n  // A generic element, can be used to construct any SVG (or HTML) element without children\\n  function el(string memory _tag, string memory _props) internal pure returns (string memory) {\\n    return string.concat(\\\"<\\\", _tag, \\\" \\\", _props, \\\"/>\\\");\\n  }\\n\\n  // an SVG attribute\\n  function prop(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(_key, \\\"=\\\", '\\\"', _val, '\\\" ');\\n  }\\n\\n  function stringifyIntSet(\\n    bytes memory _data,\\n    uint256 _offset,\\n    uint256 _len\\n  ) public pure returns (bytes memory) {\\n    bytes memory res;\\n    require(_data.length >= _offset + _len, \\\"Out of range\\\");\\n    for (uint256 i = _offset; i < _offset + _len; i++) {\\n      res = abi.encodePacked(res, byte2uint8(_data, i).toString(), \\\" \\\");\\n    }\\n    return res;\\n  }\\n\\n  function byte2uint8(bytes memory _data, uint256 _offset) public pure returns (uint8) {\\n    require(_data.length > _offset, \\\"Out of range\\\");\\n    return uint8(_data[_offset]);\\n  }\\n}\\n\",\"keccak256\":\"0xf644e6733bbb569d02a52d975bb84834bb89d66894becb3ee4af2324e7934077\",\"license\":\"MIT\"},\"@erc721k/periphery-sol/contracts/svg/svgUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title  SVG Utilities\\n * @author Kames Geraghty\\n * @notice The SVG Utilities Library provides functions for constructing SVG; format CSS and numbers.\\n * @dev Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)\\n */\\nlibrary svgUtils {\\n  using Strings for uint256;\\n  using Strings for uint8;\\n\\n  /// @notice Empty SVG element\\n  string internal constant NULL = \\\"\\\";\\n\\n  /**\\n   * @notice Formats a CSS variable line. Includes a semicolon for formatting.\\n   * @param _key User for which to calculate prize amount.\\n   * @param _val User for which to calculate prize amount.\\n   * @return string Generated CSS variable.\\n   */\\n  function setCssVar(string memory _key, string memory _val) internal pure returns (string memory) {\\n    return string.concat(\\\"--\\\", _key, \\\":\\\", _val, \\\";\\\");\\n  }\\n\\n  /**\\n   * @notice Formats getting a css variable\\n   * @param _key User for which to calculate prize amount.\\n   * @return string Generated CSS variable.\\n   */\\n  function getCssVar(string memory _key) internal pure returns (string memory) {\\n    return string.concat(\\\"var(--\\\", _key, \\\")\\\");\\n  }\\n\\n  // formats getting a def URL\\n  function getDefURL(string memory _id) internal pure returns (string memory) {\\n    return string.concat(\\\"url(#\\\", _id, \\\")\\\");\\n  }\\n\\n  // checks if two strings are equal\\n  function stringsEqual(string memory _a, string memory _b) internal pure returns (bool) {\\n    return keccak256(abi.encodePacked(_a)) == keccak256(abi.encodePacked(_b));\\n  }\\n\\n  // returns the length of a string in characters\\n  function utfStringLength(string memory _str) internal pure returns (uint256 length) {\\n    uint256 i = 0;\\n    bytes memory string_rep = bytes(_str);\\n\\n    while (i < string_rep.length) {\\n      if (string_rep[i] >> 7 == 0) i += 1;\\n      else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n      else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n      else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n        i += 4;\\n        //For safety\\n      else i += 1;\\n\\n      length++;\\n    }\\n  }\\n\\n  function round2Txt(\\n    uint256 _value,\\n    uint8 _decimals,\\n    uint8 _prec\\n  ) internal pure returns (bytes memory) {\\n    return\\n      abi.encodePacked(\\n        (_value / 10**_decimals).toString(),\\n        \\\".\\\",\\n        (_value / 10**(_decimals - _prec) - (_value / 10**(_decimals)) * 10**_prec).toString()\\n      );\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0xeef5c418c0fb41d2cad2e737b0b321bf22221b12514382259faa8e5cb6573f4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61056f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80635119ce4b14610045578063c821f2ef1461006f575b600080fd5b610058610053366004610356565b61008f565b60405160ff90911681526020015b60405180910390f35b61008261007d36600461039b565b6100f7565b6040516100669190610419565b6000818351116100d55760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064015b60405180910390fd5b8282815181106100e7576100e761044c565b016020015160f81c905092915050565b6060806101048385610478565b855110156101435760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064016100cc565b835b61014f8486610478565b8110156101a1578161016c610164888461008f565b60ff166101aa565b60405160200161017d929190610490565b60405160208183030381529060405291508080610199906104cb565b915050610145565b50949350505050565b6060816000036101d15750506040805180820190915260018152600360fc1b602082015290565b8160005b81156101fb57806101e5816104cb565b91506101f49050600a836104fa565b91506101d5565b60008167ffffffffffffffff811115610216576102166102b3565b6040519080825280601f01601f191660200182016040528015610240576020820181803683370190505b5090505b84156102ab5761025560018361050e565b9150610262600a86610525565b61026d906030610478565b60f81b8183815181106102825761028261044c565b60200101906001600160f81b031916908160001a9053506102a4600a866104fa565b9450610244565b949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126102da57600080fd5b813567ffffffffffffffff808211156102f5576102f56102b3565b604051601f8301601f19908116603f0116810190828211818310171561031d5761031d6102b3565b8160405283815286602085880101111561033657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561036957600080fd5b823567ffffffffffffffff81111561038057600080fd5b61038c858286016102c9565b95602094909401359450505050565b6000806000606084860312156103b057600080fd5b833567ffffffffffffffff8111156103c757600080fd5b6103d3868287016102c9565b9660208601359650604090950135949350505050565b60005b838110156104045781810151838201526020016103ec565b83811115610413576000848401525b50505050565b60208152600082518060208401526104388160408501602087016103e9565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561048b5761048b610462565b500190565b600083516104a28184602088016103e9565b8351908301906104b68183602088016103e9565b600160fd1b9101908152600101949350505050565b6000600182016104dd576104dd610462565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610509576105096104e4565b500490565b60008282101561052057610520610462565b500390565b600082610534576105346104e4565b50069056fea2646970667358221220f97392904637ccec6c723a84eff921df3ace96ad89a408df1d4e2f8c1cdd0d3d64736f6c634300080f0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80635119ce4b14610045578063c821f2ef1461006f575b600080fd5b610058610053366004610356565b61008f565b60405160ff90911681526020015b60405180910390f35b61008261007d36600461039b565b6100f7565b6040516100669190610419565b6000818351116100d55760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064015b60405180910390fd5b8282815181106100e7576100e761044c565b016020015160f81c905092915050565b6060806101048385610478565b855110156101435760405162461bcd60e51b815260206004820152600c60248201526b4f7574206f662072616e676560a01b60448201526064016100cc565b835b61014f8486610478565b8110156101a1578161016c610164888461008f565b60ff166101aa565b60405160200161017d929190610490565b60405160208183030381529060405291508080610199906104cb565b915050610145565b50949350505050565b6060816000036101d15750506040805180820190915260018152600360fc1b602082015290565b8160005b81156101fb57806101e5816104cb565b91506101f49050600a836104fa565b91506101d5565b60008167ffffffffffffffff811115610216576102166102b3565b6040519080825280601f01601f191660200182016040528015610240576020820181803683370190505b5090505b84156102ab5761025560018361050e565b9150610262600a86610525565b61026d906030610478565b60f81b8183815181106102825761028261044c565b60200101906001600160f81b031916908160001a9053506102a4600a866104fa565b9450610244565b949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126102da57600080fd5b813567ffffffffffffffff808211156102f5576102f56102b3565b604051601f8301601f19908116603f0116810190828211818310171561031d5761031d6102b3565b8160405283815286602085880101111561033657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561036957600080fd5b823567ffffffffffffffff81111561038057600080fd5b61038c858286016102c9565b95602094909401359450505050565b6000806000606084860312156103b057600080fd5b833567ffffffffffffffff8111156103c757600080fd5b6103d3868287016102c9565b9660208601359650604090950135949350505050565b60005b838110156104045781810151838201526020016103ec565b83811115610413576000848401525b50505050565b60208152600082518060208401526104388160408501602087016103e9565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561048b5761048b610462565b500190565b600083516104a28184602088016103e9565b8351908301906104b68183602088016103e9565b600160fd1b9101908152600101949350505050565b6000600182016104dd576104dd610462565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610509576105096104e4565b500490565b60008282101561052057610520610462565b500390565b600082610534576105346104e4565b50069056fea2646970667358221220f97392904637ccec6c723a84eff921df3ace96ad89a408df1d4e2f8c1cdd0d3d64736f6c634300080f0033",
  "devdoc": {
    "author": "Kames Geraghty",
    "details": "Original code from w1nt3r-eth/hot-chain-svg (https://github.com/w1nt3r-eth/hot-chain-svg)",
    "kind": "dev",
    "methods": {},
    "title": "svg",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "SVG construction library using web-like API.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}